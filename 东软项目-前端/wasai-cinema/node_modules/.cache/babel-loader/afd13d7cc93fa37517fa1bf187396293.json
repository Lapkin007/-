{"ast":null,"code":"var _toConsumableArray = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.match.js\");\n\nrequire(\"core-js/modules/es.array.concat.js\");\n\nrequire(\"core-js/modules/es.string.split.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.regexp.test.js\");\n\nrequire(\"core-js/modules/es.array.slice.js\");\n\nrequire(\"core-js/modules/es.array.join.js\");\n\nvar isWindows = process.platform === 'win32' || process.env.OSTYPE === 'cygwin' || process.env.OSTYPE === 'msys';\n\nvar path = require('path');\n\nvar COLON = isWindows ? ';' : ':';\n\nvar isexe = require('isexe');\n\nvar getNotFoundError = function getNotFoundError(cmd) {\n  return Object.assign(new Error(\"not found: \".concat(cmd)), {\n    code: 'ENOENT'\n  });\n};\n\nvar getPathInfo = function getPathInfo(cmd, opt) {\n  var colon = opt.colon || COLON; // If it has a slash, then we don't bother searching the pathenv.\n  // just check the file itself, and that's it.\n\n  var pathEnv = cmd.match(/\\//) || isWindows && cmd.match(/\\\\/) ? [''] : [].concat(_toConsumableArray(isWindows ? [process.cwd()] : []), _toConsumableArray((opt.path || process.env.PATH ||\n  /* istanbul ignore next: very unusual */\n  '').split(colon)));\n  var pathExtExe = isWindows ? opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM' : '';\n  var pathExt = isWindows ? pathExtExe.split(colon) : [''];\n\n  if (isWindows) {\n    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '') pathExt.unshift('');\n  }\n\n  return {\n    pathEnv: pathEnv,\n    pathExt: pathExt,\n    pathExtExe: pathExtExe\n  };\n};\n\nvar which = function which(cmd, opt, cb) {\n  if (typeof opt === 'function') {\n    cb = opt;\n    opt = {};\n  }\n\n  if (!opt) opt = {};\n\n  var _getPathInfo = getPathInfo(cmd, opt),\n      pathEnv = _getPathInfo.pathEnv,\n      pathExt = _getPathInfo.pathExt,\n      pathExtExe = _getPathInfo.pathExtExe;\n\n  var found = [];\n\n  var step = function step(i) {\n    return new Promise(function (resolve, reject) {\n      if (i === pathEnv.length) return opt.all && found.length ? resolve(found) : reject(getNotFoundError(cmd));\n      var ppRaw = pathEnv[i];\n      var pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;\n      var pCmd = path.join(pathPart, cmd);\n      var p = !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;\n      resolve(subStep(p, i, 0));\n    });\n  };\n\n  var subStep = function subStep(p, i, ii) {\n    return new Promise(function (resolve, reject) {\n      if (ii === pathExt.length) return resolve(step(i + 1));\n      var ext = pathExt[ii];\n      isexe(p + ext, {\n        pathExt: pathExtExe\n      }, function (er, is) {\n        if (!er && is) {\n          if (opt.all) found.push(p + ext);else return resolve(p + ext);\n        }\n\n        return resolve(subStep(p, i, ii + 1));\n      });\n    });\n  };\n\n  return cb ? step(0).then(function (res) {\n    return cb(null, res);\n  }, cb) : step(0);\n};\n\nvar whichSync = function whichSync(cmd, opt) {\n  opt = opt || {};\n\n  var _getPathInfo2 = getPathInfo(cmd, opt),\n      pathEnv = _getPathInfo2.pathEnv,\n      pathExt = _getPathInfo2.pathExt,\n      pathExtExe = _getPathInfo2.pathExtExe;\n\n  var found = [];\n\n  for (var i = 0; i < pathEnv.length; i++) {\n    var ppRaw = pathEnv[i];\n    var pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;\n    var pCmd = path.join(pathPart, cmd);\n    var p = !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;\n\n    for (var j = 0; j < pathExt.length; j++) {\n      var cur = p + pathExt[j];\n\n      try {\n        var is = isexe.sync(cur, {\n          pathExt: pathExtExe\n        });\n\n        if (is) {\n          if (opt.all) found.push(cur);else return cur;\n        }\n      } catch (ex) {}\n    }\n  }\n\n  if (opt.all && found.length) return found;\n  if (opt.nothrow) return null;\n  throw getNotFoundError(cmd);\n};\n\nmodule.exports = which;\nwhich.sync = whichSync;","map":{"version":3,"sources":["E:/DW/wasai-cinema/node_modules/default-gateway/node_modules/which/which.js"],"names":["isWindows","process","platform","env","OSTYPE","path","require","COLON","isexe","getNotFoundError","cmd","Object","assign","Error","code","getPathInfo","opt","colon","pathEnv","match","cwd","PATH","split","pathExtExe","pathExt","PATHEXT","indexOf","unshift","which","cb","found","step","i","Promise","resolve","reject","length","all","ppRaw","pathPart","test","slice","pCmd","join","p","subStep","ii","ext","er","is","push","then","res","whichSync","j","cur","sync","ex","nothrow","module","exports"],"mappings":"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","sourcesContent":["const isWindows = process.platform === 'win32' ||\n    process.env.OSTYPE === 'cygwin' ||\n    process.env.OSTYPE === 'msys'\n\nconst path = require('path')\nconst COLON = isWindows ? ';' : ':'\nconst isexe = require('isexe')\n\nconst getNotFoundError = (cmd) =>\n  Object.assign(new Error(`not found: ${cmd}`), { code: 'ENOENT' })\n\nconst getPathInfo = (cmd, opt) => {\n  const colon = opt.colon || COLON\n\n  // If it has a slash, then we don't bother searching the pathenv.\n  // just check the file itself, and that's it.\n  const pathEnv = cmd.match(/\\//) || isWindows && cmd.match(/\\\\/) ? ['']\n    : (\n      [\n        // windows always checks the cwd first\n        ...(isWindows ? [process.cwd()] : []),\n        ...(opt.path || process.env.PATH ||\n          /* istanbul ignore next: very unusual */ '').split(colon),\n      ]\n    )\n  const pathExtExe = isWindows\n    ? opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM'\n    : ''\n  const pathExt = isWindows ? pathExtExe.split(colon) : ['']\n\n  if (isWindows) {\n    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '')\n      pathExt.unshift('')\n  }\n\n  return {\n    pathEnv,\n    pathExt,\n    pathExtExe,\n  }\n}\n\nconst which = (cmd, opt, cb) => {\n  if (typeof opt === 'function') {\n    cb = opt\n    opt = {}\n  }\n  if (!opt)\n    opt = {}\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)\n  const found = []\n\n  const step = i => new Promise((resolve, reject) => {\n    if (i === pathEnv.length)\n      return opt.all && found.length ? resolve(found)\n        : reject(getNotFoundError(cmd))\n\n    const ppRaw = pathEnv[i]\n    const pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw\n\n    const pCmd = path.join(pathPart, cmd)\n    const p = !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd\n      : pCmd\n\n    resolve(subStep(p, i, 0))\n  })\n\n  const subStep = (p, i, ii) => new Promise((resolve, reject) => {\n    if (ii === pathExt.length)\n      return resolve(step(i + 1))\n    const ext = pathExt[ii]\n    isexe(p + ext, { pathExt: pathExtExe }, (er, is) => {\n      if (!er && is) {\n        if (opt.all)\n          found.push(p + ext)\n        else\n          return resolve(p + ext)\n      }\n      return resolve(subStep(p, i, ii + 1))\n    })\n  })\n\n  return cb ? step(0).then(res => cb(null, res), cb) : step(0)\n}\n\nconst whichSync = (cmd, opt) => {\n  opt = opt || {}\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)\n  const found = []\n\n  for (let i = 0; i < pathEnv.length; i ++) {\n    const ppRaw = pathEnv[i]\n    const pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw\n\n    const pCmd = path.join(pathPart, cmd)\n    const p = !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd\n      : pCmd\n\n    for (let j = 0; j < pathExt.length; j ++) {\n      const cur = p + pathExt[j]\n      try {\n        const is = isexe.sync(cur, { pathExt: pathExtExe })\n        if (is) {\n          if (opt.all)\n            found.push(cur)\n          else\n            return cur\n        }\n      } catch (ex) {}\n    }\n  }\n\n  if (opt.all && found.length)\n    return found\n\n  if (opt.nothrow)\n    return null\n\n  throw getNotFoundError(cmd)\n}\n\nmodule.exports = which\nwhich.sync = whichSync\n"]},"metadata":{},"sourceType":"script"}