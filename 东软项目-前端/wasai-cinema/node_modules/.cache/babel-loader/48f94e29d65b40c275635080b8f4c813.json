{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar code_1 = require(\"../code\");\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar error = {\n  message: function message(_ref) {\n    var schemaCode = _ref.schemaCode;\n    return (0, codegen_1.str)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must match pattern \\\"\", \"\\\"\"])), schemaCode);\n  },\n  params: function params(_ref2) {\n    var schemaCode = _ref2.schemaCode;\n    return (0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{pattern: \", \"}\"])), schemaCode);\n  }\n};\nvar def = {\n  keyword: \"pattern\",\n  type: \"string\",\n  schemaType: \"string\",\n  $data: true,\n  error: error,\n  code: function code(cxt) {\n    var data = cxt.data,\n        $data = cxt.$data,\n        schema = cxt.schema,\n        schemaCode = cxt.schemaCode,\n        it = cxt.it; // TODO regexp should be wrapped in try/catchs\n\n    var u = it.opts.unicodeRegExp ? \"u\" : \"\";\n    var regExp = $data ? (0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"(new RegExp(\", \", \", \"))\"])), schemaCode, u) : (0, code_1.usePattern)(cxt, schema);\n    cxt.fail$data((0, codegen_1._)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"!\", \".test(\", \")\"])), regExp, data));\n  }\n};\nexports.default = def;","map":{"version":3,"mappings":";;;;;;;;;;AAEA;;AACA;;AAIA,IAAMA,KAAK,GAA2B;AACpCC,SAAO,EAAE;AAAA,QAAEC,UAAF,QAAEA,UAAF;AAAA,YAAkB,gBAAlB,kGAA4CA,UAA5C;AAAA,GAD2B;AAEpCC,QAAM,EAAE;AAAA,QAAED,UAAF,SAAEA,UAAF;AAAA,YAAkB,cAAlB,wFAAgCA,UAAhC;AAAA;AAF4B,CAAtC;AAKA,IAAME,GAAG,GAA0B;AACjCC,SAAO,EAAE,SADwB;AAEjCC,MAAI,EAAE,QAF2B;AAGjCC,YAAU,EAAE,QAHqB;AAIjCC,OAAK,EAAE,IAJ0B;AAKjCR,OAAK,EAALA,KALiC;AAMjCS,MANiC,gBAM5BC,GAN4B,EAMb;AAClB,QAAOC,IAAP,GAA8CD,GAA9C,CAAOC,IAAP;AAAA,QAAaH,KAAb,GAA8CE,GAA9C,CAAaF,KAAb;AAAA,QAAoBI,MAApB,GAA8CF,GAA9C,CAAoBE,MAApB;AAAA,QAA4BV,UAA5B,GAA8CQ,GAA9C,CAA4BR,UAA5B;AAAA,QAAwCW,EAAxC,GAA8CH,GAA9C,CAAwCG,EAAxC,CADkB,CAElB;;AACA,QAAMC,CAAC,GAAGD,EAAE,CAACE,IAAH,CAAQC,aAAR,GAAwB,GAAxB,GAA8B,EAAxC;AACA,QAAMC,MAAM,GAAGT,KAAK,IAAG,cAAH,iGAAmBN,UAAnB,EAAkCY,CAAlC,IAA0C,uBAAWJ,GAAX,EAAgBE,MAAhB,CAA9D;AACAF,OAAG,CAACQ,SAAJ,EAAc,cAAd,yFAAmBD,MAAnB,EAAkCN,IAAlC;AACD;AAZgC,CAAnC;AAeAQ,kBAAef,GAAf","names":["error","message","schemaCode","params","def","keyword","type","schemaType","$data","code","cxt","data","schema","it","u","opts","unicodeRegExp","regExp","fail$data","exports"],"sourceRoot":"","sources":["../../../lib/vocabularies/validation/pattern.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}