{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nrequire(\"core-js/modules/es.symbol.js\");\n\nrequire(\"core-js/modules/es.symbol.description.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nvar kDone = Symbol('kDone');\nvar kRun = Symbol('kRun');\n/**\n * A very simple job queue with adjustable concurrency. Adapted from\n * https://github.com/STRML/async-limiter\n */\n\nvar Limiter = /*#__PURE__*/function () {\n  /**\n   * Creates a new `Limiter`.\n   *\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\n   *     to run concurrently\n   */\n  function Limiter(concurrency) {\n    var _this = this;\n\n    _classCallCheck(this, Limiter);\n\n    this[kDone] = function () {\n      _this.pending--;\n\n      _this[kRun]();\n    };\n\n    this.concurrency = concurrency || Infinity;\n    this.jobs = [];\n    this.pending = 0;\n  }\n  /**\n   * Adds a job to the queue.\n   *\n   * @param {Function} job The job to run\n   * @public\n   */\n\n\n  _createClass(Limiter, [{\n    key: \"add\",\n    value: function add(job) {\n      this.jobs.push(job);\n      this[kRun]();\n    }\n    /**\n     * Removes a job from the queue and runs it if possible.\n     *\n     * @private\n     */\n\n  }, {\n    key: kRun,\n    value: function value() {\n      if (this.pending === this.concurrency) return;\n\n      if (this.jobs.length) {\n        var job = this.jobs.shift();\n        this.pending++;\n        job(this[kDone]);\n      }\n    }\n  }]);\n\n  return Limiter;\n}();\n\nmodule.exports = Limiter;","map":{"version":3,"sources":["E:/DW/wasai-cinema/node_modules/webpack-dev-server/node_modules/ws/lib/limiter.js"],"names":["kDone","Symbol","kRun","Limiter","concurrency","pending","Infinity","jobs","job","push","length","shift","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,MAAM,CAAC,OAAD,CAApB;AACA,IAAMC,IAAI,GAAGD,MAAM,CAAC,MAAD,CAAnB;AAEA;AACA;AACA;AACA;;IACME,O;AACJ;AACF;AACA;AACA;AACA;AACA;AACE,mBAAYC,WAAZ,EAAyB;AAAA;;AAAA;;AACvB,SAAKJ,KAAL,IAAc,YAAM;AAClB,MAAA,KAAI,CAACK,OAAL;;AACA,MAAA,KAAI,CAACH,IAAD,CAAJ;AACD,KAHD;;AAIA,SAAKE,WAAL,GAAmBA,WAAW,IAAIE,QAAlC;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKF,OAAL,GAAe,CAAf;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;;WACE,aAAIG,GAAJ,EAAS;AACP,WAAKD,IAAL,CAAUE,IAAV,CAAeD,GAAf;AACA,WAAKN,IAAL;AACD;AAED;AACF;AACA;AACA;AACA;;;SACGA,I;WAAD,iBAAS;AACP,UAAI,KAAKG,OAAL,KAAiB,KAAKD,WAA1B,EAAuC;;AAEvC,UAAI,KAAKG,IAAL,CAAUG,MAAd,EAAsB;AACpB,YAAMF,GAAG,GAAG,KAAKD,IAAL,CAAUI,KAAV,EAAZ;AAEA,aAAKN,OAAL;AACAG,QAAAA,GAAG,CAAC,KAAKR,KAAL,CAAD,CAAH;AACD;AACF;;;;;;AAGHY,MAAM,CAACC,OAAP,GAAiBV,OAAjB","sourcesContent":["'use strict';\n\nconst kDone = Symbol('kDone');\nconst kRun = Symbol('kRun');\n\n/**\n * A very simple job queue with adjustable concurrency. Adapted from\n * https://github.com/STRML/async-limiter\n */\nclass Limiter {\n  /**\n   * Creates a new `Limiter`.\n   *\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\n   *     to run concurrently\n   */\n  constructor(concurrency) {\n    this[kDone] = () => {\n      this.pending--;\n      this[kRun]();\n    };\n    this.concurrency = concurrency || Infinity;\n    this.jobs = [];\n    this.pending = 0;\n  }\n\n  /**\n   * Adds a job to the queue.\n   *\n   * @param {Function} job The job to run\n   * @public\n   */\n  add(job) {\n    this.jobs.push(job);\n    this[kRun]();\n  }\n\n  /**\n   * Removes a job from the queue and runs it if possible.\n   *\n   * @private\n   */\n  [kRun]() {\n    if (this.pending === this.concurrency) return;\n\n    if (this.jobs.length) {\n      const job = this.jobs.shift();\n\n      this.pending++;\n      job(this[kDone]);\n    }\n  }\n}\n\nmodule.exports = Limiter;\n"]},"metadata":{},"sourceType":"script"}