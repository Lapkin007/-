{"ast":null,"code":"\"use strict\";\n/** @typedef {import(\"../index.js\").IncomingMessage} IncomingMessage */\n\n/** @typedef {import(\"../index.js\").ServerResponse} ServerResponse */\n\n/**\n * @typedef {Object} ExpectedRequest\n * @property {(name: string) => string | undefined} get\n */\n\n/**\n * @typedef {Object} ExpectedResponse\n * @property {(name: string) => string | string[] | undefined} get\n * @property {(name: string, value: number | string | string[]) => void} set\n * @property {(status: number) => void} status\n * @property {(data: any) => void} send\n */\n\n/**\n * @template {ServerResponse} Response\n * @param {Response} res\n * @returns {string[]}\n */\n\nrequire(\"core-js/modules/es.object.keys.js\");\n\nfunction getHeaderNames(res) {\n  if (typeof res.getHeaderNames !== \"function\") {\n    // @ts-ignore\n    // eslint-disable-next-line no-underscore-dangle\n    return Object.keys(res._headers || {});\n  }\n\n  return res.getHeaderNames();\n}\n/**\n * @template {IncomingMessage} Request\n * @param {Request} req\n * @param {string} name\n * @returns {string | undefined}\n */\n\n\nfunction getHeaderFromRequest(req, name) {\n  // Express API\n  if (typeof\n  /** @type {Request & ExpectedRequest} */\n  req.get === \"function\") {\n    return (\n      /** @type {Request & ExpectedRequest} */\n      req.get(name)\n    );\n  } // Node.js API\n  // @ts-ignore\n\n\n  return req.headers[name];\n}\n/**\n * @template {ServerResponse} Response\n * @param {Response} res\n * @param {string} name\n * @returns {number | string | string[] | undefined}\n */\n\n\nfunction getHeaderFromResponse(res, name) {\n  // Express API\n  if (typeof\n  /** @type {Response & ExpectedResponse} */\n  res.get === \"function\") {\n    return (\n      /** @type {Response & ExpectedResponse} */\n      res.get(name)\n    );\n  } // Node.js API\n\n\n  return res.getHeader(name);\n}\n/**\n * @template {ServerResponse} Response\n * @param {Response} res\n * @param {string} name\n * @param {number | string | string[]} value\n * @returns {void}\n */\n\n\nfunction setHeaderForResponse(res, name, value) {\n  // Express API\n  if (typeof\n  /** @type {Response & ExpectedResponse} */\n  res.set === \"function\") {\n    /** @type {Response & ExpectedResponse} */\n    res.set(name, typeof value === \"number\" ? String(value) : value);\n    return;\n  } // Node.js API\n\n\n  res.setHeader(name, value);\n}\n/**\n * @template {ServerResponse} Response\n * @param {Response} res\n * @param {number} code\n */\n\n\nfunction setStatusCode(res, code) {\n  if (typeof\n  /** @type {Response & ExpectedResponse} */\n  res.status === \"function\") {\n    /** @type {Response & ExpectedResponse} */\n    res.status(code);\n    return;\n  } // eslint-disable-next-line no-param-reassign\n\n\n  res.statusCode = code;\n}\n/**\n * @template {IncomingMessage} Request\n * @template {ServerResponse} Response\n * @param {Request} req\n * @param {Response} res\n * @param {string | Buffer | import(\"fs\").ReadStream} bufferOtStream\n * @param {number} byteLength\n */\n\n\nfunction send(req, res, bufferOtStream, byteLength) {\n  if (typeof\n  /** @type {import(\"fs\").ReadStream} */\n  bufferOtStream.pipe === \"function\") {\n    setHeaderForResponse(res, \"Content-Length\", byteLength);\n\n    if (req.method === \"HEAD\") {\n      res.end();\n      return;\n    }\n    /** @type {import(\"fs\").ReadStream} */\n\n\n    bufferOtStream.pipe(res);\n    return;\n  }\n\n  if (typeof\n  /** @type {Response & ExpectedResponse} */\n  res.send === \"function\") {\n    /** @type {Response & ExpectedResponse} */\n    res.send(bufferOtStream);\n    return;\n  } // Only Node.js API used\n\n\n  res.setHeader(\"Content-Length\", byteLength);\n\n  if (req.method === \"HEAD\") {\n    res.end();\n  } else {\n    res.end(bufferOtStream);\n  }\n}\n\nmodule.exports = {\n  getHeaderNames: getHeaderNames,\n  getHeaderFromRequest: getHeaderFromRequest,\n  getHeaderFromResponse: getHeaderFromResponse,\n  setHeaderForResponse: setHeaderForResponse,\n  setStatusCode: setStatusCode,\n  send: send\n};","map":{"version":3,"sources":["E:/DW/wasai-cinema/node_modules/webpack-dev-middleware/dist/utils/compatibleAPI.js"],"names":["getHeaderNames","res","Object","keys","_headers","getHeaderFromRequest","req","name","get","headers","getHeaderFromResponse","getHeader","setHeaderForResponse","value","set","String","setHeader","setStatusCode","code","status","statusCode","send","bufferOtStream","byteLength","pipe","method","end","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/** @typedef {import(\"../index.js\").IncomingMessage} IncomingMessage */\n\n/** @typedef {import(\"../index.js\").ServerResponse} ServerResponse */\n\n/**\n * @typedef {Object} ExpectedRequest\n * @property {(name: string) => string | undefined} get\n */\n\n/**\n * @typedef {Object} ExpectedResponse\n * @property {(name: string) => string | string[] | undefined} get\n * @property {(name: string, value: number | string | string[]) => void} set\n * @property {(status: number) => void} status\n * @property {(data: any) => void} send\n */\n\n/**\n * @template {ServerResponse} Response\n * @param {Response} res\n * @returns {string[]}\n */\nfunction getHeaderNames(res) {\n  if (typeof res.getHeaderNames !== \"function\") {\n    // @ts-ignore\n    // eslint-disable-next-line no-underscore-dangle\n    return Object.keys(res._headers || {});\n  }\n\n  return res.getHeaderNames();\n}\n/**\n * @template {IncomingMessage} Request\n * @param {Request} req\n * @param {string} name\n * @returns {string | undefined}\n */\n\n\nfunction getHeaderFromRequest(req, name) {\n  // Express API\n  if (typeof\n  /** @type {Request & ExpectedRequest} */\n  req.get === \"function\") {\n    return (\n      /** @type {Request & ExpectedRequest} */\n      req.get(name)\n    );\n  } // Node.js API\n  // @ts-ignore\n\n\n  return req.headers[name];\n}\n/**\n * @template {ServerResponse} Response\n * @param {Response} res\n * @param {string} name\n * @returns {number | string | string[] | undefined}\n */\n\n\nfunction getHeaderFromResponse(res, name) {\n  // Express API\n  if (typeof\n  /** @type {Response & ExpectedResponse} */\n  res.get === \"function\") {\n    return (\n      /** @type {Response & ExpectedResponse} */\n      res.get(name)\n    );\n  } // Node.js API\n\n\n  return res.getHeader(name);\n}\n/**\n * @template {ServerResponse} Response\n * @param {Response} res\n * @param {string} name\n * @param {number | string | string[]} value\n * @returns {void}\n */\n\n\nfunction setHeaderForResponse(res, name, value) {\n  // Express API\n  if (typeof\n  /** @type {Response & ExpectedResponse} */\n  res.set === \"function\") {\n    /** @type {Response & ExpectedResponse} */\n    res.set(name, typeof value === \"number\" ? String(value) : value);\n    return;\n  } // Node.js API\n\n\n  res.setHeader(name, value);\n}\n/**\n * @template {ServerResponse} Response\n * @param {Response} res\n * @param {number} code\n */\n\n\nfunction setStatusCode(res, code) {\n  if (typeof\n  /** @type {Response & ExpectedResponse} */\n  res.status === \"function\") {\n    /** @type {Response & ExpectedResponse} */\n    res.status(code);\n    return;\n  } // eslint-disable-next-line no-param-reassign\n\n\n  res.statusCode = code;\n}\n/**\n * @template {IncomingMessage} Request\n * @template {ServerResponse} Response\n * @param {Request} req\n * @param {Response} res\n * @param {string | Buffer | import(\"fs\").ReadStream} bufferOtStream\n * @param {number} byteLength\n */\n\n\nfunction send(req, res, bufferOtStream, byteLength) {\n  if (typeof\n  /** @type {import(\"fs\").ReadStream} */\n  bufferOtStream.pipe === \"function\") {\n    setHeaderForResponse(res, \"Content-Length\", byteLength);\n\n    if (req.method === \"HEAD\") {\n      res.end();\n      return;\n    }\n    /** @type {import(\"fs\").ReadStream} */\n\n\n    bufferOtStream.pipe(res);\n    return;\n  }\n\n  if (typeof\n  /** @type {Response & ExpectedResponse} */\n  res.send === \"function\") {\n    /** @type {Response & ExpectedResponse} */\n    res.send(bufferOtStream);\n    return;\n  } // Only Node.js API used\n\n\n  res.setHeader(\"Content-Length\", byteLength);\n\n  if (req.method === \"HEAD\") {\n    res.end();\n  } else {\n    res.end(bufferOtStream);\n  }\n}\n\nmodule.exports = {\n  getHeaderNames,\n  getHeaderFromRequest,\n  getHeaderFromResponse,\n  setHeaderForResponse,\n  setStatusCode,\n  send\n};"]},"metadata":{},"sourceType":"script"}