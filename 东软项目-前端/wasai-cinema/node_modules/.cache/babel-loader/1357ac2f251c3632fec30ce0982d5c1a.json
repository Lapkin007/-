{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _toConsumableArray = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _slicedToArray = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _asyncToGenerator = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nrequire(\"regenerator-runtime/runtime.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.regexp.test.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.string.iterator.js\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\n\nrequire(\"core-js/modules/es.array.map.js\");\n\nrequire(\"core-js/modules/es.array.filter.js\");\n\nrequire(\"core-js/modules/es.object.keys.js\");\n\nrequire(\"core-js/modules/es.map.js\");\n\nrequire(\"core-js/modules/es.array.sort.js\");\n\nrequire(\"core-js/modules/es.array.from.js\");\n\nrequire(\"core-js/modules/es.array.concat.js\");\n\nrequire(\"core-js/modules/es.array.join.js\");\n\nrequire(\"core-js/modules/es.set.js\");\n\nrequire(\"core-js/modules/es.string.split.js\");\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.regexp.to-string.js\");\n\nrequire(\"core-js/modules/es.string.starts-with.js\");\n\nrequire(\"core-js/modules/es.string.replace.js\");\n\nrequire(\"core-js/modules/es.array.slice.js\");\n\nrequire(\"core-js/modules/es.number.constructor.js\");\n\nvar path = require(\"path\");\n\nvar os = require(\"os\");\n\nvar _require = require(\"source-map\"),\n    SourceMapConsumer = _require.SourceMapConsumer;\n\nvar _require2 = require(\"schema-utils\"),\n    validate = _require2.validate;\n\nvar serialize = require(\"serialize-javascript\");\n\nvar _require3 = require(\"jest-worker\"),\n    Worker = _require3.Worker;\n\nvar _require4 = require(\"./utils\"),\n    throttleAll = _require4.throttleAll,\n    terserMinify = _require4.terserMinify,\n    uglifyJsMinify = _require4.uglifyJsMinify,\n    swcMinify = _require4.swcMinify,\n    esbuildMinify = _require4.esbuildMinify;\n\nvar schema = require(\"./options.json\");\n\nvar _require5 = require(\"./minify\"),\n    minify = _require5.minify;\n/** @typedef {import(\"schema-utils/declarations/validate\").Schema} Schema */\n\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n\n/** @typedef {import(\"webpack\").Compilation} Compilation */\n\n/** @typedef {import(\"webpack\").WebpackError} WebpackError */\n\n/** @typedef {import(\"webpack\").Asset} Asset */\n\n/** @typedef {import(\"./utils.js\").TerserECMA} TerserECMA */\n\n/** @typedef {import(\"./utils.js\").TerserOptions} TerserOptions */\n\n/** @typedef {import(\"jest-worker\").Worker} JestWorker */\n\n/** @typedef {import(\"source-map\").RawSourceMap} RawSourceMap */\n\n/** @typedef {RegExp | string} Rule */\n\n/** @typedef {Rule[] | Rule} Rules */\n\n/**\n * @callback ExtractCommentsFunction\n * @param {any} astNode\n * @param {{ value: string, type: 'comment1' | 'comment2' | 'comment3' | 'comment4', pos: number, line: number, col: number }} comment\n * @returns {boolean}\n */\n\n/**\n * @typedef {boolean | 'all' | 'some' | RegExp | ExtractCommentsFunction} ExtractCommentsCondition\n */\n\n/**\n * @typedef {string | ((fileData: any) => string)} ExtractCommentsFilename\n */\n\n/**\n * @typedef {boolean | string | ((commentsFile: string) => string)} ExtractCommentsBanner\n */\n\n/**\n * @typedef {Object} ExtractCommentsObject\n * @property {ExtractCommentsCondition} [condition]\n * @property {ExtractCommentsFilename} [filename]\n * @property {ExtractCommentsBanner} [banner]\n */\n\n/**\n * @typedef {ExtractCommentsCondition | ExtractCommentsObject} ExtractCommentsOptions\n */\n\n/**\n * @typedef {Object} MinimizedResult\n * @property {string} code\n * @property {RawSourceMap} [map]\n * @property {Array<Error | string>} [errors]\n * @property {Array<Error | string>} [warnings]\n * @property {Array<string>} [extractedComments]\n */\n\n/**\n * @typedef {{ [file: string]: string }} Input\n */\n\n/**\n * @typedef {{ [key: string]: any }} CustomOptions\n */\n\n/**\n * @template T\n * @typedef {T extends infer U ? U : CustomOptions} InferDefaultType\n */\n\n/**\n * @typedef {Object} PredefinedOptions\n * @property {boolean} [module]\n * @property {TerserECMA} [ecma]\n */\n\n/**\n * @template T\n * @typedef {PredefinedOptions & InferDefaultType<T>} MinimizerOptions\n */\n\n/**\n * @template T\n * @callback BasicMinimizerImplementation\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {MinimizerOptions<T>} minifyOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @returns {Promise<MinimizedResult>}\n */\n\n/**\n * @typedef {object} MinimizeFunctionHelpers\n * @property {() => string | undefined} [getMinimizerVersion]\n */\n\n/**\n * @template T\n * @typedef {BasicMinimizerImplementation<T> & MinimizeFunctionHelpers} MinimizerImplementation\n */\n\n/**\n * @template T\n * @typedef {Object} InternalOptions\n * @property {string} name\n * @property {string} input\n * @property {RawSourceMap | undefined} inputSourceMap\n * @property {ExtractCommentsOptions | undefined} extractComments\n * @property {{ implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> }} minimizer\n */\n\n/**\n * @template T\n * @typedef {JestWorker & { transform: (options: string) => MinimizedResult, minify: (options: InternalOptions<T>) => MinimizedResult }} MinimizerWorker\n */\n\n/**\n * @typedef {undefined | boolean | number} Parallel\n */\n\n/**\n * @typedef {Object} BasePluginOptions\n * @property {Rules} [test]\n * @property {Rules} [include]\n * @property {Rules} [exclude]\n * @property {ExtractCommentsOptions} [extractComments]\n * @property {Parallel} [parallel]\n */\n\n/**\n * @template T\n * @typedef {T extends TerserOptions ? { minify?: MinimizerImplementation<T> | undefined, terserOptions?: MinimizerOptions<T> | undefined } : { minify: MinimizerImplementation<T>, terserOptions?: MinimizerOptions<T> | undefined }} DefinedDefaultMinimizerAndOptions\n */\n\n/**\n * @template T\n * @typedef {BasePluginOptions & { minimizer: { implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> } }} InternalPluginOptions\n */\n\n/**\n * @template [T=TerserOptions]\n */\n\n\nvar TerserPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {BasePluginOptions & DefinedDefaultMinimizerAndOptions<T>} [options]\n   */\n  function TerserPlugin(options) {\n    _classCallCheck(this, TerserPlugin);\n\n    validate(\n    /** @type {Schema} */\n    schema, options || {}, {\n      name: \"Terser Plugin\",\n      baseDataPath: \"options\"\n    }); // TODO make `minimizer` option instead `minify` and `terserOptions` in the next major release, also rename `terserMinify` to `terserMinimize`\n\n    var _ref = options || {},\n        _ref$minify = _ref.minify,\n        minify = _ref$minify === void 0 ?\n    /** @type {MinimizerImplementation<T>} */\n    terserMinify : _ref$minify,\n        _ref$terserOptions = _ref.terserOptions,\n        terserOptions = _ref$terserOptions === void 0 ?\n    /** @type {MinimizerOptions<T>} */\n    {} : _ref$terserOptions,\n        _ref$test = _ref.test,\n        test = _ref$test === void 0 ? /\\.[cm]?js(\\?.*)?$/i : _ref$test,\n        _ref$extractComments = _ref.extractComments,\n        extractComments = _ref$extractComments === void 0 ? true : _ref$extractComments,\n        _ref$parallel = _ref.parallel,\n        parallel = _ref$parallel === void 0 ? true : _ref$parallel,\n        include = _ref.include,\n        exclude = _ref.exclude;\n    /**\n     * @private\n     * @type {InternalPluginOptions<T>}\n     */\n\n\n    this.options = {\n      test: test,\n      extractComments: extractComments,\n      parallel: parallel,\n      include: include,\n      exclude: exclude,\n      minimizer: {\n        implementation: minify,\n        options: terserOptions\n      }\n    };\n  }\n  /**\n   * @private\n   * @param {any} input\n   * @returns {boolean}\n   */\n\n\n  _createClass(TerserPlugin, [{\n    key: \"optimize\",\n    value:\n    /**\n     * @private\n     * @param {Compiler} compiler\n     * @param {Compilation} compilation\n     * @param {Record<string, import(\"webpack\").sources.Source>} assets\n     * @param {{availableNumberOfCores: number}} optimizeOptions\n     * @returns {Promise<void>}\n     */\n    function () {\n      var _optimize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(compiler, compilation, assets, optimizeOptions) {\n        var _this = this;\n\n        var cache, numberOfAssets, assetsForMinify, getWorker, initializedWorker, numberOfWorkers, _compiler$webpack$sou, SourceMapSource, ConcatSource, RawSource, allExtractedComments, scheduledTasks, _iterator, _step, _loop, limit;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                cache = compilation.getCache(\"TerserWebpackPlugin\");\n                numberOfAssets = 0;\n                _context4.next = 4;\n                return Promise.all(Object.keys(assets).filter(function (name) {\n                  var _compilation$getAsset =\n                  /** @type {Asset} */\n                  compilation.getAsset(name),\n                      info = _compilation$getAsset.info;\n\n                  if ( // Skip double minimize assets from child compilation\n                  info.minimized || // Skip minimizing for extracted comments assets\n                  info.extractedComments) {\n                    return false;\n                  }\n\n                  if (!compiler.webpack.ModuleFilenameHelpers.matchObject.bind( // eslint-disable-next-line no-undefined\n                  undefined, _this.options)(name)) {\n                    return false;\n                  }\n\n                  return true;\n                }).map( /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(name) {\n                    var _compilation$getAsset2, info, source, eTag, cacheItem, output;\n\n                    return regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _compilation$getAsset2 =\n                            /** @type {Asset} */\n                            compilation.getAsset(name), info = _compilation$getAsset2.info, source = _compilation$getAsset2.source;\n                            eTag = cache.getLazyHashedEtag(source);\n                            cacheItem = cache.getItemCache(name, eTag);\n                            _context.next = 5;\n                            return cacheItem.getPromise();\n\n                          case 5:\n                            output = _context.sent;\n\n                            if (!output) {\n                              numberOfAssets += 1;\n                            }\n\n                            return _context.abrupt(\"return\", {\n                              name: name,\n                              info: info,\n                              inputSource: source,\n                              output: output,\n                              cacheItem: cacheItem\n                            });\n\n                          case 8:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x5) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }()));\n\n              case 4:\n                assetsForMinify = _context4.sent;\n\n                if (!(assetsForMinify.length === 0)) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 7:\n                if (optimizeOptions.availableNumberOfCores > 0) {\n                  // Do not create unnecessary workers when the number of files is less than the available cores, it saves memory\n                  numberOfWorkers = Math.min(numberOfAssets, optimizeOptions.availableNumberOfCores); // eslint-disable-next-line consistent-return\n\n                  getWorker = function getWorker() {\n                    if (initializedWorker) {\n                      return initializedWorker;\n                    }\n\n                    initializedWorker =\n                    /** @type {MinimizerWorker<T>} */\n                    new Worker(require.resolve(\"./minify\"), {\n                      numWorkers: numberOfWorkers,\n                      enableWorkerThreads: true\n                    }); // https://github.com/facebook/jest/issues/8872#issuecomment-524822081\n\n                    var workerStdout = initializedWorker.getStdout();\n\n                    if (workerStdout) {\n                      workerStdout.on(\"data\", function (chunk) {\n                        return process.stdout.write(chunk);\n                      });\n                    }\n\n                    var workerStderr = initializedWorker.getStderr();\n\n                    if (workerStderr) {\n                      workerStderr.on(\"data\", function (chunk) {\n                        return process.stderr.write(chunk);\n                      });\n                    }\n\n                    return initializedWorker;\n                  };\n                }\n\n                _compiler$webpack$sou = compiler.webpack.sources, SourceMapSource = _compiler$webpack$sou.SourceMapSource, ConcatSource = _compiler$webpack$sou.ConcatSource, RawSource = _compiler$webpack$sou.RawSource;\n                /** @typedef {{ extractedCommentsSource : import(\"webpack\").sources.RawSource, commentsFilename: string }} ExtractedCommentsInfo */\n\n                /** @type {Map<string, ExtractedCommentsInfo>} */\n\n                allExtractedComments = new Map();\n                scheduledTasks = [];\n                _iterator = _createForOfIteratorHelper(assetsForMinify);\n\n                try {\n                  _loop = function _loop() {\n                    var asset = _step.value;\n                    scheduledTasks.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                      var name, inputSource, info, cacheItem, output, input, inputSourceMap, _inputSource$sourceAn, sourceFromInputSource, map, options, hasSourceMap, _hasSourceMap, shebang, firstNewlinePosition, commentsFilename, query, filename, querySplit, lastSlashIndex, basename, data, banner, extractedCommentsString, _iterator2, _step2, warning, _iterator3, _step3, error, newInfo, _output, source, extractedCommentsSource, _output2, _commentsFilename;\n\n                      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              name = asset.name, inputSource = asset.inputSource, info = asset.info, cacheItem = asset.cacheItem;\n                              output = asset.output;\n\n                              if (output) {\n                                _context3.next = 31;\n                                break;\n                              }\n\n                              /** @type {RawSourceMap | undefined} */\n                              _inputSource$sourceAn = inputSource.sourceAndMap(), sourceFromInputSource = _inputSource$sourceAn.source, map = _inputSource$sourceAn.map;\n                              input = sourceFromInputSource;\n\n                              if (map) {\n                                if (!TerserPlugin.isSourceMap(map)) {\n                                  compilation.warnings.push(\n                                  /** @type {WebpackError} */\n                                  new Error(\"\".concat(name, \" contains invalid source map\")));\n                                } else {\n                                  inputSourceMap =\n                                  /** @type {RawSourceMap} */\n                                  map;\n                                }\n                              }\n\n                              if (Buffer.isBuffer(input)) {\n                                input = input.toString();\n                              }\n                              /**\n                               * @type {InternalOptions<T>}\n                               */\n\n\n                              options = {\n                                name: name,\n                                input: input,\n                                inputSourceMap: inputSourceMap,\n                                minimizer: {\n                                  implementation: _this.options.minimizer.implementation,\n                                  // @ts-ignore https://github.com/Microsoft/TypeScript/issues/10727\n                                  options: _objectSpread({}, _this.options.minimizer.options)\n                                },\n                                extractComments: _this.options.extractComments\n                              };\n\n                              if (typeof options.minimizer.options.module === \"undefined\") {\n                                if (typeof info.javascriptModule !== \"undefined\") {\n                                  options.minimizer.options.module = info.javascriptModule;\n                                } else if (/\\.mjs(\\?.*)?$/i.test(name)) {\n                                  options.minimizer.options.module = true;\n                                } else if (/\\.cjs(\\?.*)?$/i.test(name)) {\n                                  options.minimizer.options.module = false;\n                                }\n                              }\n\n                              if (typeof options.minimizer.options.ecma === \"undefined\") {\n                                options.minimizer.options.ecma = TerserPlugin.getEcmaVersion(compiler.options.output.environment || {});\n                              }\n\n                              _context3.prev = 10;\n                              _context3.next = 13;\n                              return getWorker ? getWorker().transform(serialize(options)) : minify(options);\n\n                            case 13:\n                              output = _context3.sent;\n                              _context3.next = 21;\n                              break;\n\n                            case 16:\n                              _context3.prev = 16;\n                              _context3.t0 = _context3[\"catch\"](10);\n                              hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n                              compilation.errors.push(\n                              /** @type {WebpackError} */\n                              TerserPlugin.buildError(_context3.t0, name, hasSourceMap ? new SourceMapConsumer(\n                              /** @type {RawSourceMap} */\n                              inputSourceMap) : // eslint-disable-next-line no-undefined\n                              undefined, // eslint-disable-next-line no-undefined\n                              hasSourceMap ? compilation.requestShortener : undefined));\n                              return _context3.abrupt(\"return\");\n\n                            case 21:\n                              if (!(typeof output.code === \"undefined\")) {\n                                _context3.next = 24;\n                                break;\n                              }\n\n                              compilation.errors.push(\n                              /** @type {WebpackError} */\n                              new Error(\"\".concat(name, \" from Terser plugin\\nMinimizer doesn't return result\")));\n                              return _context3.abrupt(\"return\");\n\n                            case 24:\n                              if (output.warnings && output.warnings.length > 0) {\n                                output.warnings = output.warnings.map(\n                                /**\n                                 * @param {Error | string} item\n                                 */\n                                function (item) {\n                                  return TerserPlugin.buildWarning(item, name);\n                                });\n                              }\n\n                              if (output.errors && output.errors.length > 0) {\n                                _hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n                                output.errors = output.errors.map(\n                                /**\n                                 * @param {Error | string} item\n                                 */\n                                function (item) {\n                                  return TerserPlugin.buildError(item, name, _hasSourceMap ? new SourceMapConsumer(\n                                  /** @type {RawSourceMap} */\n                                  inputSourceMap) : // eslint-disable-next-line no-undefined\n                                  undefined, // eslint-disable-next-line no-undefined\n                                  _hasSourceMap ? compilation.requestShortener : undefined);\n                                });\n                              }\n\n                              if (\n                              /** @type {ExtractCommentsObject} */\n                              _this.options.extractComments.banner !== false && output.extractedComments && output.extractedComments.length > 0 && output.code.startsWith(\"#!\")) {\n                                firstNewlinePosition = output.code.indexOf(\"\\n\");\n                                shebang = output.code.substring(0, firstNewlinePosition);\n                                output.code = output.code.substring(firstNewlinePosition + 1);\n                              }\n\n                              if (output.map) {\n                                output.source = new SourceMapSource(output.code, name, output.map, input,\n                                /** @type {RawSourceMap} */\n                                inputSourceMap, true);\n                              } else {\n                                output.source = new RawSource(output.code);\n                              }\n\n                              if (output.extractedComments && output.extractedComments.length > 0) {\n                                commentsFilename =\n                                /** @type {ExtractCommentsObject} */\n                                _this.options.extractComments.filename || \"[file].LICENSE.txt[query]\";\n                                query = \"\";\n                                filename = name;\n                                querySplit = filename.indexOf(\"?\");\n\n                                if (querySplit >= 0) {\n                                  query = filename.substr(querySplit);\n                                  filename = filename.substr(0, querySplit);\n                                }\n\n                                lastSlashIndex = filename.lastIndexOf(\"/\");\n                                basename = lastSlashIndex === -1 ? filename : filename.substr(lastSlashIndex + 1);\n                                data = {\n                                  filename: filename,\n                                  basename: basename,\n                                  query: query\n                                };\n                                output.commentsFilename = compilation.getPath(commentsFilename, data);\n\n                                // Add a banner to the original file\n                                if (\n                                /** @type {ExtractCommentsObject} */\n                                _this.options.extractComments.banner !== false) {\n                                  banner =\n                                  /** @type {ExtractCommentsObject} */\n                                  _this.options.extractComments.banner || \"For license information please see \".concat(path.relative(path.dirname(name), output.commentsFilename).replace(/\\\\/g, \"/\"));\n\n                                  if (typeof banner === \"function\") {\n                                    banner = banner(output.commentsFilename);\n                                  }\n\n                                  if (banner) {\n                                    output.source = new ConcatSource(shebang ? \"\".concat(shebang, \"\\n\") : \"\", \"/*! \".concat(banner, \" */\\n\"), output.source);\n                                  }\n                                }\n\n                                extractedCommentsString = output.extractedComments.sort().join(\"\\n\\n\");\n                                output.extractedCommentsSource = new RawSource(\"\".concat(extractedCommentsString, \"\\n\"));\n                              }\n\n                              _context3.next = 31;\n                              return cacheItem.storePromise({\n                                source: output.source,\n                                errors: output.errors,\n                                warnings: output.warnings,\n                                commentsFilename: output.commentsFilename,\n                                extractedCommentsSource: output.extractedCommentsSource\n                              });\n\n                            case 31:\n                              if (output.warnings && output.warnings.length > 0) {\n                                _iterator2 = _createForOfIteratorHelper(output.warnings);\n\n                                try {\n                                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                                    warning = _step2.value;\n                                    compilation.warnings.push(\n                                    /** @type {WebpackError} */\n                                    warning);\n                                  }\n                                } catch (err) {\n                                  _iterator2.e(err);\n                                } finally {\n                                  _iterator2.f();\n                                }\n                              }\n\n                              if (output.errors && output.errors.length > 0) {\n                                _iterator3 = _createForOfIteratorHelper(output.errors);\n\n                                try {\n                                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                                    error = _step3.value;\n                                    compilation.errors.push(\n                                    /** @type {WebpackError} */\n                                    error);\n                                  }\n                                } catch (err) {\n                                  _iterator3.e(err);\n                                } finally {\n                                  _iterator3.f();\n                                }\n                              }\n                              /** @type {Record<string, any>} */\n\n\n                              newInfo = {\n                                minimized: true\n                              };\n                              _output = output, source = _output.source, extractedCommentsSource = _output.extractedCommentsSource; // Write extracted comments to commentsFilename\n\n                              if (extractedCommentsSource) {\n                                _output2 = output, _commentsFilename = _output2.commentsFilename;\n                                newInfo.related = {\n                                  license: _commentsFilename\n                                };\n                                allExtractedComments.set(name, {\n                                  extractedCommentsSource: extractedCommentsSource,\n                                  commentsFilename: _commentsFilename\n                                });\n                              }\n\n                              compilation.updateAsset(name, source, newInfo);\n\n                            case 37:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }, _callee3, null, [[10, 16]]);\n                    })));\n                  };\n\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    _loop();\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                limit = getWorker && numberOfAssets > 0 ?\n                /** @type {number} */\n                numberOfWorkers : scheduledTasks.length;\n                _context4.next = 16;\n                return throttleAll(limit, scheduledTasks);\n\n              case 16:\n                if (!initializedWorker) {\n                  _context4.next = 19;\n                  break;\n                }\n\n                _context4.next = 19;\n                return initializedWorker.end();\n\n              case 19:\n                _context4.next = 21;\n                return Array.from(allExtractedComments).sort().reduce(\n                /*#__PURE__*/\n\n                /**\n                 * @param {Promise<unknown>} previousPromise\n                 * @param {[string, ExtractedCommentsInfo]} extractedComments\n                 * @returns {Promise<ExtractedCommentsInfoWIthFrom>}\n                 */\n                function () {\n                  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(previousPromise, _ref3) {\n                    var _ref5, from, value, previous, commentsFilename, extractedCommentsSource, previousFrom, prevSource, mergedName, name, eTag, source, existingAsset;\n\n                    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _ref5 = _slicedToArray(_ref3, 2), from = _ref5[0], value = _ref5[1];\n                            _context2.next = 3;\n                            return previousPromise;\n\n                          case 3:\n                            previous = _context2.sent;\n                            commentsFilename = value.commentsFilename, extractedCommentsSource = value.extractedCommentsSource;\n\n                            if (!(previous && previous.commentsFilename === commentsFilename)) {\n                              _context2.next = 19;\n                              break;\n                            }\n\n                            previousFrom = previous.from, prevSource = previous.source;\n                            mergedName = \"\".concat(previousFrom, \"|\").concat(from);\n                            name = \"\".concat(commentsFilename, \"|\").concat(mergedName);\n                            eTag = [prevSource, extractedCommentsSource].map(function (item) {\n                              return cache.getLazyHashedEtag(item);\n                            }).reduce(function (previousValue, currentValue) {\n                              return cache.mergeEtags(previousValue, currentValue);\n                            });\n                            _context2.next = 12;\n                            return cache.getPromise(name, eTag);\n\n                          case 12:\n                            source = _context2.sent;\n\n                            if (source) {\n                              _context2.next = 17;\n                              break;\n                            }\n\n                            source = new ConcatSource(Array.from(new Set([].concat(_toConsumableArray(\n                            /** @type {string}*/\n                            prevSource.source().split(\"\\n\\n\")), _toConsumableArray(\n                            /** @type {string}*/\n                            extractedCommentsSource.source().split(\"\\n\\n\"))))).join(\"\\n\\n\"));\n                            _context2.next = 17;\n                            return cache.storePromise(name, eTag, source);\n\n                          case 17:\n                            compilation.updateAsset(commentsFilename, source);\n                            return _context2.abrupt(\"return\", {\n                              source: source,\n                              commentsFilename: commentsFilename,\n                              from: mergedName\n                            });\n\n                          case 19:\n                            existingAsset = compilation.getAsset(commentsFilename);\n\n                            if (!existingAsset) {\n                              _context2.next = 22;\n                              break;\n                            }\n\n                            return _context2.abrupt(\"return\", {\n                              source: existingAsset.source,\n                              commentsFilename: commentsFilename,\n                              from: commentsFilename\n                            });\n\n                          case 22:\n                            compilation.emitAsset(commentsFilename, extractedCommentsSource, {\n                              extractedComments: true\n                            });\n                            return _context2.abrupt(\"return\", {\n                              source: extractedCommentsSource,\n                              commentsFilename: commentsFilename,\n                              from: from\n                            });\n\n                          case 24:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n\n                  return function (_x6, _x7) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }(),\n                /** @type {Promise<unknown>} */\n                Promise.resolve());\n\n              case 21:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function optimize(_x, _x2, _x3, _x4) {\n        return _optimize.apply(this, arguments);\n      }\n\n      return optimize;\n    }()\n    /**\n     * @private\n     * @param {any} environment\n     * @returns {TerserECMA}\n     */\n\n  }, {\n    key: \"apply\",\n    value:\n    /**\n     * @param {Compiler} compiler\n     * @returns {void}\n     */\n    function apply(compiler) {\n      var _this2 = this;\n\n      var pluginName = this.constructor.name;\n      var availableNumberOfCores = TerserPlugin.getAvailableNumberOfCores(this.options.parallel);\n      compiler.hooks.compilation.tap(pluginName, function (compilation) {\n        var hooks = compiler.webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);\n        var data = serialize({\n          minimizer: typeof _this2.options.minimizer.implementation.getMinimizerVersion !== \"undefined\" ? _this2.options.minimizer.implementation.getMinimizerVersion() || \"0.0.0\" : \"0.0.0\",\n          options: _this2.options.minimizer.options\n        });\n        hooks.chunkHash.tap(pluginName, function (chunk, hash) {\n          hash.update(\"TerserPlugin\");\n          hash.update(data);\n        });\n        compilation.hooks.processAssets.tapPromise({\n          name: pluginName,\n          stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n          additionalAssets: true\n        }, function (assets) {\n          return _this2.optimize(compiler, compilation, assets, {\n            availableNumberOfCores: availableNumberOfCores\n          });\n        });\n        compilation.hooks.statsPrinter.tap(pluginName, function (stats) {\n          stats.hooks.print.for(\"asset.info.minimized\").tap(\"terser-webpack-plugin\", function (minimized, _ref7) {\n            var green = _ref7.green,\n                formatFlag = _ref7.formatFlag;\n            return minimized ?\n            /** @type {Function} */\n            green(\n            /** @type {Function} */\n            formatFlag(\"minimized\")) : \"\";\n          });\n        });\n      });\n    }\n  }], [{\n    key: \"isSourceMap\",\n    value: function isSourceMap(input) {\n      // All required options for `new SourceMapConsumer(...options)`\n      // https://github.com/mozilla/source-map#new-sourcemapconsumerrawsourcemap\n      return Boolean(input && input.version && input.sources && Array.isArray(input.sources) && typeof input.mappings === \"string\");\n    }\n    /**\n     * @private\n     * @param {unknown} warning\n     * @param {string} file\n     * @returns {Error}\n     */\n\n  }, {\n    key: \"buildWarning\",\n    value: function buildWarning(warning, file) {\n      /**\n       * @type {Error & { hideStack: true, file: string }}\n       */\n      // @ts-ignore\n      var builtWarning = new Error(warning.toString());\n      builtWarning.name = \"Warning\";\n      builtWarning.hideStack = true;\n      builtWarning.file = file;\n      return builtWarning;\n    }\n    /**\n     * @private\n     * @param {any} error\n     * @param {string} file\n     * @param {SourceMapConsumer} [sourceMap]\n     * @param {Compilation[\"requestShortener\"]} [requestShortener]\n     * @returns {Error}\n     */\n\n  }, {\n    key: \"buildError\",\n    value: function buildError(error, file, sourceMap, requestShortener) {\n      /**\n       * @type {Error & { file?: string }}\n       */\n      var builtError;\n\n      if (typeof error === \"string\") {\n        builtError = new Error(\"\".concat(file, \" from Terser plugin\\n\").concat(error));\n        builtError.file = file;\n        return builtError;\n      }\n\n      if (error.line) {\n        var original = sourceMap && sourceMap.originalPositionFor({\n          line: error.line,\n          column: error.col\n        });\n\n        if (original && original.source && requestShortener) {\n          builtError = new Error(\"\".concat(file, \" from Terser plugin\\n\").concat(error.message, \" [\").concat(requestShortener.shorten(original.source), \":\").concat(original.line, \",\").concat(original.column, \"][\").concat(file, \":\").concat(error.line, \",\").concat(error.col, \"]\").concat(error.stack ? \"\\n\".concat(error.stack.split(\"\\n\").slice(1).join(\"\\n\")) : \"\"));\n          builtError.file = file;\n          return builtError;\n        }\n\n        builtError = new Error(\"\".concat(file, \" from Terser plugin\\n\").concat(error.message, \" [\").concat(file, \":\").concat(error.line, \",\").concat(error.col, \"]\").concat(error.stack ? \"\\n\".concat(error.stack.split(\"\\n\").slice(1).join(\"\\n\")) : \"\"));\n        builtError.file = file;\n        return builtError;\n      }\n\n      if (error.stack) {\n        builtError = new Error(\"\".concat(file, \" from Terser plugin\\n\").concat(typeof error.message !== \"undefined\" ? error.message : \"\", \"\\n\").concat(error.stack));\n        builtError.file = file;\n        return builtError;\n      }\n\n      builtError = new Error(\"\".concat(file, \" from Terser plugin\\n\").concat(error.message));\n      builtError.file = file;\n      return builtError;\n    }\n    /**\n     * @private\n     * @param {Parallel} parallel\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getAvailableNumberOfCores\",\n    value: function getAvailableNumberOfCores(parallel) {\n      // In some cases cpus() returns undefined\n      // https://github.com/nodejs/node/issues/19022\n      var cpus = os.cpus() || {\n        length: 1\n      };\n      return parallel === true ? cpus.length - 1 : Math.min(Number(parallel) || 0, cpus.length - 1);\n    }\n  }, {\n    key: \"getEcmaVersion\",\n    value: function getEcmaVersion(environment) {\n      // ES 6th\n      if (environment.arrowFunction || environment.const || environment.destructuring || environment.forOf || environment.module) {\n        return 2015;\n      } // ES 11th\n\n\n      if (environment.bigIntLiteral || environment.dynamicImport) {\n        return 2020;\n      }\n\n      return 5;\n    }\n  }]);\n\n  return TerserPlugin;\n}();\n\nTerserPlugin.terserMinify = terserMinify;\nTerserPlugin.uglifyJsMinify = uglifyJsMinify;\nTerserPlugin.swcMinify = swcMinify;\nTerserPlugin.esbuildMinify = esbuildMinify;\nmodule.exports = TerserPlugin;","map":{"version":3,"sources":["E:/DW/wasai-cinema/node_modules/terser-webpack-plugin/dist/index.js"],"names":["path","require","os","SourceMapConsumer","validate","serialize","Worker","throttleAll","terserMinify","uglifyJsMinify","swcMinify","esbuildMinify","schema","minify","TerserPlugin","options","name","baseDataPath","terserOptions","test","extractComments","parallel","include","exclude","minimizer","implementation","compiler","compilation","assets","optimizeOptions","cache","getCache","numberOfAssets","Promise","all","Object","keys","filter","getAsset","info","minimized","extractedComments","webpack","ModuleFilenameHelpers","matchObject","bind","undefined","map","source","eTag","getLazyHashedEtag","cacheItem","getItemCache","getPromise","output","inputSource","assetsForMinify","length","availableNumberOfCores","numberOfWorkers","Math","min","getWorker","initializedWorker","resolve","numWorkers","enableWorkerThreads","workerStdout","getStdout","on","chunk","process","stdout","write","workerStderr","getStderr","stderr","sources","SourceMapSource","ConcatSource","RawSource","allExtractedComments","Map","scheduledTasks","asset","push","sourceAndMap","sourceFromInputSource","input","isSourceMap","warnings","Error","inputSourceMap","Buffer","isBuffer","toString","module","javascriptModule","ecma","getEcmaVersion","environment","transform","hasSourceMap","errors","buildError","requestShortener","code","item","buildWarning","banner","startsWith","firstNewlinePosition","indexOf","shebang","substring","commentsFilename","filename","query","querySplit","substr","lastSlashIndex","lastIndexOf","basename","data","getPath","relative","dirname","replace","extractedCommentsString","sort","join","extractedCommentsSource","storePromise","warning","error","newInfo","related","license","set","updateAsset","limit","end","Array","from","reduce","previousPromise","value","previous","previousFrom","prevSource","mergedName","previousValue","currentValue","mergeEtags","Set","split","existingAsset","emitAsset","pluginName","constructor","getAvailableNumberOfCores","hooks","tap","javascript","JavascriptModulesPlugin","getCompilationHooks","getMinimizerVersion","chunkHash","hash","update","processAssets","tapPromise","stage","Compilation","PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE","additionalAssets","optimize","statsPrinter","stats","print","for","green","formatFlag","Boolean","version","isArray","mappings","file","builtWarning","hideStack","sourceMap","builtError","line","original","originalPositionFor","column","col","message","shorten","stack","slice","cpus","Number","arrowFunction","const","destructuring","forOf","bigIntLiteral","dynamicImport","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst path = require(\"path\");\n\nconst os = require(\"os\");\n\nconst {\n  SourceMapConsumer\n} = require(\"source-map\");\n\nconst {\n  validate\n} = require(\"schema-utils\");\n\nconst serialize = require(\"serialize-javascript\");\n\nconst {\n  Worker\n} = require(\"jest-worker\");\n\nconst {\n  throttleAll,\n  terserMinify,\n  uglifyJsMinify,\n  swcMinify,\n  esbuildMinify\n} = require(\"./utils\");\n\nconst schema = require(\"./options.json\");\n\nconst {\n  minify\n} = require(\"./minify\");\n/** @typedef {import(\"schema-utils/declarations/validate\").Schema} Schema */\n\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n\n/** @typedef {import(\"webpack\").Compilation} Compilation */\n\n/** @typedef {import(\"webpack\").WebpackError} WebpackError */\n\n/** @typedef {import(\"webpack\").Asset} Asset */\n\n/** @typedef {import(\"./utils.js\").TerserECMA} TerserECMA */\n\n/** @typedef {import(\"./utils.js\").TerserOptions} TerserOptions */\n\n/** @typedef {import(\"jest-worker\").Worker} JestWorker */\n\n/** @typedef {import(\"source-map\").RawSourceMap} RawSourceMap */\n\n/** @typedef {RegExp | string} Rule */\n\n/** @typedef {Rule[] | Rule} Rules */\n\n/**\n * @callback ExtractCommentsFunction\n * @param {any} astNode\n * @param {{ value: string, type: 'comment1' | 'comment2' | 'comment3' | 'comment4', pos: number, line: number, col: number }} comment\n * @returns {boolean}\n */\n\n/**\n * @typedef {boolean | 'all' | 'some' | RegExp | ExtractCommentsFunction} ExtractCommentsCondition\n */\n\n/**\n * @typedef {string | ((fileData: any) => string)} ExtractCommentsFilename\n */\n\n/**\n * @typedef {boolean | string | ((commentsFile: string) => string)} ExtractCommentsBanner\n */\n\n/**\n * @typedef {Object} ExtractCommentsObject\n * @property {ExtractCommentsCondition} [condition]\n * @property {ExtractCommentsFilename} [filename]\n * @property {ExtractCommentsBanner} [banner]\n */\n\n/**\n * @typedef {ExtractCommentsCondition | ExtractCommentsObject} ExtractCommentsOptions\n */\n\n/**\n * @typedef {Object} MinimizedResult\n * @property {string} code\n * @property {RawSourceMap} [map]\n * @property {Array<Error | string>} [errors]\n * @property {Array<Error | string>} [warnings]\n * @property {Array<string>} [extractedComments]\n */\n\n/**\n * @typedef {{ [file: string]: string }} Input\n */\n\n/**\n * @typedef {{ [key: string]: any }} CustomOptions\n */\n\n/**\n * @template T\n * @typedef {T extends infer U ? U : CustomOptions} InferDefaultType\n */\n\n/**\n * @typedef {Object} PredefinedOptions\n * @property {boolean} [module]\n * @property {TerserECMA} [ecma]\n */\n\n/**\n * @template T\n * @typedef {PredefinedOptions & InferDefaultType<T>} MinimizerOptions\n */\n\n/**\n * @template T\n * @callback BasicMinimizerImplementation\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {MinimizerOptions<T>} minifyOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @returns {Promise<MinimizedResult>}\n */\n\n/**\n * @typedef {object} MinimizeFunctionHelpers\n * @property {() => string | undefined} [getMinimizerVersion]\n */\n\n/**\n * @template T\n * @typedef {BasicMinimizerImplementation<T> & MinimizeFunctionHelpers} MinimizerImplementation\n */\n\n/**\n * @template T\n * @typedef {Object} InternalOptions\n * @property {string} name\n * @property {string} input\n * @property {RawSourceMap | undefined} inputSourceMap\n * @property {ExtractCommentsOptions | undefined} extractComments\n * @property {{ implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> }} minimizer\n */\n\n/**\n * @template T\n * @typedef {JestWorker & { transform: (options: string) => MinimizedResult, minify: (options: InternalOptions<T>) => MinimizedResult }} MinimizerWorker\n */\n\n/**\n * @typedef {undefined | boolean | number} Parallel\n */\n\n/**\n * @typedef {Object} BasePluginOptions\n * @property {Rules} [test]\n * @property {Rules} [include]\n * @property {Rules} [exclude]\n * @property {ExtractCommentsOptions} [extractComments]\n * @property {Parallel} [parallel]\n */\n\n/**\n * @template T\n * @typedef {T extends TerserOptions ? { minify?: MinimizerImplementation<T> | undefined, terserOptions?: MinimizerOptions<T> | undefined } : { minify: MinimizerImplementation<T>, terserOptions?: MinimizerOptions<T> | undefined }} DefinedDefaultMinimizerAndOptions\n */\n\n/**\n * @template T\n * @typedef {BasePluginOptions & { minimizer: { implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> } }} InternalPluginOptions\n */\n\n/**\n * @template [T=TerserOptions]\n */\n\n\nclass TerserPlugin {\n  /**\n   * @param {BasePluginOptions & DefinedDefaultMinimizerAndOptions<T>} [options]\n   */\n  constructor(options) {\n    validate(\n    /** @type {Schema} */\n    schema, options || {}, {\n      name: \"Terser Plugin\",\n      baseDataPath: \"options\"\n    }); // TODO make `minimizer` option instead `minify` and `terserOptions` in the next major release, also rename `terserMinify` to `terserMinimize`\n\n    const {\n      minify =\n      /** @type {MinimizerImplementation<T>} */\n      terserMinify,\n      terserOptions =\n      /** @type {MinimizerOptions<T>} */\n      {},\n      test = /\\.[cm]?js(\\?.*)?$/i,\n      extractComments = true,\n      parallel = true,\n      include,\n      exclude\n    } = options || {};\n    /**\n     * @private\n     * @type {InternalPluginOptions<T>}\n     */\n\n    this.options = {\n      test,\n      extractComments,\n      parallel,\n      include,\n      exclude,\n      minimizer: {\n        implementation: minify,\n        options: terserOptions\n      }\n    };\n  }\n  /**\n   * @private\n   * @param {any} input\n   * @returns {boolean}\n   */\n\n\n  static isSourceMap(input) {\n    // All required options for `new SourceMapConsumer(...options)`\n    // https://github.com/mozilla/source-map#new-sourcemapconsumerrawsourcemap\n    return Boolean(input && input.version && input.sources && Array.isArray(input.sources) && typeof input.mappings === \"string\");\n  }\n  /**\n   * @private\n   * @param {unknown} warning\n   * @param {string} file\n   * @returns {Error}\n   */\n\n\n  static buildWarning(warning, file) {\n    /**\n     * @type {Error & { hideStack: true, file: string }}\n     */\n    // @ts-ignore\n    const builtWarning = new Error(warning.toString());\n    builtWarning.name = \"Warning\";\n    builtWarning.hideStack = true;\n    builtWarning.file = file;\n    return builtWarning;\n  }\n  /**\n   * @private\n   * @param {any} error\n   * @param {string} file\n   * @param {SourceMapConsumer} [sourceMap]\n   * @param {Compilation[\"requestShortener\"]} [requestShortener]\n   * @returns {Error}\n   */\n\n\n  static buildError(error, file, sourceMap, requestShortener) {\n    /**\n     * @type {Error & { file?: string }}\n     */\n    let builtError;\n\n    if (typeof error === \"string\") {\n      builtError = new Error(`${file} from Terser plugin\\n${error}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    if (error.line) {\n      const original = sourceMap && sourceMap.originalPositionFor({\n        line: error.line,\n        column: error.col\n      });\n\n      if (original && original.source && requestShortener) {\n        builtError = new Error(`${file} from Terser plugin\\n${error.message} [${requestShortener.shorten(original.source)}:${original.line},${original.column}][${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n        builtError.file = file;\n        return builtError;\n      }\n\n      builtError = new Error(`${file} from Terser plugin\\n${error.message} [${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    if (error.stack) {\n      builtError = new Error(`${file} from Terser plugin\\n${typeof error.message !== \"undefined\" ? error.message : \"\"}\\n${error.stack}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    builtError = new Error(`${file} from Terser plugin\\n${error.message}`);\n    builtError.file = file;\n    return builtError;\n  }\n  /**\n   * @private\n   * @param {Parallel} parallel\n   * @returns {number}\n   */\n\n\n  static getAvailableNumberOfCores(parallel) {\n    // In some cases cpus() returns undefined\n    // https://github.com/nodejs/node/issues/19022\n    const cpus = os.cpus() || {\n      length: 1\n    };\n    return parallel === true ? cpus.length - 1 : Math.min(Number(parallel) || 0, cpus.length - 1);\n  }\n  /**\n   * @private\n   * @param {Compiler} compiler\n   * @param {Compilation} compilation\n   * @param {Record<string, import(\"webpack\").sources.Source>} assets\n   * @param {{availableNumberOfCores: number}} optimizeOptions\n   * @returns {Promise<void>}\n   */\n\n\n  async optimize(compiler, compilation, assets, optimizeOptions) {\n    const cache = compilation.getCache(\"TerserWebpackPlugin\");\n    let numberOfAssets = 0;\n    const assetsForMinify = await Promise.all(Object.keys(assets).filter(name => {\n      const {\n        info\n      } =\n      /** @type {Asset} */\n      compilation.getAsset(name);\n\n      if ( // Skip double minimize assets from child compilation\n      info.minimized || // Skip minimizing for extracted comments assets\n      info.extractedComments) {\n        return false;\n      }\n\n      if (!compiler.webpack.ModuleFilenameHelpers.matchObject.bind( // eslint-disable-next-line no-undefined\n      undefined, this.options)(name)) {\n        return false;\n      }\n\n      return true;\n    }).map(async name => {\n      const {\n        info,\n        source\n      } =\n      /** @type {Asset} */\n      compilation.getAsset(name);\n      const eTag = cache.getLazyHashedEtag(source);\n      const cacheItem = cache.getItemCache(name, eTag);\n      const output = await cacheItem.getPromise();\n\n      if (!output) {\n        numberOfAssets += 1;\n      }\n\n      return {\n        name,\n        info,\n        inputSource: source,\n        output,\n        cacheItem\n      };\n    }));\n\n    if (assetsForMinify.length === 0) {\n      return;\n    }\n    /** @type {undefined | (() => MinimizerWorker<T>)} */\n\n\n    let getWorker;\n    /** @type {undefined | MinimizerWorker<T>} */\n\n    let initializedWorker;\n    /** @type {undefined | number} */\n\n    let numberOfWorkers;\n\n    if (optimizeOptions.availableNumberOfCores > 0) {\n      // Do not create unnecessary workers when the number of files is less than the available cores, it saves memory\n      numberOfWorkers = Math.min(numberOfAssets, optimizeOptions.availableNumberOfCores); // eslint-disable-next-line consistent-return\n\n      getWorker = () => {\n        if (initializedWorker) {\n          return initializedWorker;\n        }\n\n        initializedWorker =\n        /** @type {MinimizerWorker<T>} */\n        new Worker(require.resolve(\"./minify\"), {\n          numWorkers: numberOfWorkers,\n          enableWorkerThreads: true\n        }); // https://github.com/facebook/jest/issues/8872#issuecomment-524822081\n\n        const workerStdout = initializedWorker.getStdout();\n\n        if (workerStdout) {\n          workerStdout.on(\"data\", chunk => process.stdout.write(chunk));\n        }\n\n        const workerStderr = initializedWorker.getStderr();\n\n        if (workerStderr) {\n          workerStderr.on(\"data\", chunk => process.stderr.write(chunk));\n        }\n\n        return initializedWorker;\n      };\n    }\n\n    const {\n      SourceMapSource,\n      ConcatSource,\n      RawSource\n    } = compiler.webpack.sources;\n    /** @typedef {{ extractedCommentsSource : import(\"webpack\").sources.RawSource, commentsFilename: string }} ExtractedCommentsInfo */\n\n    /** @type {Map<string, ExtractedCommentsInfo>} */\n\n    const allExtractedComments = new Map();\n    const scheduledTasks = [];\n\n    for (const asset of assetsForMinify) {\n      scheduledTasks.push(async () => {\n        const {\n          name,\n          inputSource,\n          info,\n          cacheItem\n        } = asset;\n        let {\n          output\n        } = asset;\n\n        if (!output) {\n          let input;\n          /** @type {RawSourceMap | undefined} */\n\n          let inputSourceMap;\n          const {\n            source: sourceFromInputSource,\n            map\n          } = inputSource.sourceAndMap();\n          input = sourceFromInputSource;\n\n          if (map) {\n            if (!TerserPlugin.isSourceMap(map)) {\n              compilation.warnings.push(\n              /** @type {WebpackError} */\n              new Error(`${name} contains invalid source map`));\n            } else {\n              inputSourceMap =\n              /** @type {RawSourceMap} */\n              map;\n            }\n          }\n\n          if (Buffer.isBuffer(input)) {\n            input = input.toString();\n          }\n          /**\n           * @type {InternalOptions<T>}\n           */\n\n\n          const options = {\n            name,\n            input,\n            inputSourceMap,\n            minimizer: {\n              implementation: this.options.minimizer.implementation,\n              // @ts-ignore https://github.com/Microsoft/TypeScript/issues/10727\n              options: { ...this.options.minimizer.options\n              }\n            },\n            extractComments: this.options.extractComments\n          };\n\n          if (typeof options.minimizer.options.module === \"undefined\") {\n            if (typeof info.javascriptModule !== \"undefined\") {\n              options.minimizer.options.module = info.javascriptModule;\n            } else if (/\\.mjs(\\?.*)?$/i.test(name)) {\n              options.minimizer.options.module = true;\n            } else if (/\\.cjs(\\?.*)?$/i.test(name)) {\n              options.minimizer.options.module = false;\n            }\n          }\n\n          if (typeof options.minimizer.options.ecma === \"undefined\") {\n            options.minimizer.options.ecma = TerserPlugin.getEcmaVersion(compiler.options.output.environment || {});\n          }\n\n          try {\n            output = await (getWorker ? getWorker().transform(serialize(options)) : minify(options));\n          } catch (error) {\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n            compilation.errors.push(\n            /** @type {WebpackError} */\n            TerserPlugin.buildError(error, name, hasSourceMap ? new SourceMapConsumer(\n            /** @type {RawSourceMap} */\n            inputSourceMap) : // eslint-disable-next-line no-undefined\n            undefined, // eslint-disable-next-line no-undefined\n            hasSourceMap ? compilation.requestShortener : undefined));\n            return;\n          }\n\n          if (typeof output.code === \"undefined\") {\n            compilation.errors.push(\n            /** @type {WebpackError} */\n            new Error(`${name} from Terser plugin\\nMinimizer doesn't return result`));\n            return;\n          }\n\n          if (output.warnings && output.warnings.length > 0) {\n            output.warnings = output.warnings.map(\n            /**\n             * @param {Error | string} item\n             */\n            item => TerserPlugin.buildWarning(item, name));\n          }\n\n          if (output.errors && output.errors.length > 0) {\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n            output.errors = output.errors.map(\n            /**\n             * @param {Error | string} item\n             */\n            item => TerserPlugin.buildError(item, name, hasSourceMap ? new SourceMapConsumer(\n            /** @type {RawSourceMap} */\n            inputSourceMap) : // eslint-disable-next-line no-undefined\n            undefined, // eslint-disable-next-line no-undefined\n            hasSourceMap ? compilation.requestShortener : undefined));\n          }\n\n          let shebang;\n\n          if (\n          /** @type {ExtractCommentsObject} */\n          this.options.extractComments.banner !== false && output.extractedComments && output.extractedComments.length > 0 && output.code.startsWith(\"#!\")) {\n            const firstNewlinePosition = output.code.indexOf(\"\\n\");\n            shebang = output.code.substring(0, firstNewlinePosition);\n            output.code = output.code.substring(firstNewlinePosition + 1);\n          }\n\n          if (output.map) {\n            output.source = new SourceMapSource(output.code, name, output.map, input,\n            /** @type {RawSourceMap} */\n            inputSourceMap, true);\n          } else {\n            output.source = new RawSource(output.code);\n          }\n\n          if (output.extractedComments && output.extractedComments.length > 0) {\n            const commentsFilename =\n            /** @type {ExtractCommentsObject} */\n            this.options.extractComments.filename || \"[file].LICENSE.txt[query]\";\n            let query = \"\";\n            let filename = name;\n            const querySplit = filename.indexOf(\"?\");\n\n            if (querySplit >= 0) {\n              query = filename.substr(querySplit);\n              filename = filename.substr(0, querySplit);\n            }\n\n            const lastSlashIndex = filename.lastIndexOf(\"/\");\n            const basename = lastSlashIndex === -1 ? filename : filename.substr(lastSlashIndex + 1);\n            const data = {\n              filename,\n              basename,\n              query\n            };\n            output.commentsFilename = compilation.getPath(commentsFilename, data);\n            let banner; // Add a banner to the original file\n\n            if (\n            /** @type {ExtractCommentsObject} */\n            this.options.extractComments.banner !== false) {\n              banner =\n              /** @type {ExtractCommentsObject} */\n              this.options.extractComments.banner || `For license information please see ${path.relative(path.dirname(name), output.commentsFilename).replace(/\\\\/g, \"/\")}`;\n\n              if (typeof banner === \"function\") {\n                banner = banner(output.commentsFilename);\n              }\n\n              if (banner) {\n                output.source = new ConcatSource(shebang ? `${shebang}\\n` : \"\", `/*! ${banner} */\\n`, output.source);\n              }\n            }\n\n            const extractedCommentsString = output.extractedComments.sort().join(\"\\n\\n\");\n            output.extractedCommentsSource = new RawSource(`${extractedCommentsString}\\n`);\n          }\n\n          await cacheItem.storePromise({\n            source: output.source,\n            errors: output.errors,\n            warnings: output.warnings,\n            commentsFilename: output.commentsFilename,\n            extractedCommentsSource: output.extractedCommentsSource\n          });\n        }\n\n        if (output.warnings && output.warnings.length > 0) {\n          for (const warning of output.warnings) {\n            compilation.warnings.push(\n            /** @type {WebpackError} */\n            warning);\n          }\n        }\n\n        if (output.errors && output.errors.length > 0) {\n          for (const error of output.errors) {\n            compilation.errors.push(\n            /** @type {WebpackError} */\n            error);\n          }\n        }\n        /** @type {Record<string, any>} */\n\n\n        const newInfo = {\n          minimized: true\n        };\n        const {\n          source,\n          extractedCommentsSource\n        } = output; // Write extracted comments to commentsFilename\n\n        if (extractedCommentsSource) {\n          const {\n            commentsFilename\n          } = output;\n          newInfo.related = {\n            license: commentsFilename\n          };\n          allExtractedComments.set(name, {\n            extractedCommentsSource,\n            commentsFilename\n          });\n        }\n\n        compilation.updateAsset(name, source, newInfo);\n      });\n    }\n\n    const limit = getWorker && numberOfAssets > 0 ?\n    /** @type {number} */\n    numberOfWorkers : scheduledTasks.length;\n    await throttleAll(limit, scheduledTasks);\n\n    if (initializedWorker) {\n      await initializedWorker.end();\n    }\n    /** @typedef {{ source: import(\"webpack\").sources.Source, commentsFilename: string, from: string }} ExtractedCommentsInfoWIthFrom */\n\n\n    await Array.from(allExtractedComments).sort().reduce(\n    /**\n     * @param {Promise<unknown>} previousPromise\n     * @param {[string, ExtractedCommentsInfo]} extractedComments\n     * @returns {Promise<ExtractedCommentsInfoWIthFrom>}\n     */\n    async (previousPromise, [from, value]) => {\n      const previous =\n      /** @type {ExtractedCommentsInfoWIthFrom | undefined} **/\n      await previousPromise;\n      const {\n        commentsFilename,\n        extractedCommentsSource\n      } = value;\n\n      if (previous && previous.commentsFilename === commentsFilename) {\n        const {\n          from: previousFrom,\n          source: prevSource\n        } = previous;\n        const mergedName = `${previousFrom}|${from}`;\n        const name = `${commentsFilename}|${mergedName}`;\n        const eTag = [prevSource, extractedCommentsSource].map(item => cache.getLazyHashedEtag(item)).reduce((previousValue, currentValue) => cache.mergeEtags(previousValue, currentValue));\n        let source = await cache.getPromise(name, eTag);\n\n        if (!source) {\n          source = new ConcatSource(Array.from(new Set([...\n          /** @type {string}*/\n          prevSource.source().split(\"\\n\\n\"), ...\n          /** @type {string}*/\n          extractedCommentsSource.source().split(\"\\n\\n\")])).join(\"\\n\\n\"));\n          await cache.storePromise(name, eTag, source);\n        }\n\n        compilation.updateAsset(commentsFilename, source);\n        return {\n          source,\n          commentsFilename,\n          from: mergedName\n        };\n      }\n\n      const existingAsset = compilation.getAsset(commentsFilename);\n\n      if (existingAsset) {\n        return {\n          source: existingAsset.source,\n          commentsFilename,\n          from: commentsFilename\n        };\n      }\n\n      compilation.emitAsset(commentsFilename, extractedCommentsSource, {\n        extractedComments: true\n      });\n      return {\n        source: extractedCommentsSource,\n        commentsFilename,\n        from\n      };\n    },\n    /** @type {Promise<unknown>} */\n    Promise.resolve());\n  }\n  /**\n   * @private\n   * @param {any} environment\n   * @returns {TerserECMA}\n   */\n\n\n  static getEcmaVersion(environment) {\n    // ES 6th\n    if (environment.arrowFunction || environment.const || environment.destructuring || environment.forOf || environment.module) {\n      return 2015;\n    } // ES 11th\n\n\n    if (environment.bigIntLiteral || environment.dynamicImport) {\n      return 2020;\n    }\n\n    return 5;\n  }\n  /**\n   * @param {Compiler} compiler\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const pluginName = this.constructor.name;\n    const availableNumberOfCores = TerserPlugin.getAvailableNumberOfCores(this.options.parallel);\n    compiler.hooks.compilation.tap(pluginName, compilation => {\n      const hooks = compiler.webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);\n      const data = serialize({\n        minimizer: typeof this.options.minimizer.implementation.getMinimizerVersion !== \"undefined\" ? this.options.minimizer.implementation.getMinimizerVersion() || \"0.0.0\" : \"0.0.0\",\n        options: this.options.minimizer.options\n      });\n      hooks.chunkHash.tap(pluginName, (chunk, hash) => {\n        hash.update(\"TerserPlugin\");\n        hash.update(data);\n      });\n      compilation.hooks.processAssets.tapPromise({\n        name: pluginName,\n        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n        additionalAssets: true\n      }, assets => this.optimize(compiler, compilation, assets, {\n        availableNumberOfCores\n      }));\n      compilation.hooks.statsPrinter.tap(pluginName, stats => {\n        stats.hooks.print.for(\"asset.info.minimized\").tap(\"terser-webpack-plugin\", (minimized, {\n          green,\n          formatFlag\n        }) => minimized ?\n        /** @type {Function} */\n        green(\n        /** @type {Function} */\n        formatFlag(\"minimized\")) : \"\");\n      });\n    });\n  }\n\n}\n\nTerserPlugin.terserMinify = terserMinify;\nTerserPlugin.uglifyJsMinify = uglifyJsMinify;\nTerserPlugin.swcMinify = swcMinify;\nTerserPlugin.esbuildMinify = esbuildMinify;\nmodule.exports = TerserPlugin;"]},"metadata":{},"sourceType":"script"}