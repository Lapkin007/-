{"ast":null,"code":"\"use strict\";\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n\n/** @typedef {import(\"webpack\").Stats} Stats */\n\n/** @typedef {import(\"webpack\").MultiStats} MultiStats */\n\n/** @typedef {import(\"../index.js\").IncomingMessage} IncomingMessage */\n\n/** @typedef {import(\"../index.js\").ServerResponse} ServerResponse */\n\n/**\n * @template {IncomingMessage} Request\n * @template {ServerResponse} Response\n * @param {import(\"../index.js\").Context<Request, Response>} context\n */\n\nvar _createForOfIteratorHelper = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nfunction getPaths(context) {\n  var stats = context.stats,\n      options = context.options;\n  /** @type {Stats[]} */\n\n  var childStats =\n  /** @type {MultiStats} */\n  stats.stats ?\n  /** @type {MultiStats} */\n  stats.stats : [\n  /** @type {Stats} */\n  stats];\n  var publicPaths = [];\n\n  var _iterator = _createForOfIteratorHelper(childStats),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var compilation = _step.value.compilation;\n      // The `output.path` is always present and always absolute\n      var outputPath = compilation.getPath(compilation.outputOptions.path || \"\");\n      var publicPath = options.publicPath ? compilation.getPath(options.publicPath) : compilation.outputOptions.publicPath ? compilation.getPath(compilation.outputOptions.publicPath) : \"\";\n      publicPaths.push({\n        outputPath: outputPath,\n        publicPath: publicPath\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return publicPaths;\n}\n\nmodule.exports = getPaths;","map":{"version":3,"sources":["E:/DW/wasai-cinema/node_modules/webpack-dev-middleware/dist/utils/getPaths.js"],"names":["getPaths","context","stats","options","childStats","publicPaths","compilation","outputPath","getPath","outputOptions","path","publicPath","push","module","exports"],"mappings":"AAAA;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;;AACA,SAASA,QAAT,CAAkBC,OAAlB,EAA2B;AACzB,MACEC,KADF,GAGID,OAHJ,CACEC,KADF;AAAA,MAEEC,OAFF,GAGIF,OAHJ,CAEEE,OAFF;AAIA;;AAEA,MAAMC,UAAU;AAChB;AACAF,EAAAA,KAAK,CAACA,KAAN;AACA;AACAA,EAAAA,KAAK,CAACA,KAFN,GAEc;AACd;AACAA,EAAAA,KAFc,CAJd;AAOA,MAAMG,WAAW,GAAG,EAApB;;AAdyB,6CAkBpBD,UAlBoB;AAAA;;AAAA;AAgBzB,wDAEiB;AAAA,UADfE,WACe,eADfA,WACe;AACf;AACA,UAAMC,UAAU,GAAGD,WAAW,CAACE,OAAZ,CAAoBF,WAAW,CAACG,aAAZ,CAA0BC,IAA1B,IAAkC,EAAtD,CAAnB;AACA,UAAMC,UAAU,GAAGR,OAAO,CAACQ,UAAR,GAAqBL,WAAW,CAACE,OAAZ,CAAoBL,OAAO,CAACQ,UAA5B,CAArB,GAA+DL,WAAW,CAACG,aAAZ,CAA0BE,UAA1B,GAAuCL,WAAW,CAACE,OAAZ,CAAoBF,WAAW,CAACG,aAAZ,CAA0BE,UAA9C,CAAvC,GAAmG,EAArL;AACAN,MAAAA,WAAW,CAACO,IAAZ,CAAiB;AACfL,QAAAA,UAAU,EAAVA,UADe;AAEfI,QAAAA,UAAU,EAAVA;AAFe,OAAjB;AAID;AA1BwB;AAAA;AAAA;AAAA;AAAA;;AA4BzB,SAAON,WAAP;AACD;;AAEDQ,MAAM,CAACC,OAAP,GAAiBd,QAAjB","sourcesContent":["\"use strict\";\n\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n\n/** @typedef {import(\"webpack\").Stats} Stats */\n\n/** @typedef {import(\"webpack\").MultiStats} MultiStats */\n\n/** @typedef {import(\"../index.js\").IncomingMessage} IncomingMessage */\n\n/** @typedef {import(\"../index.js\").ServerResponse} ServerResponse */\n\n/**\n * @template {IncomingMessage} Request\n * @template {ServerResponse} Response\n * @param {import(\"../index.js\").Context<Request, Response>} context\n */\nfunction getPaths(context) {\n  const {\n    stats,\n    options\n  } = context;\n  /** @type {Stats[]} */\n\n  const childStats =\n  /** @type {MultiStats} */\n  stats.stats ?\n  /** @type {MultiStats} */\n  stats.stats : [\n  /** @type {Stats} */\n  stats];\n  const publicPaths = [];\n\n  for (const {\n    compilation\n  } of childStats) {\n    // The `output.path` is always present and always absolute\n    const outputPath = compilation.getPath(compilation.outputOptions.path || \"\");\n    const publicPath = options.publicPath ? compilation.getPath(options.publicPath) : compilation.outputOptions.publicPath ? compilation.getPath(compilation.outputOptions.publicPath) : \"\";\n    publicPaths.push({\n      outputPath,\n      publicPath\n    });\n  }\n\n  return publicPaths;\n}\n\nmodule.exports = getPaths;"]},"metadata":{},"sourceType":"script"}