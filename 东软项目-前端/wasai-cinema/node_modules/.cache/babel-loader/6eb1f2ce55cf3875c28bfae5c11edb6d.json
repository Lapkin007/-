{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.set.js\");\n\nrequire(\"core-js/modules/es.string.iterator.js\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nvar _require = require(\"os\"),\n    platform = _require.platform,\n    type = _require.type;\n\nvar supportedPlatforms = new Set([\"aix\", \"android\", \"darwin\", \"freebsd\", \"linux\", \"openbsd\", \"sunos\", \"win32\"]);\nvar plat = platform();\n\nif (supportedPlatforms.has(plat)) {\n  var file = plat;\n\n  if (plat === \"aix\") {\n    file = type() === \"OS400\" ? \"ibmi\" : \"sunos\"; // AIX `netstat` output is compatible with Solaris\n  }\n\n  var m = require(\"./\".concat(file, \".js\"));\n\n  module.exports.v4 = function () {\n    return m.v4();\n  };\n\n  module.exports.v6 = function () {\n    return m.v6();\n  };\n\n  module.exports.v4.sync = function () {\n    return m.v4.sync();\n  };\n\n  module.exports.v6.sync = function () {\n    return m.v6.sync();\n  };\n} else {\n  var err = new Error(\"Unsupported Platform: \".concat(plat));\n\n  module.exports.v4 = function () {\n    return Promise.reject(err);\n  };\n\n  module.exports.v6 = function () {\n    return Promise.reject(err);\n  };\n\n  module.exports.v4.sync = function () {\n    throw err;\n  };\n\n  module.exports.v6.sync = function () {\n    throw err;\n  };\n}","map":{"version":3,"sources":["E:/DW/wasai-cinema/node_modules/default-gateway/index.js"],"names":["require","platform","type","supportedPlatforms","Set","plat","has","file","m","module","exports","v4","v6","sync","err","Error","Promise","reject"],"mappings":"AAAA;;;;;;;;;;;;AAEA,eAAyBA,OAAO,CAAC,IAAD,CAAhC;AAAA,IAAOC,QAAP,YAAOA,QAAP;AAAA,IAAiBC,IAAjB,YAAiBA,IAAjB;;AAEA,IAAMC,kBAAkB,GAAG,IAAIC,GAAJ,CAAQ,CACjC,KADiC,EAEjC,SAFiC,EAGjC,QAHiC,EAIjC,SAJiC,EAKjC,OALiC,EAMjC,SANiC,EAOjC,OAPiC,EAQjC,OARiC,CAAR,CAA3B;AAWA,IAAMC,IAAI,GAAGJ,QAAQ,EAArB;;AAEA,IAAIE,kBAAkB,CAACG,GAAnB,CAAuBD,IAAvB,CAAJ,EAAkC;AAChC,MAAIE,IAAI,GAAGF,IAAX;;AACA,MAAIA,IAAI,KAAK,KAAb,EAAoB;AAClBE,IAAAA,IAAI,GAAGL,IAAI,OAAO,OAAX,GAAqB,MAArB,GAA8B,OAArC,CADkB,CAC4B;AAC/C;;AAED,MAAMM,CAAC,GAAGR,OAAO,aAAMO,IAAN,SAAjB;;AACAE,EAAAA,MAAM,CAACC,OAAP,CAAeC,EAAf,GAAoB;AAAA,WAAMH,CAAC,CAACG,EAAF,EAAN;AAAA,GAApB;;AACAF,EAAAA,MAAM,CAACC,OAAP,CAAeE,EAAf,GAAoB;AAAA,WAAMJ,CAAC,CAACI,EAAF,EAAN;AAAA,GAApB;;AACAH,EAAAA,MAAM,CAACC,OAAP,CAAeC,EAAf,CAAkBE,IAAlB,GAAyB;AAAA,WAAML,CAAC,CAACG,EAAF,CAAKE,IAAL,EAAN;AAAA,GAAzB;;AACAJ,EAAAA,MAAM,CAACC,OAAP,CAAeE,EAAf,CAAkBC,IAAlB,GAAyB;AAAA,WAAML,CAAC,CAACI,EAAF,CAAKC,IAAL,EAAN;AAAA,GAAzB;AACD,CAXD,MAWO;AACL,MAAMC,GAAG,GAAG,IAAIC,KAAJ,iCAAmCV,IAAnC,EAAZ;;AACAI,EAAAA,MAAM,CAACC,OAAP,CAAeC,EAAf,GAAoB;AAAA,WAAMK,OAAO,CAACC,MAAR,CAAeH,GAAf,CAAN;AAAA,GAApB;;AACAL,EAAAA,MAAM,CAACC,OAAP,CAAeE,EAAf,GAAoB;AAAA,WAAMI,OAAO,CAACC,MAAR,CAAeH,GAAf,CAAN;AAAA,GAApB;;AACAL,EAAAA,MAAM,CAACC,OAAP,CAAeC,EAAf,CAAkBE,IAAlB,GAAyB,YAAM;AAAE,UAAMC,GAAN;AAAY,GAA7C;;AACAL,EAAAA,MAAM,CAACC,OAAP,CAAeE,EAAf,CAAkBC,IAAlB,GAAyB,YAAM;AAAE,UAAMC,GAAN;AAAY,GAA7C;AACD","sourcesContent":["\"use strict\";\n\nconst {platform, type} = require(\"os\");\n\nconst supportedPlatforms = new Set([\n  \"aix\",\n  \"android\",\n  \"darwin\",\n  \"freebsd\",\n  \"linux\",\n  \"openbsd\",\n  \"sunos\",\n  \"win32\"\n]);\n\nconst plat = platform();\n\nif (supportedPlatforms.has(plat)) {\n  let file = plat;\n  if (plat === \"aix\") {\n    file = type() === \"OS400\" ? \"ibmi\" : \"sunos\"; // AIX `netstat` output is compatible with Solaris\n  }\n\n  const m = require(`./${file}.js`);\n  module.exports.v4 = () => m.v4();\n  module.exports.v6 = () => m.v6();\n  module.exports.v4.sync = () => m.v4.sync();\n  module.exports.v6.sync = () => m.v6.sync();\n} else {\n  const err = new Error(`Unsupported Platform: ${plat}`);\n  module.exports.v4 = () => Promise.reject(err);\n  module.exports.v6 = () => Promise.reject(err);\n  module.exports.v4.sync = () => { throw err; };\n  module.exports.v6.sync = () => { throw err; };\n}\n"]},"metadata":{},"sourceType":"script"}