{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\n\nvar _templateObject, _templateObject2, _templateObject3;\n\nrequire(\"core-js/modules/es.object.keys.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar ops = codegen_1.operators;\nvar KWDs = {\n  maximum: {\n    okStr: \"<=\",\n    ok: ops.LTE,\n    fail: ops.GT\n  },\n  minimum: {\n    okStr: \">=\",\n    ok: ops.GTE,\n    fail: ops.LT\n  },\n  exclusiveMaximum: {\n    okStr: \"<\",\n    ok: ops.LT,\n    fail: ops.GTE\n  },\n  exclusiveMinimum: {\n    okStr: \">\",\n    ok: ops.GT,\n    fail: ops.LTE\n  }\n};\nvar error = {\n  message: function message(_ref) {\n    var keyword = _ref.keyword,\n        schemaCode = _ref.schemaCode;\n    return (0, codegen_1.str)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must be \", \" \", \"\"])), KWDs[keyword].okStr, schemaCode);\n  },\n  params: function params(_ref2) {\n    var keyword = _ref2.keyword,\n        schemaCode = _ref2.schemaCode;\n    return (0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{comparison: \", \", limit: \", \"}\"])), KWDs[keyword].okStr, schemaCode);\n  }\n};\nvar def = {\n  keyword: Object.keys(KWDs),\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error: error,\n  code: function code(cxt) {\n    var keyword = cxt.keyword,\n        data = cxt.data,\n        schemaCode = cxt.schemaCode;\n    cxt.fail$data((0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \" \", \" \", \" || isNaN(\", \")\"])), data, KWDs[keyword].fail, schemaCode, data));\n  }\n};\nexports.default = def;","map":{"version":3,"mappings":";;;;;;;;;;;;AAEA;;AAEA,IAAMA,GAAG,GAAGC,mBAAZ;AAMA,IAAMC,IAAI,GAA4D;AACpEC,SAAO,EAAE;AAACC,SAAK,EAAE,IAAR;AAAcC,MAAE,EAAEL,GAAG,CAACM,GAAtB;AAA2BC,QAAI,EAAEP,GAAG,CAACQ;AAArC,GAD2D;AAEpEC,SAAO,EAAE;AAACL,SAAK,EAAE,IAAR;AAAcC,MAAE,EAAEL,GAAG,CAACU,GAAtB;AAA2BH,QAAI,EAAEP,GAAG,CAACW;AAArC,GAF2D;AAGpEC,kBAAgB,EAAE;AAACR,SAAK,EAAE,GAAR;AAAaC,MAAE,EAAEL,GAAG,CAACW,EAArB;AAAyBJ,QAAI,EAAEP,GAAG,CAACU;AAAnC,GAHkD;AAIpEG,kBAAgB,EAAE;AAACT,SAAK,EAAE,GAAR;AAAaC,MAAE,EAAEL,GAAG,CAACQ,EAArB;AAAyBD,QAAI,EAAEP,GAAG,CAACM;AAAnC;AAJkD,CAAtE;AAaA,IAAMQ,KAAK,GAA2B;AACpCC,SAAO,EAAE;AAAA,QAAEC,OAAF,QAAEA,OAAF;AAAA,QAAWC,UAAX,QAAWA,UAAX;AAAA,YAA2B,gBAA3B,wFAAyCf,IAAI,CAACc,OAAD,CAAJ,CAAqBZ,KAA9D,EAAuEa,UAAvE;AAAA,GAD2B;AAEpCC,QAAM,EAAE;AAAA,QAAEF,OAAF,SAAEA,OAAF;AAAA,QAAWC,UAAX,SAAWA,UAAX;AAAA,YACN,cADM,wGACWf,IAAI,CAACc,OAAD,CAAJ,CAAqBZ,KADhC,EACiDa,UADjD;AAAA;AAF4B,CAAtC;AAMA,IAAME,GAAG,GAA0B;AACjCH,SAAO,EAAEI,MAAM,CAACC,IAAP,CAAYnB,IAAZ,CADwB;AAEjCoB,MAAI,EAAE,QAF2B;AAGjCC,YAAU,EAAE,QAHqB;AAIjCC,OAAK,EAAE,IAJ0B;AAKjCV,OAAK,EAALA,KALiC;AAMjCW,MANiC,gBAM5BC,GAN4B,EAMb;AAClB,QAAOV,OAAP,GAAoCU,GAApC,CAAOV,OAAP;AAAA,QAAgBW,IAAhB,GAAoCD,GAApC,CAAgBC,IAAhB;AAAA,QAAsBV,UAAtB,GAAoCS,GAApC,CAAsBT,UAAtB;AACAS,OAAG,CAACE,SAAJ,EAAc,cAAd,sGAAkBD,IAAlB,EAA0BzB,IAAI,CAACc,OAAD,CAAJ,CAAqBT,IAA/C,EAAuDU,UAAvD,EAA8EU,IAA9E;AACD;AATgC,CAAnC;AAYAE,kBAAeV,GAAf","names":["ops","codegen_1","KWDs","maximum","okStr","ok","LTE","fail","GT","minimum","GTE","LT","exclusiveMaximum","exclusiveMinimum","error","message","keyword","schemaCode","params","def","Object","keys","type","schemaType","$data","code","cxt","data","fail$data","exports"],"sourceRoot":"","sources":["../../../lib/vocabularies/validation/limitNumber.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}