{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar error = {\n  message: function message(_ref) {\n    var schemaCode = _ref.schemaCode;\n    return (0, codegen_1.str)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must be multiple of \", \"\"])), schemaCode);\n  },\n  params: function params(_ref2) {\n    var schemaCode = _ref2.schemaCode;\n    return (0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{multipleOf: \", \"}\"])), schemaCode);\n  }\n};\nvar def = {\n  keyword: \"multipleOf\",\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error: error,\n  code: function code(cxt) {\n    var gen = cxt.gen,\n        data = cxt.data,\n        schemaCode = cxt.schemaCode,\n        it = cxt.it; // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)\n\n    var prec = it.opts.multipleOfPrecision;\n    var res = gen.let(\"res\");\n    var invalid = prec ? (0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"Math.abs(Math.round(\", \") - \", \") > 1e-\", \"\"])), res, res, prec) : (0, codegen_1._)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \" !== parseInt(\", \")\"])), res, res);\n    cxt.fail$data((0, codegen_1._)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"(\", \" === 0 || (\", \" = \", \"/\", \", \", \"))\"])), schemaCode, res, data, schemaCode, invalid));\n  }\n};\nexports.default = def;","map":{"version":3,"mappings":";;;;;;;;;;AAEA;;AAQA,IAAMA,KAAK,GAA2B;AACpCC,SAAO,EAAE;AAAA,QAAEC,UAAF,QAAEA,UAAF;AAAA,YAAkB,gBAAlB,+FAA4CA,UAA5C;AAAA,GAD2B;AAEpCC,QAAM,EAAE;AAAA,QAAED,UAAF,SAAEA,UAAF;AAAA,YAAkB,cAAlB,2FAAmCA,UAAnC;AAAA;AAF4B,CAAtC;AAKA,IAAME,GAAG,GAA0B;AACjCC,SAAO,EAAE,YADwB;AAEjCC,MAAI,EAAE,QAF2B;AAGjCC,YAAU,EAAE,QAHqB;AAIjCC,OAAK,EAAE,IAJ0B;AAKjCR,OAAK,EAALA,KALiC;AAMjCS,MANiC,gBAM5BC,GAN4B,EAMb;AAClB,QAAOC,GAAP,GAAoCD,GAApC,CAAOC,GAAP;AAAA,QAAYC,IAAZ,GAAoCF,GAApC,CAAYE,IAAZ;AAAA,QAAkBV,UAAlB,GAAoCQ,GAApC,CAAkBR,UAAlB;AAAA,QAA8BW,EAA9B,GAAoCH,GAApC,CAA8BG,EAA9B,CADkB,CAElB;;AACA,QAAMC,IAAI,GAAGD,EAAE,CAACE,IAAH,CAAQC,mBAArB;AACA,QAAMC,GAAG,GAAGN,GAAG,CAACO,GAAJ,CAAQ,KAAR,CAAZ;AACA,QAAMC,OAAO,GAAGL,IAAI,IAChB,cADgB,oHACQG,GADR,EACkBA,GADlB,EAC+BH,IAD/B,KAEhB,cAFgB,gGAEZG,GAFY,EAEQA,GAFR,CAApB;AAGAP,OAAG,CAACU,SAAJ,EAAc,cAAd,iHAAmBlB,UAAnB,EAA2Ce,GAA3C,EAAoDL,IAApD,EAA4DV,UAA5D,EAA2EiB,OAA3E;AACD;AAfgC,CAAnC;AAkBAE,kBAAejB,GAAf","names":["error","message","schemaCode","params","def","keyword","type","schemaType","$data","code","cxt","gen","data","it","prec","opts","multipleOfPrecision","res","let","invalid","fail$data","exports"],"sourceRoot":"","sources":["../../../lib/vocabularies/validation/multipleOf.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}