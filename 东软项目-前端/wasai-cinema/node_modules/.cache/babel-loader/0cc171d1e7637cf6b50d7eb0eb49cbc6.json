{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.map.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.replace.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeDuplicateSlashes = exports.transform = void 0;\n/**\n * Matches a sequence of two or more consecutive slashes, excluding the first two slashes at the beginning of the string.\n * The latter is due to the presence of the device path at the beginning of the UNC path.\n * @todo rewrite to negative lookbehind with the next major release.\n */\n\nvar DOUBLE_SLASH_RE = /(?!^)\\/{2,}/g;\n\nfunction transform(patterns) {\n  return patterns.map(function (pattern) {\n    return removeDuplicateSlashes(pattern);\n  });\n}\n\nexports.transform = transform;\n/**\n * This package only works with forward slashes as a path separator.\n * Because of this, we cannot use the standard `path.normalize` method, because on Windows platform it will use of backslashes.\n */\n\nfunction removeDuplicateSlashes(pattern) {\n  return pattern.replace(DOUBLE_SLASH_RE, '/');\n}\n\nexports.removeDuplicateSlashes = removeDuplicateSlashes;","map":{"version":3,"sources":["E:/DW/wasai-cinema/node_modules/fast-glob/out/managers/patterns.js"],"names":["Object","defineProperty","exports","value","removeDuplicateSlashes","transform","DOUBLE_SLASH_RE","patterns","map","pattern","replace"],"mappings":"AAAA;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,sBAAR,GAAiCF,OAAO,CAACG,SAAR,GAAoB,KAAK,CAA1D;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,eAAe,GAAG,cAAxB;;AACA,SAASD,SAAT,CAAmBE,QAAnB,EAA6B;AACzB,SAAOA,QAAQ,CAACC,GAAT,CAAa,UAACC,OAAD;AAAA,WAAaL,sBAAsB,CAACK,OAAD,CAAnC;AAAA,GAAb,CAAP;AACH;;AACDP,OAAO,CAACG,SAAR,GAAoBA,SAApB;AACA;AACA;AACA;AACA;;AACA,SAASD,sBAAT,CAAgCK,OAAhC,EAAyC;AACrC,SAAOA,OAAO,CAACC,OAAR,CAAgBJ,eAAhB,EAAiC,GAAjC,CAAP;AACH;;AACDJ,OAAO,CAACE,sBAAR,GAAiCA,sBAAjC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.removeDuplicateSlashes = exports.transform = void 0;\n/**\n * Matches a sequence of two or more consecutive slashes, excluding the first two slashes at the beginning of the string.\n * The latter is due to the presence of the device path at the beginning of the UNC path.\n * @todo rewrite to negative lookbehind with the next major release.\n */\nconst DOUBLE_SLASH_RE = /(?!^)\\/{2,}/g;\nfunction transform(patterns) {\n    return patterns.map((pattern) => removeDuplicateSlashes(pattern));\n}\nexports.transform = transform;\n/**\n * This package only works with forward slashes as a path separator.\n * Because of this, we cannot use the standard `path.normalize` method, because on Windows platform it will use of backslashes.\n */\nfunction removeDuplicateSlashes(pattern) {\n    return pattern.replace(DOUBLE_SLASH_RE, '/');\n}\nexports.removeDuplicateSlashes = removeDuplicateSlashes;\n"]},"metadata":{},"sourceType":"script"}