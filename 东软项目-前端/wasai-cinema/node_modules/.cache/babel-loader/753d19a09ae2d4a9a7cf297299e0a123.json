{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _typeof = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/typeof.js\").default;\n\nvar _toConsumableArray = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.string.iterator.js\");\n\nrequire(\"core-js/modules/es.weak-map.js\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.split.js\");\n\nrequire(\"core-js/modules/es.string.ends-with.js\");\n\nrequire(\"core-js/modules/es.array.slice.js\");\n\nrequire(\"core-js/modules/es.array.concat.js\");\n\nrequire(\"core-js/modules/es.array.from.js\");\n\nrequire(\"core-js/modules/es.array.join.js\");\n\nrequire(\"core-js/modules/es.regexp.constructor.js\");\n\nrequire(\"core-js/modules/es.regexp.dot-all.js\");\n\nrequire(\"core-js/modules/es.regexp.sticky.js\");\n\nrequire(\"core-js/modules/es.regexp.to-string.js\");\n\nrequire(\"core-js/modules/es.regexp.test.js\");\n\nrequire(\"core-js/modules/es.array.includes.js\");\n\nrequire(\"core-js/modules/es.string.includes.js\");\n\nrequire(\"core-js/modules/es.array.map.js\");\n\nrequire(\"core-js/modules/es.object.keys.js\");\n\nvar path = require(\"path\"); // Based on https://github.com/webpack/webpack/blob/master/lib/cli.js\n// Please do not modify it\n\n/** @typedef {\"unknown-argument\" | \"unexpected-non-array-in-path\" | \"unexpected-non-object-in-path\" | \"multiple-values-unexpected\" | \"invalid-value\"} ProblemType */\n\n/**\n * @typedef {Object} Problem\n * @property {ProblemType} type\n * @property {string} path\n * @property {string} argument\n * @property {any=} value\n * @property {number=} index\n * @property {string=} expected\n */\n\n/**\n * @typedef {Object} LocalProblem\n * @property {ProblemType} type\n * @property {string} path\n * @property {string=} expected\n */\n\n/**\n * @typedef {Object} ArgumentConfig\n * @property {string} description\n * @property {string} path\n * @property {boolean} multiple\n * @property {\"enum\"|\"string\"|\"path\"|\"number\"|\"boolean\"|\"RegExp\"|\"reset\"} type\n * @property {any[]=} values\n */\n\n/**\n * @typedef {Object} Argument\n * @property {string} description\n * @property {\"string\"|\"number\"|\"boolean\"} simpleType\n * @property {boolean} multiple\n * @property {ArgumentConfig[]} configs\n */\n\n\nvar cliAddedItems = new WeakMap();\n/**\n * @param {any} config configuration\n * @param {string} schemaPath path in the config\n * @param {number | undefined} index index of value when multiple values are provided, otherwise undefined\n * @returns {{ problem?: LocalProblem, object?: any, property?: string | number, value?: any }} problem or object with property and value\n */\n\nvar getObjectAndProperty = function getObjectAndProperty(config, schemaPath) {\n  var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (!schemaPath) {\n    return {\n      value: config\n    };\n  }\n\n  var parts = schemaPath.split(\".\");\n  var property = parts.pop();\n  var current = config;\n  var i = 0;\n\n  var _iterator = _createForOfIteratorHelper(parts),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var part = _step.value;\n      var isArray = part.endsWith(\"[]\");\n\n      var _name = isArray ? part.slice(0, -2) : part;\n\n      var _value2 = current[_name];\n\n      if (isArray) {\n        // eslint-disable-next-line no-undefined\n        if (_value2 === undefined) {\n          _value2 = {};\n          current[_name] = [].concat(_toConsumableArray(Array.from({\n            length: index\n          })), [_value2]);\n          cliAddedItems.set(current[_name], index + 1);\n        } else if (!Array.isArray(_value2)) {\n          return {\n            problem: {\n              type: \"unexpected-non-array-in-path\",\n              path: parts.slice(0, i).join(\".\")\n            }\n          };\n        } else {\n          var _addedItems = cliAddedItems.get(_value2) || 0;\n\n          while (_addedItems <= index) {\n            // eslint-disable-next-line no-undefined\n            _value2.push(undefined); // eslint-disable-next-line no-plusplus\n\n\n            _addedItems++;\n          }\n\n          cliAddedItems.set(_value2, _addedItems);\n\n          var _x = _value2.length - _addedItems + index; // eslint-disable-next-line no-undefined\n\n\n          if (_value2[_x] === undefined) {\n            _value2[_x] = {};\n          } else if (_value2[_x] === null || _typeof(_value2[_x]) !== \"object\") {\n            return {\n              problem: {\n                type: \"unexpected-non-object-in-path\",\n                path: parts.slice(0, i).join(\".\")\n              }\n            };\n          }\n\n          _value2 = _value2[_x];\n        } // eslint-disable-next-line no-undefined\n\n      } else if (_value2 === undefined) {\n        // eslint-disable-next-line no-multi-assign\n        _value2 = current[_name] = {};\n      } else if (_value2 === null || _typeof(_value2) !== \"object\") {\n        return {\n          problem: {\n            type: \"unexpected-non-object-in-path\",\n            path: parts.slice(0, i).join(\".\")\n          }\n        };\n      }\n\n      current = _value2; // eslint-disable-next-line no-plusplus\n\n      i++;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var value = current[\n  /** @type {string} */\n  property];\n\n  if (\n  /** @type {string} */\n  property.endsWith(\"[]\")) {\n    var name =\n    /** @type {string} */\n    property.slice(0, -2); // eslint-disable-next-line no-shadow\n\n    var _value = current[name]; // eslint-disable-next-line no-undefined\n\n    if (_value === undefined) {\n      // eslint-disable-next-line no-undefined\n      current[name] = [].concat(_toConsumableArray(Array.from({\n        length: index\n      })), [undefined]);\n      cliAddedItems.set(current[name], index + 1); // eslint-disable-next-line no-undefined\n\n      return {\n        object: current[name],\n        property: index,\n        value: undefined\n      };\n    } else if (!Array.isArray(_value)) {\n      // eslint-disable-next-line no-undefined\n      current[name] = [_value].concat(_toConsumableArray(Array.from({\n        length: index\n      })), [undefined]);\n      cliAddedItems.set(current[name], index + 1); // eslint-disable-next-line no-undefined\n\n      return {\n        object: current[name],\n        property: index + 1,\n        value: undefined\n      };\n    }\n\n    var addedItems = cliAddedItems.get(_value) || 0;\n\n    while (addedItems <= index) {\n      // eslint-disable-next-line no-undefined\n      _value.push(undefined); // eslint-disable-next-line no-plusplus\n\n\n      addedItems++;\n    }\n\n    cliAddedItems.set(_value, addedItems);\n    var x = _value.length - addedItems + index; // eslint-disable-next-line no-undefined\n\n    if (_value[x] === undefined) {\n      _value[x] = {};\n    } else if (_value[x] === null || _typeof(_value[x]) !== \"object\") {\n      return {\n        problem: {\n          type: \"unexpected-non-object-in-path\",\n          path: schemaPath\n        }\n      };\n    }\n\n    return {\n      object: _value,\n      property: x,\n      value: _value[x]\n    };\n  }\n\n  return {\n    object: current,\n    property: property,\n    value: value\n  };\n};\n/**\n * @param {ArgumentConfig} argConfig processing instructions\n * @param {any} value the value\n * @returns {any | undefined} parsed value\n */\n\n\nvar parseValueForArgumentConfig = function parseValueForArgumentConfig(argConfig, value) {\n  // eslint-disable-next-line default-case\n  switch (argConfig.type) {\n    case \"string\":\n      if (typeof value === \"string\") {\n        return value;\n      }\n\n      break;\n\n    case \"path\":\n      if (typeof value === \"string\") {\n        return path.resolve(value);\n      }\n\n      break;\n\n    case \"number\":\n      if (typeof value === \"number\") {\n        return value;\n      }\n\n      if (typeof value === \"string\" && /^[+-]?\\d*(\\.\\d*)[eE]\\d+$/) {\n        var n = +value;\n        if (!isNaN(n)) return n;\n      }\n\n      break;\n\n    case \"boolean\":\n      if (typeof value === \"boolean\") {\n        return value;\n      }\n\n      if (value === \"true\") {\n        return true;\n      }\n\n      if (value === \"false\") {\n        return false;\n      }\n\n      break;\n\n    case \"RegExp\":\n      if (value instanceof RegExp) {\n        return value;\n      }\n\n      if (typeof value === \"string\") {\n        // cspell:word yugi\n        var match = /^\\/(.*)\\/([yugi]*)$/.exec(value);\n\n        if (match && !/[^\\\\]\\//.test(match[1])) {\n          return new RegExp(match[1], match[2]);\n        }\n      }\n\n      break;\n\n    case \"enum\":\n      if (\n      /** @type {any[]} */\n      argConfig.values.includes(value)) {\n        return value;\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(\n      /** @type {any[]} */\n      argConfig.values),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          if (\"\".concat(item) === value) return item;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      break;\n\n    case \"reset\":\n      if (value === true) {\n        return [];\n      }\n\n      break;\n  }\n};\n/**\n * @param {ArgumentConfig} argConfig processing instructions\n * @returns {string | undefined} expected message\n */\n\n\nvar getExpectedValue = function getExpectedValue(argConfig) {\n  switch (argConfig.type) {\n    default:\n      return argConfig.type;\n\n    case \"boolean\":\n      return \"true | false\";\n\n    case \"RegExp\":\n      return \"regular expression (example: /ab?c*/)\";\n\n    case \"enum\":\n      return (\n        /** @type {any[]} */\n        argConfig.values.map(function (v) {\n          return \"\".concat(v);\n        }).join(\" | \")\n      );\n\n    case \"reset\":\n      return \"true (will reset the previous value to an empty array)\";\n  }\n};\n/**\n * @param {any} config configuration\n * @param {string} schemaPath path in the config\n * @param {any} value parsed value\n * @param {number | undefined} index index of value when multiple values are provided, otherwise undefined\n * @returns {LocalProblem | null} problem or null for success\n */\n\n\nvar setValue = function setValue(config, schemaPath, value, index) {\n  var _getObjectAndProperty = getObjectAndProperty(config, schemaPath, index),\n      problem = _getObjectAndProperty.problem,\n      object = _getObjectAndProperty.object,\n      property = _getObjectAndProperty.property;\n\n  if (problem) {\n    return problem;\n  }\n\n  object[\n  /** @type {string} */\n  property] = value;\n  return null;\n};\n/**\n * @param {ArgumentConfig} argConfig processing instructions\n * @param {any} config configuration\n * @param {any} value the value\n * @param {number | undefined} index the index if multiple values provided\n * @returns {LocalProblem | null} a problem if any\n */\n\n\nvar processArgumentConfig = function processArgumentConfig(argConfig, config, value, index) {\n  // eslint-disable-next-line no-undefined\n  if (index !== undefined && !argConfig.multiple) {\n    return {\n      type: \"multiple-values-unexpected\",\n      path: argConfig.path\n    };\n  }\n\n  var parsed = parseValueForArgumentConfig(argConfig, value); // eslint-disable-next-line no-undefined\n\n  if (parsed === undefined) {\n    return {\n      type: \"invalid-value\",\n      path: argConfig.path,\n      expected: getExpectedValue(argConfig)\n    };\n  }\n\n  var problem = setValue(config, argConfig.path, parsed, index);\n\n  if (problem) {\n    return problem;\n  }\n\n  return null;\n};\n/**\n * @param {Record<string, Argument>} args object of arguments\n * @param {any} config configuration\n * @param {Record<string, string | number | boolean | RegExp | (string | number | boolean | RegExp)[]>} values object with values\n * @returns {Problem[] | null} problems or null for success\n */\n\n\nvar processArguments = function processArguments(args, config, values) {\n  /**\n   * @type {Problem[]}\n   */\n  var problems = [];\n\n  var _loop = function _loop() {\n    var key = _Object$keys[_i];\n    var arg = args[key];\n\n    if (!arg) {\n      problems.push({\n        type: \"unknown-argument\",\n        path: \"\",\n        argument: key\n      }); // eslint-disable-next-line no-continue\n\n      return \"continue\";\n    }\n    /**\n     * @param {any} value\n     * @param {number | undefined} i\n     */\n\n\n    var processValue = function processValue(value, i) {\n      var currentProblems = [];\n\n      var _iterator3 = _createForOfIteratorHelper(arg.configs),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var argConfig = _step3.value;\n          var problem = processArgumentConfig(argConfig, config, value, i);\n\n          if (!problem) {\n            return;\n          }\n\n          currentProblems.push(_objectSpread(_objectSpread({}, problem), {}, {\n            argument: key,\n            value: value,\n            index: i\n          }));\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      problems.push.apply(problems, currentProblems);\n    };\n\n    var value = values[key];\n\n    if (Array.isArray(value)) {\n      for (var i = 0; i < value.length; i++) {\n        processValue(value[i], i);\n      }\n    } else {\n      // eslint-disable-next-line no-undefined\n      processValue(value, undefined);\n    }\n  };\n\n  for (var _i = 0, _Object$keys = Object.keys(values); _i < _Object$keys.length; _i++) {\n    var _ret = _loop();\n\n    if (_ret === \"continue\") continue;\n  }\n\n  if (problems.length === 0) {\n    return null;\n  }\n\n  return problems;\n};\n\nmodule.exports = processArguments;","map":{"version":3,"sources":["E:/DW/wasai-cinema/node_modules/webpack-dev-server/bin/process-arguments.js"],"names":["path","require","cliAddedItems","WeakMap","getObjectAndProperty","config","schemaPath","index","value","parts","split","property","pop","current","i","part","isArray","endsWith","name","slice","undefined","Array","from","length","set","problem","type","join","addedItems","get","push","x","object","parseValueForArgumentConfig","argConfig","resolve","n","isNaN","RegExp","match","exec","test","values","includes","item","getExpectedValue","map","v","setValue","processArgumentConfig","multiple","parsed","expected","processArguments","args","problems","key","arg","argument","processValue","currentProblems","configs","Object","keys","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst path = require(\"path\");\n\n// Based on https://github.com/webpack/webpack/blob/master/lib/cli.js\n// Please do not modify it\n\n/** @typedef {\"unknown-argument\" | \"unexpected-non-array-in-path\" | \"unexpected-non-object-in-path\" | \"multiple-values-unexpected\" | \"invalid-value\"} ProblemType */\n\n/**\n * @typedef {Object} Problem\n * @property {ProblemType} type\n * @property {string} path\n * @property {string} argument\n * @property {any=} value\n * @property {number=} index\n * @property {string=} expected\n */\n\n/**\n * @typedef {Object} LocalProblem\n * @property {ProblemType} type\n * @property {string} path\n * @property {string=} expected\n */\n\n/**\n * @typedef {Object} ArgumentConfig\n * @property {string} description\n * @property {string} path\n * @property {boolean} multiple\n * @property {\"enum\"|\"string\"|\"path\"|\"number\"|\"boolean\"|\"RegExp\"|\"reset\"} type\n * @property {any[]=} values\n */\n\n/**\n * @typedef {Object} Argument\n * @property {string} description\n * @property {\"string\"|\"number\"|\"boolean\"} simpleType\n * @property {boolean} multiple\n * @property {ArgumentConfig[]} configs\n */\n\nconst cliAddedItems = new WeakMap();\n\n/**\n * @param {any} config configuration\n * @param {string} schemaPath path in the config\n * @param {number | undefined} index index of value when multiple values are provided, otherwise undefined\n * @returns {{ problem?: LocalProblem, object?: any, property?: string | number, value?: any }} problem or object with property and value\n */\nconst getObjectAndProperty = (config, schemaPath, index = 0) => {\n  if (!schemaPath) {\n    return { value: config };\n  }\n\n  const parts = schemaPath.split(\".\");\n  const property = parts.pop();\n  let current = config;\n  let i = 0;\n\n  for (const part of parts) {\n    const isArray = part.endsWith(\"[]\");\n    const name = isArray ? part.slice(0, -2) : part;\n    let value = current[name];\n\n    if (isArray) {\n      // eslint-disable-next-line no-undefined\n      if (value === undefined) {\n        value = {};\n        current[name] = [...Array.from({ length: index }), value];\n        cliAddedItems.set(current[name], index + 1);\n      } else if (!Array.isArray(value)) {\n        return {\n          problem: {\n            type: \"unexpected-non-array-in-path\",\n            path: parts.slice(0, i).join(\".\"),\n          },\n        };\n      } else {\n        let addedItems = cliAddedItems.get(value) || 0;\n\n        while (addedItems <= index) {\n          // eslint-disable-next-line no-undefined\n          value.push(undefined);\n          // eslint-disable-next-line no-plusplus\n          addedItems++;\n        }\n\n        cliAddedItems.set(value, addedItems);\n\n        const x = value.length - addedItems + index;\n\n        // eslint-disable-next-line no-undefined\n        if (value[x] === undefined) {\n          value[x] = {};\n        } else if (value[x] === null || typeof value[x] !== \"object\") {\n          return {\n            problem: {\n              type: \"unexpected-non-object-in-path\",\n              path: parts.slice(0, i).join(\".\"),\n            },\n          };\n        }\n\n        value = value[x];\n      }\n      // eslint-disable-next-line no-undefined\n    } else if (value === undefined) {\n      // eslint-disable-next-line no-multi-assign\n      value = current[name] = {};\n    } else if (value === null || typeof value !== \"object\") {\n      return {\n        problem: {\n          type: \"unexpected-non-object-in-path\",\n          path: parts.slice(0, i).join(\".\"),\n        },\n      };\n    }\n\n    current = value;\n    // eslint-disable-next-line no-plusplus\n    i++;\n  }\n\n  const value = current[/** @type {string} */ (property)];\n\n  if (/** @type {string} */ (property).endsWith(\"[]\")) {\n    const name = /** @type {string} */ (property).slice(0, -2);\n    // eslint-disable-next-line no-shadow\n    const value = current[name];\n\n    // eslint-disable-next-line no-undefined\n    if (value === undefined) {\n      // eslint-disable-next-line no-undefined\n      current[name] = [...Array.from({ length: index }), undefined];\n      cliAddedItems.set(current[name], index + 1);\n\n      // eslint-disable-next-line no-undefined\n      return { object: current[name], property: index, value: undefined };\n    } else if (!Array.isArray(value)) {\n      // eslint-disable-next-line no-undefined\n      current[name] = [value, ...Array.from({ length: index }), undefined];\n      cliAddedItems.set(current[name], index + 1);\n\n      // eslint-disable-next-line no-undefined\n      return { object: current[name], property: index + 1, value: undefined };\n    }\n\n    let addedItems = cliAddedItems.get(value) || 0;\n\n    while (addedItems <= index) {\n      // eslint-disable-next-line no-undefined\n      value.push(undefined);\n      // eslint-disable-next-line no-plusplus\n      addedItems++;\n    }\n\n    cliAddedItems.set(value, addedItems);\n\n    const x = value.length - addedItems + index;\n\n    // eslint-disable-next-line no-undefined\n    if (value[x] === undefined) {\n      value[x] = {};\n    } else if (value[x] === null || typeof value[x] !== \"object\") {\n      return {\n        problem: {\n          type: \"unexpected-non-object-in-path\",\n          path: schemaPath,\n        },\n      };\n    }\n\n    return {\n      object: value,\n      property: x,\n      value: value[x],\n    };\n  }\n\n  return { object: current, property, value };\n};\n\n/**\n * @param {ArgumentConfig} argConfig processing instructions\n * @param {any} value the value\n * @returns {any | undefined} parsed value\n */\nconst parseValueForArgumentConfig = (argConfig, value) => {\n  // eslint-disable-next-line default-case\n  switch (argConfig.type) {\n    case \"string\":\n      if (typeof value === \"string\") {\n        return value;\n      }\n      break;\n    case \"path\":\n      if (typeof value === \"string\") {\n        return path.resolve(value);\n      }\n      break;\n    case \"number\":\n      if (typeof value === \"number\") {\n        return value;\n      }\n\n      if (typeof value === \"string\" && /^[+-]?\\d*(\\.\\d*)[eE]\\d+$/) {\n        const n = +value;\n        if (!isNaN(n)) return n;\n      }\n\n      break;\n    case \"boolean\":\n      if (typeof value === \"boolean\") {\n        return value;\n      }\n\n      if (value === \"true\") {\n        return true;\n      }\n\n      if (value === \"false\") {\n        return false;\n      }\n\n      break;\n    case \"RegExp\":\n      if (value instanceof RegExp) {\n        return value;\n      }\n\n      if (typeof value === \"string\") {\n        // cspell:word yugi\n        const match = /^\\/(.*)\\/([yugi]*)$/.exec(value);\n\n        if (match && !/[^\\\\]\\//.test(match[1])) {\n          return new RegExp(match[1], match[2]);\n        }\n      }\n\n      break;\n    case \"enum\":\n      if (/** @type {any[]} */ (argConfig.values).includes(value)) {\n        return value;\n      }\n\n      for (const item of /** @type {any[]} */ (argConfig.values)) {\n        if (`${item}` === value) return item;\n      }\n\n      break;\n    case \"reset\":\n      if (value === true) {\n        return [];\n      }\n\n      break;\n  }\n};\n\n/**\n * @param {ArgumentConfig} argConfig processing instructions\n * @returns {string | undefined} expected message\n */\nconst getExpectedValue = (argConfig) => {\n  switch (argConfig.type) {\n    default:\n      return argConfig.type;\n    case \"boolean\":\n      return \"true | false\";\n    case \"RegExp\":\n      return \"regular expression (example: /ab?c*/)\";\n    case \"enum\":\n      return /** @type {any[]} */ (argConfig.values)\n        .map((v) => `${v}`)\n        .join(\" | \");\n    case \"reset\":\n      return \"true (will reset the previous value to an empty array)\";\n  }\n};\n\n/**\n * @param {any} config configuration\n * @param {string} schemaPath path in the config\n * @param {any} value parsed value\n * @param {number | undefined} index index of value when multiple values are provided, otherwise undefined\n * @returns {LocalProblem | null} problem or null for success\n */\nconst setValue = (config, schemaPath, value, index) => {\n  const { problem, object, property } = getObjectAndProperty(\n    config,\n    schemaPath,\n    index\n  );\n\n  if (problem) {\n    return problem;\n  }\n\n  object[/** @type {string} */ (property)] = value;\n\n  return null;\n};\n\n/**\n * @param {ArgumentConfig} argConfig processing instructions\n * @param {any} config configuration\n * @param {any} value the value\n * @param {number | undefined} index the index if multiple values provided\n * @returns {LocalProblem | null} a problem if any\n */\nconst processArgumentConfig = (argConfig, config, value, index) => {\n  // eslint-disable-next-line no-undefined\n  if (index !== undefined && !argConfig.multiple) {\n    return {\n      type: \"multiple-values-unexpected\",\n      path: argConfig.path,\n    };\n  }\n\n  const parsed = parseValueForArgumentConfig(argConfig, value);\n\n  // eslint-disable-next-line no-undefined\n  if (parsed === undefined) {\n    return {\n      type: \"invalid-value\",\n      path: argConfig.path,\n      expected: getExpectedValue(argConfig),\n    };\n  }\n\n  const problem = setValue(config, argConfig.path, parsed, index);\n\n  if (problem) {\n    return problem;\n  }\n\n  return null;\n};\n\n/**\n * @param {Record<string, Argument>} args object of arguments\n * @param {any} config configuration\n * @param {Record<string, string | number | boolean | RegExp | (string | number | boolean | RegExp)[]>} values object with values\n * @returns {Problem[] | null} problems or null for success\n */\nconst processArguments = (args, config, values) => {\n  /**\n   * @type {Problem[]}\n   */\n  const problems = [];\n\n  for (const key of Object.keys(values)) {\n    const arg = args[key];\n\n    if (!arg) {\n      problems.push({\n        type: \"unknown-argument\",\n        path: \"\",\n        argument: key,\n      });\n\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    /**\n     * @param {any} value\n     * @param {number | undefined} i\n     */\n    const processValue = (value, i) => {\n      const currentProblems = [];\n\n      for (const argConfig of arg.configs) {\n        const problem = processArgumentConfig(argConfig, config, value, i);\n\n        if (!problem) {\n          return;\n        }\n\n        currentProblems.push({\n          ...problem,\n          argument: key,\n          value,\n          index: i,\n        });\n      }\n\n      problems.push(...currentProblems);\n    };\n\n    const value = values[key];\n\n    if (Array.isArray(value)) {\n      for (let i = 0; i < value.length; i++) {\n        processValue(value[i], i);\n      }\n    } else {\n      // eslint-disable-next-line no-undefined\n      processValue(value, undefined);\n    }\n  }\n\n  if (problems.length === 0) {\n    return null;\n  }\n\n  return problems;\n};\n\nmodule.exports = processArguments;\n"]},"metadata":{},"sourceType":"script"}