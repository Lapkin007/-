{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.regexp.test.js\");\n\nrequire(\"core-js/modules/es.string.replace.js\");\n\nrequire(\"core-js/modules/es.object.keys.js\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.object.entries.js\");\n\nrequire(\"core-js/modules/es.regexp.constructor.js\");\n\nrequire(\"core-js/modules/es.regexp.dot-all.js\");\n\nrequire(\"core-js/modules/es.regexp.sticky.js\");\n\nrequire(\"core-js/modules/es.regexp.to-string.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createPathRewriter = void 0;\n\nvar isPlainObj = require(\"is-plain-obj\");\n\nvar errors_1 = require(\"./errors\");\n\nvar logger_1 = require(\"./logger\");\n\nvar logger = (0, logger_1.getInstance)();\n/**\n * Create rewrite function, to cache parsed rewrite rules.\n *\n * @param {Object} rewriteConfig\n * @return {Function} Function to rewrite paths; This function should accept `path` (request.url) as parameter\n */\n\nfunction createPathRewriter(rewriteConfig) {\n  var rulesCache;\n\n  if (!isValidRewriteConfig(rewriteConfig)) {\n    return;\n  }\n\n  if (typeof rewriteConfig === 'function') {\n    var customRewriteFn = rewriteConfig;\n    return customRewriteFn;\n  } else {\n    rulesCache = parsePathRewriteRules(rewriteConfig);\n    return rewritePath;\n  }\n\n  function rewritePath(path) {\n    var result = path;\n\n    var _iterator = _createForOfIteratorHelper(rulesCache),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var rule = _step.value;\n\n        if (rule.regex.test(path)) {\n          result = result.replace(rule.regex, rule.value);\n          logger.debug('[HPM] Rewriting path from \"%s\" to \"%s\"', path, result);\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return result;\n  }\n}\n\nexports.createPathRewriter = createPathRewriter;\n\nfunction isValidRewriteConfig(rewriteConfig) {\n  if (typeof rewriteConfig === 'function') {\n    return true;\n  } else if (isPlainObj(rewriteConfig)) {\n    return Object.keys(rewriteConfig).length !== 0;\n  } else if (rewriteConfig === undefined || rewriteConfig === null) {\n    return false;\n  } else {\n    throw new Error(errors_1.ERRORS.ERR_PATH_REWRITER_CONFIG);\n  }\n}\n\nfunction parsePathRewriteRules(rewriteConfig) {\n  var rules = [];\n\n  if (isPlainObj(rewriteConfig)) {\n    for (var _i = 0, _Object$entries = Object.entries(rewriteConfig); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 1),\n          key = _Object$entries$_i[0];\n\n      rules.push({\n        regex: new RegExp(key),\n        value: rewriteConfig[key]\n      });\n      logger.info('[HPM] Proxy rewrite rule created: \"%s\" ~> \"%s\"', key, rewriteConfig[key]);\n    }\n  }\n\n  return rules;\n}","map":{"version":3,"sources":["E:/DW/wasai-cinema/node_modules/http-proxy-middleware/dist/path-rewriter.js"],"names":["Object","defineProperty","exports","value","createPathRewriter","isPlainObj","require","errors_1","logger_1","logger","getInstance","rewriteConfig","rulesCache","isValidRewriteConfig","customRewriteFn","parsePathRewriteRules","rewritePath","path","result","rule","regex","test","replace","debug","keys","length","undefined","Error","ERRORS","ERR_PATH_REWRITER_CONFIG","rules","entries","key","push","RegExp","info"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6B,KAAK,CAAlC;;AACA,IAAMC,UAAU,GAAGC,OAAO,CAAC,cAAD,CAA1B;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAME,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMG,MAAM,GAAG,CAAC,GAAGD,QAAQ,CAACE,WAAb,GAAf;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASN,kBAAT,CAA4BO,aAA5B,EAA2C;AACvC,MAAIC,UAAJ;;AACA,MAAI,CAACC,oBAAoB,CAACF,aAAD,CAAzB,EAA0C;AACtC;AACH;;AACD,MAAI,OAAOA,aAAP,KAAyB,UAA7B,EAAyC;AACrC,QAAMG,eAAe,GAAGH,aAAxB;AACA,WAAOG,eAAP;AACH,GAHD,MAIK;AACDF,IAAAA,UAAU,GAAGG,qBAAqB,CAACJ,aAAD,CAAlC;AACA,WAAOK,WAAP;AACH;;AACD,WAASA,WAAT,CAAqBC,IAArB,EAA2B;AACvB,QAAIC,MAAM,GAAGD,IAAb;;AADuB,+CAEJL,UAFI;AAAA;;AAAA;AAEvB,0DAA+B;AAAA,YAApBO,IAAoB;;AAC3B,YAAIA,IAAI,CAACC,KAAL,CAAWC,IAAX,CAAgBJ,IAAhB,CAAJ,EAA2B;AACvBC,UAAAA,MAAM,GAAGA,MAAM,CAACI,OAAP,CAAeH,IAAI,CAACC,KAApB,EAA2BD,IAAI,CAAChB,KAAhC,CAAT;AACAM,UAAAA,MAAM,CAACc,KAAP,CAAa,wCAAb,EAAuDN,IAAvD,EAA6DC,MAA7D;AACA;AACH;AACJ;AARsB;AAAA;AAAA;AAAA;AAAA;;AASvB,WAAOA,MAAP;AACH;AACJ;;AACDhB,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B;;AACA,SAASS,oBAAT,CAA8BF,aAA9B,EAA6C;AACzC,MAAI,OAAOA,aAAP,KAAyB,UAA7B,EAAyC;AACrC,WAAO,IAAP;AACH,GAFD,MAGK,IAAIN,UAAU,CAACM,aAAD,CAAd,EAA+B;AAChC,WAAOX,MAAM,CAACwB,IAAP,CAAYb,aAAZ,EAA2Bc,MAA3B,KAAsC,CAA7C;AACH,GAFI,MAGA,IAAId,aAAa,KAAKe,SAAlB,IAA+Bf,aAAa,KAAK,IAArD,EAA2D;AAC5D,WAAO,KAAP;AACH,GAFI,MAGA;AACD,UAAM,IAAIgB,KAAJ,CAAUpB,QAAQ,CAACqB,MAAT,CAAgBC,wBAA1B,CAAN;AACH;AACJ;;AACD,SAASd,qBAAT,CAA+BJ,aAA/B,EAA8C;AAC1C,MAAMmB,KAAK,GAAG,EAAd;;AACA,MAAIzB,UAAU,CAACM,aAAD,CAAd,EAA+B;AAC3B,uCAAoBX,MAAM,CAAC+B,OAAP,CAAepB,aAAf,CAApB,qCAAmD;AAA9C;AAAA,UAAOqB,GAAP;;AACDF,MAAAA,KAAK,CAACG,IAAN,CAAW;AACPb,QAAAA,KAAK,EAAE,IAAIc,MAAJ,CAAWF,GAAX,CADA;AAEP7B,QAAAA,KAAK,EAAEQ,aAAa,CAACqB,GAAD;AAFb,OAAX;AAIAvB,MAAAA,MAAM,CAAC0B,IAAP,CAAY,gDAAZ,EAA8DH,GAA9D,EAAmErB,aAAa,CAACqB,GAAD,CAAhF;AACH;AACJ;;AACD,SAAOF,KAAP;AACH","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createPathRewriter = void 0;\nconst isPlainObj = require(\"is-plain-obj\");\nconst errors_1 = require(\"./errors\");\nconst logger_1 = require(\"./logger\");\nconst logger = (0, logger_1.getInstance)();\n/**\n * Create rewrite function, to cache parsed rewrite rules.\n *\n * @param {Object} rewriteConfig\n * @return {Function} Function to rewrite paths; This function should accept `path` (request.url) as parameter\n */\nfunction createPathRewriter(rewriteConfig) {\n    let rulesCache;\n    if (!isValidRewriteConfig(rewriteConfig)) {\n        return;\n    }\n    if (typeof rewriteConfig === 'function') {\n        const customRewriteFn = rewriteConfig;\n        return customRewriteFn;\n    }\n    else {\n        rulesCache = parsePathRewriteRules(rewriteConfig);\n        return rewritePath;\n    }\n    function rewritePath(path) {\n        let result = path;\n        for (const rule of rulesCache) {\n            if (rule.regex.test(path)) {\n                result = result.replace(rule.regex, rule.value);\n                logger.debug('[HPM] Rewriting path from \"%s\" to \"%s\"', path, result);\n                break;\n            }\n        }\n        return result;\n    }\n}\nexports.createPathRewriter = createPathRewriter;\nfunction isValidRewriteConfig(rewriteConfig) {\n    if (typeof rewriteConfig === 'function') {\n        return true;\n    }\n    else if (isPlainObj(rewriteConfig)) {\n        return Object.keys(rewriteConfig).length !== 0;\n    }\n    else if (rewriteConfig === undefined || rewriteConfig === null) {\n        return false;\n    }\n    else {\n        throw new Error(errors_1.ERRORS.ERR_PATH_REWRITER_CONFIG);\n    }\n}\nfunction parsePathRewriteRules(rewriteConfig) {\n    const rules = [];\n    if (isPlainObj(rewriteConfig)) {\n        for (const [key] of Object.entries(rewriteConfig)) {\n            rules.push({\n                regex: new RegExp(key),\n                value: rewriteConfig[key],\n            });\n            logger.info('[HPM] Proxy rewrite rule created: \"%s\" ~> \"%s\"', key, rewriteConfig[key]);\n        }\n    }\n    return rules;\n}\n"]},"metadata":{},"sourceType":"script"}