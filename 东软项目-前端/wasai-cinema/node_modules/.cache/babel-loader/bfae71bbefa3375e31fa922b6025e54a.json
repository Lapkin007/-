{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _taggedTemplateLiteral = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\n\nvar _templateObject, _templateObject2, _templateObject3;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"ajv/dist/compile/codegen\");\n\nvar _util_1 = require(\"./_util\");\n\nvar error = {\n  message: function message(_ref) {\n    var missingPattern = _ref.params.missingPattern;\n    return (0, codegen_1.str)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"should have property matching pattern '\", \"'\"])), missingPattern);\n  },\n  params: function params(_ref2) {\n    var missingPattern = _ref2.params.missingPattern;\n    return (0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{missingPattern: \", \"}\"])), missingPattern);\n  }\n};\n\nfunction getDef() {\n  return {\n    keyword: \"patternRequired\",\n    type: \"object\",\n    schemaType: \"array\",\n    error: error,\n    code: function code(cxt) {\n      var gen = cxt.gen,\n          schema = cxt.schema,\n          data = cxt.data;\n      if (schema.length === 0) return;\n      var valid = gen.let(\"valid\", true);\n\n      var _iterator = _createForOfIteratorHelper(schema),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var pat = _step.value;\n          validateProperties(pat);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      function validateProperties(pattern) {\n        var matched = gen.let(\"matched\", false);\n        gen.forIn(\"key\", data, function (key) {\n          gen.assign(matched, (0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \".test(\", \")\"])), (0, _util_1.usePattern)(cxt, pattern), key));\n          gen.if(matched, function () {\n            return gen.break();\n          });\n        });\n        cxt.setParams({\n          missingPattern: pattern\n        });\n        gen.assign(valid, (0, codegen_1.and)(valid, matched));\n        cxt.pass(valid);\n      }\n    },\n    metaSchema: {\n      type: \"array\",\n      items: {\n        type: \"string\",\n        format: \"regex\"\n      },\n      uniqueItems: true\n    }\n  };\n}\n\nexports.default = getDef;\nmodule.exports = getDef;","map":{"version":3,"mappings":";;;;;;;;;;;;AACA;;AACA;;AAIA,IAAMA,KAAK,GAA2B;AACpCC,SAAO,EAAE;AAAA,QAAWC,cAAX,QAAEC,MAAF,CAAWD,cAAX;AAAA,YACP,gBADO,mHACsCA,cADtC;AAAA,GAD2B;AAGpCC,QAAM,EAAE;AAAA,QAAWD,cAAX,SAAEC,MAAF,CAAWD,cAAX;AAAA,YAAgC,cAAhC,+FAAqDA,cAArD;AAAA;AAH4B,CAAtC;;AAMA,SAAwBE,MAAxB,GAA8B;AAC5B,SAAO;AACLC,WAAO,EAAE,iBADJ;AAELC,QAAI,EAAE,QAFD;AAGLC,cAAU,EAAE,OAHP;AAILP,SAAK,EAALA,KAJK;AAKLQ,QALK,gBAKAC,GALA,EAKe;AAClB,UAAOC,GAAP,GAA4BD,GAA5B,CAAOC,GAAP;AAAA,UAAYC,MAAZ,GAA4BF,GAA5B,CAAYE,MAAZ;AAAA,UAAoBC,IAApB,GAA4BH,GAA5B,CAAoBG,IAApB;AACA,UAAID,MAAM,CAACE,MAAP,KAAkB,CAAtB,EAAyB;AACzB,UAAMC,KAAK,GAAGJ,GAAG,CAACK,GAAJ,CAAQ,OAAR,EAAiB,IAAjB,CAAd;;AAHkB,iDAIAJ,MAJA;AAAA;;AAAA;AAIlB;AAAA,cAAWK,GAAX;AAA0BC,4BAAkB,CAACD,GAAD,CAAlB;AAA1B;AAJkB;AAAA;AAAA;AAAA;AAAA;;AAMlB,eAASC,kBAAT,CAA4BC,OAA5B,EAA2C;AACzC,YAAMC,OAAO,GAAGT,GAAG,CAACK,GAAJ,CAAQ,SAAR,EAAmB,KAAnB,CAAhB;AAEAL,WAAG,CAACU,KAAJ,CAAU,KAAV,EAAiBR,IAAjB,EAAuB,UAACS,GAAD,EAAQ;AAC7BX,aAAG,CAACY,MAAJ,CAAWH,OAAX,GAAoB,cAApB,wFAAwB,wBAAWV,GAAX,EAAgBS,OAAhB,CAAxB,EAAyDG,GAAzD;AACAX,aAAG,CAACa,EAAJ,CAAOJ,OAAP,EAAgB;AAAA,mBAAMT,GAAG,CAACc,KAAJ,EAAN;AAAA,WAAhB;AACD,SAHD;AAKAf,WAAG,CAACgB,SAAJ,CAAc;AAACvB,wBAAc,EAAEgB;AAAjB,SAAd;AACAR,WAAG,CAACY,MAAJ,CAAWR,KAAX,EAAkB,mBAAIA,KAAJ,EAAWK,OAAX,CAAlB;AACAV,WAAG,CAACiB,IAAJ,CAASZ,KAAT;AACD;AACF,KAvBI;AAwBLa,cAAU,EAAE;AACVrB,UAAI,EAAE,OADI;AAEVsB,WAAK,EAAE;AAACtB,YAAI,EAAE,QAAP;AAAiBuB,cAAM,EAAE;AAAzB,OAFG;AAGVC,iBAAW,EAAE;AAHH;AAxBP,GAAP;AA8BD;;AA/BDC;AAiCAC,MAAM,CAACD,OAAP,GAAiB3B,MAAjB","names":["error","message","missingPattern","params","getDef","keyword","type","schemaType","code","cxt","gen","schema","data","length","valid","let","pat","validateProperties","pattern","matched","forIn","key","assign","if","break","setParams","pass","metaSchema","items","format","uniqueItems","exports","module"],"sourceRoot":"","sources":["../../src/definitions/patternRequired.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}