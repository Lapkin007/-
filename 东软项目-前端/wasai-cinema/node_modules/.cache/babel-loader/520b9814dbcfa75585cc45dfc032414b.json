{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _objectSpread = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _classCallCheck = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _toConsumableArray = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nrequire(\"regenerator-runtime/runtime.js\");\n\nrequire(\"core-js/modules/es.array.filter.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.object.keys.js\");\n\nrequire(\"core-js/modules/es.array.concat.js\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each.js\");\n\nrequire(\"core-js/modules/es.string.starts-with.js\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nObject.defineProperty(exports, 'FifoQueue', {\n  enumerable: true,\n  get: function get() {\n    return _FifoQueue.default;\n  }\n});\nObject.defineProperty(exports, 'PriorityQueue', {\n  enumerable: true,\n  get: function get() {\n    return _PriorityQueue.default;\n  }\n});\nexports.Worker = void 0;\nObject.defineProperty(exports, 'messageParent', {\n  enumerable: true,\n  get: function get() {\n    return _messageParent.default;\n  }\n});\n\nfunction _os() {\n  var data = require('os');\n\n  _os = function _os() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _Farm = _interopRequireDefault(require('./Farm'));\n\nvar _WorkerPool = _interopRequireDefault(require('./WorkerPool'));\n\nvar _PriorityQueue = _interopRequireDefault(require('./PriorityQueue'));\n\nvar _FifoQueue = _interopRequireDefault(require('./FifoQueue'));\n\nvar _messageParent = _interopRequireDefault(require('./workers/messageParent'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction getExposedMethods(workerPath, options) {\n  var exposedMethods = options.exposedMethods; // If no methods list is given, try getting it by auto-requiring the module.\n\n  if (!exposedMethods) {\n    var module = require(workerPath);\n\n    exposedMethods = Object.keys(module).filter( // @ts-expect-error: no index\n    function (name) {\n      return typeof module[name] === 'function';\n    });\n\n    if (typeof module === 'function') {\n      exposedMethods = [].concat(_toConsumableArray(exposedMethods), ['default']);\n    }\n  }\n\n  return exposedMethods;\n}\n/**\n * The Jest farm (publicly called \"Worker\") is a class that allows you to queue\n * methods across multiple child processes, in order to parallelize work. This\n * is done by providing an absolute path to a module that will be loaded on each\n * of the child processes, and bridged to the main process.\n *\n * Bridged methods are specified by using the \"exposedMethods\" property of the\n * \"options\" object. This is an array of strings, where each of them corresponds\n * to the exported name in the loaded module.\n *\n * You can also control the amount of workers by using the \"numWorkers\" property\n * of the \"options\" object, and the settings passed to fork the process through\n * the \"forkOptions\" property. The amount of workers defaults to the amount of\n * CPUS minus one.\n *\n * Queueing calls can be done in two ways:\n *   - Standard method: calls will be redirected to the first available worker,\n *     so they will get executed as soon as they can.\n *\n *   - Sticky method: if a \"computeWorkerKey\" method is provided within the\n *     config, the resulting string of this method will be used as a key.\n *     Every time this key is returned, it is guaranteed that your job will be\n *     processed by the same worker. This is specially useful if your workers\n *     are caching results.\n */\n\n\nvar Worker = /*#__PURE__*/function () {\n  function Worker(workerPath, options) {\n    _classCallCheck(this, Worker);\n\n    var _this$_options$enable, _this$_options$forkOp, _this$_options$maxRet, _this$_options$numWor, _this$_options$resour, _this$_options$setupA;\n\n    _defineProperty(this, '_ending', void 0);\n\n    _defineProperty(this, '_farm', void 0);\n\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_workerPool', void 0);\n\n    this._options = _objectSpread({}, options);\n    this._ending = false;\n    var workerPoolOptions = {\n      enableWorkerThreads: (_this$_options$enable = this._options.enableWorkerThreads) !== null && _this$_options$enable !== void 0 ? _this$_options$enable : false,\n      forkOptions: (_this$_options$forkOp = this._options.forkOptions) !== null && _this$_options$forkOp !== void 0 ? _this$_options$forkOp : {},\n      maxRetries: (_this$_options$maxRet = this._options.maxRetries) !== null && _this$_options$maxRet !== void 0 ? _this$_options$maxRet : 3,\n      numWorkers: (_this$_options$numWor = this._options.numWorkers) !== null && _this$_options$numWor !== void 0 ? _this$_options$numWor : Math.max((0, _os().cpus)().length - 1, 1),\n      resourceLimits: (_this$_options$resour = this._options.resourceLimits) !== null && _this$_options$resour !== void 0 ? _this$_options$resour : {},\n      setupArgs: (_this$_options$setupA = this._options.setupArgs) !== null && _this$_options$setupA !== void 0 ? _this$_options$setupA : []\n    };\n\n    if (this._options.WorkerPool) {\n      // @ts-expect-error: constructor target any?\n      this._workerPool = new this._options.WorkerPool(workerPath, workerPoolOptions);\n    } else {\n      this._workerPool = new _WorkerPool.default(workerPath, workerPoolOptions);\n    }\n\n    this._farm = new _Farm.default(workerPoolOptions.numWorkers, this._workerPool.send.bind(this._workerPool), {\n      computeWorkerKey: this._options.computeWorkerKey,\n      taskQueue: this._options.taskQueue,\n      workerSchedulingPolicy: this._options.workerSchedulingPolicy\n    });\n\n    this._bindExposedWorkerMethods(workerPath, this._options);\n  }\n\n  _createClass(Worker, [{\n    key: \"_bindExposedWorkerMethods\",\n    value: function _bindExposedWorkerMethods(workerPath, options) {\n      var _this = this;\n\n      getExposedMethods(workerPath, options).forEach(function (name) {\n        if (name.startsWith('_')) {\n          return;\n        }\n\n        if (_this.constructor.prototype.hasOwnProperty(name)) {\n          throw new TypeError('Cannot define a method called ' + name);\n        } // @ts-expect-error: dynamic extension of the class instance is expected.\n\n\n        _this[name] = _this._callFunctionWithArgs.bind(_this, name);\n      });\n    }\n  }, {\n    key: \"_callFunctionWithArgs\",\n    value: function _callFunctionWithArgs(method) {\n      var _this$_farm;\n\n      if (this._ending) {\n        throw new Error('Farm is ended, no more calls can be done to it');\n      }\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return (_this$_farm = this._farm).doWork.apply(_this$_farm, [method].concat(args));\n    }\n  }, {\n    key: \"getStderr\",\n    value: function getStderr() {\n      return this._workerPool.getStderr();\n    }\n  }, {\n    key: \"getStdout\",\n    value: function getStdout() {\n      return this._workerPool.getStdout();\n    }\n  }, {\n    key: \"end\",\n    value: function () {\n      var _end = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this._ending) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('Farm is ended, no more calls can be done to it');\n\n              case 2:\n                this._ending = true;\n                return _context.abrupt(\"return\", this._workerPool.end());\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function end() {\n        return _end.apply(this, arguments);\n      }\n\n      return end;\n    }()\n  }]);\n\n  return Worker;\n}();\n\nexports.Worker = Worker;","map":{"version":3,"sources":["E:/DW/wasai-cinema/node_modules/jest-worker/build/index.js"],"names":["Object","defineProperty","exports","value","enumerable","get","_FifoQueue","default","_PriorityQueue","Worker","_messageParent","_os","data","require","_Farm","_interopRequireDefault","_WorkerPool","obj","__esModule","_defineProperty","key","configurable","writable","getExposedMethods","workerPath","options","exposedMethods","module","keys","filter","name","_this$_options$enable","_this$_options$forkOp","_this$_options$maxRet","_this$_options$numWor","_this$_options$resour","_this$_options$setupA","_options","_ending","workerPoolOptions","enableWorkerThreads","forkOptions","maxRetries","numWorkers","Math","max","cpus","length","resourceLimits","setupArgs","WorkerPool","_workerPool","_farm","send","bind","computeWorkerKey","taskQueue","workerSchedulingPolicy","_bindExposedWorkerMethods","forEach","startsWith","constructor","prototype","hasOwnProperty","TypeError","_callFunctionWithArgs","method","Error","args","doWork","getStderr","getStdout","end"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nObject.defineProperty(exports, 'FifoQueue', {\n  enumerable: true,\n  get: function () {\n    return _FifoQueue.default;\n  }\n});\nObject.defineProperty(exports, 'PriorityQueue', {\n  enumerable: true,\n  get: function () {\n    return _PriorityQueue.default;\n  }\n});\nexports.Worker = void 0;\nObject.defineProperty(exports, 'messageParent', {\n  enumerable: true,\n  get: function () {\n    return _messageParent.default;\n  }\n});\n\nfunction _os() {\n  const data = require('os');\n\n  _os = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _Farm = _interopRequireDefault(require('./Farm'));\n\nvar _WorkerPool = _interopRequireDefault(require('./WorkerPool'));\n\nvar _PriorityQueue = _interopRequireDefault(require('./PriorityQueue'));\n\nvar _FifoQueue = _interopRequireDefault(require('./FifoQueue'));\n\nvar _messageParent = _interopRequireDefault(require('./workers/messageParent'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nfunction getExposedMethods(workerPath, options) {\n  let exposedMethods = options.exposedMethods; // If no methods list is given, try getting it by auto-requiring the module.\n\n  if (!exposedMethods) {\n    const module = require(workerPath);\n\n    exposedMethods = Object.keys(module).filter(\n      // @ts-expect-error: no index\n      name => typeof module[name] === 'function'\n    );\n\n    if (typeof module === 'function') {\n      exposedMethods = [...exposedMethods, 'default'];\n    }\n  }\n\n  return exposedMethods;\n}\n/**\n * The Jest farm (publicly called \"Worker\") is a class that allows you to queue\n * methods across multiple child processes, in order to parallelize work. This\n * is done by providing an absolute path to a module that will be loaded on each\n * of the child processes, and bridged to the main process.\n *\n * Bridged methods are specified by using the \"exposedMethods\" property of the\n * \"options\" object. This is an array of strings, where each of them corresponds\n * to the exported name in the loaded module.\n *\n * You can also control the amount of workers by using the \"numWorkers\" property\n * of the \"options\" object, and the settings passed to fork the process through\n * the \"forkOptions\" property. The amount of workers defaults to the amount of\n * CPUS minus one.\n *\n * Queueing calls can be done in two ways:\n *   - Standard method: calls will be redirected to the first available worker,\n *     so they will get executed as soon as they can.\n *\n *   - Sticky method: if a \"computeWorkerKey\" method is provided within the\n *     config, the resulting string of this method will be used as a key.\n *     Every time this key is returned, it is guaranteed that your job will be\n *     processed by the same worker. This is specially useful if your workers\n *     are caching results.\n */\n\nclass Worker {\n  constructor(workerPath, options) {\n    var _this$_options$enable,\n      _this$_options$forkOp,\n      _this$_options$maxRet,\n      _this$_options$numWor,\n      _this$_options$resour,\n      _this$_options$setupA;\n\n    _defineProperty(this, '_ending', void 0);\n\n    _defineProperty(this, '_farm', void 0);\n\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_workerPool', void 0);\n\n    this._options = {...options};\n    this._ending = false;\n    const workerPoolOptions = {\n      enableWorkerThreads:\n        (_this$_options$enable = this._options.enableWorkerThreads) !== null &&\n        _this$_options$enable !== void 0\n          ? _this$_options$enable\n          : false,\n      forkOptions:\n        (_this$_options$forkOp = this._options.forkOptions) !== null &&\n        _this$_options$forkOp !== void 0\n          ? _this$_options$forkOp\n          : {},\n      maxRetries:\n        (_this$_options$maxRet = this._options.maxRetries) !== null &&\n        _this$_options$maxRet !== void 0\n          ? _this$_options$maxRet\n          : 3,\n      numWorkers:\n        (_this$_options$numWor = this._options.numWorkers) !== null &&\n        _this$_options$numWor !== void 0\n          ? _this$_options$numWor\n          : Math.max((0, _os().cpus)().length - 1, 1),\n      resourceLimits:\n        (_this$_options$resour = this._options.resourceLimits) !== null &&\n        _this$_options$resour !== void 0\n          ? _this$_options$resour\n          : {},\n      setupArgs:\n        (_this$_options$setupA = this._options.setupArgs) !== null &&\n        _this$_options$setupA !== void 0\n          ? _this$_options$setupA\n          : []\n    };\n\n    if (this._options.WorkerPool) {\n      // @ts-expect-error: constructor target any?\n      this._workerPool = new this._options.WorkerPool(\n        workerPath,\n        workerPoolOptions\n      );\n    } else {\n      this._workerPool = new _WorkerPool.default(workerPath, workerPoolOptions);\n    }\n\n    this._farm = new _Farm.default(\n      workerPoolOptions.numWorkers,\n      this._workerPool.send.bind(this._workerPool),\n      {\n        computeWorkerKey: this._options.computeWorkerKey,\n        taskQueue: this._options.taskQueue,\n        workerSchedulingPolicy: this._options.workerSchedulingPolicy\n      }\n    );\n\n    this._bindExposedWorkerMethods(workerPath, this._options);\n  }\n\n  _bindExposedWorkerMethods(workerPath, options) {\n    getExposedMethods(workerPath, options).forEach(name => {\n      if (name.startsWith('_')) {\n        return;\n      }\n\n      if (this.constructor.prototype.hasOwnProperty(name)) {\n        throw new TypeError('Cannot define a method called ' + name);\n      } // @ts-expect-error: dynamic extension of the class instance is expected.\n\n      this[name] = this._callFunctionWithArgs.bind(this, name);\n    });\n  }\n\n  _callFunctionWithArgs(method, ...args) {\n    if (this._ending) {\n      throw new Error('Farm is ended, no more calls can be done to it');\n    }\n\n    return this._farm.doWork(method, ...args);\n  }\n\n  getStderr() {\n    return this._workerPool.getStderr();\n  }\n\n  getStdout() {\n    return this._workerPool.getStdout();\n  }\n\n  async end() {\n    if (this._ending) {\n      throw new Error('Farm is ended, no more calls can be done to it');\n    }\n\n    this._ending = true;\n    return this._workerPool.end();\n  }\n}\n\nexports.Worker = Worker;\n"]},"metadata":{},"sourceType":"script"}