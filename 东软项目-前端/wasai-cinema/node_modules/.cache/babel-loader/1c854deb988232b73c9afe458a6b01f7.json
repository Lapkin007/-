{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.set.js\");\n\nrequire(\"core-js/modules/es.string.iterator.js\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.array.slice.js\");\n\nvar _require = require('./validation'),\n    tokenChars = _require.tokenChars;\n/**\n * Parses the `Sec-WebSocket-Protocol` header into a set of subprotocol names.\n *\n * @param {String} header The field value of the header\n * @return {Set} The subprotocol names\n * @public\n */\n\n\nfunction parse(header) {\n  var protocols = new Set();\n  var start = -1;\n  var end = -1;\n  var i = 0;\n\n  for (i; i < header.length; i++) {\n    var code = header.charCodeAt(i);\n\n    if (end === -1 && tokenChars[code] === 1) {\n      if (start === -1) start = i;\n    } else if (i !== 0 && (code === 0x20\n    /* ' ' */\n    || code === 0x09)\n    /* '\\t' */\n    ) {\n      if (end === -1 && start !== -1) end = i;\n    } else if (code === 0x2c\n    /* ',' */\n    ) {\n      if (start === -1) {\n        throw new SyntaxError(\"Unexpected character at index \".concat(i));\n      }\n\n      if (end === -1) end = i;\n\n      var _protocol = header.slice(start, end);\n\n      if (protocols.has(_protocol)) {\n        throw new SyntaxError(\"The \\\"\".concat(_protocol, \"\\\" subprotocol is duplicated\"));\n      }\n\n      protocols.add(_protocol);\n      start = end = -1;\n    } else {\n      throw new SyntaxError(\"Unexpected character at index \".concat(i));\n    }\n  }\n\n  if (start === -1 || end !== -1) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  var protocol = header.slice(start, i);\n\n  if (protocols.has(protocol)) {\n    throw new SyntaxError(\"The \\\"\".concat(protocol, \"\\\" subprotocol is duplicated\"));\n  }\n\n  protocols.add(protocol);\n  return protocols;\n}\n\nmodule.exports = {\n  parse: parse\n};","map":{"version":3,"sources":["E:/DW/wasai-cinema/node_modules/webpack-dev-server/node_modules/ws/lib/subprotocol.js"],"names":["require","tokenChars","parse","header","protocols","Set","start","end","i","length","code","charCodeAt","SyntaxError","protocol","slice","has","add","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,eAAuBA,OAAO,CAAC,cAAD,CAA9B;AAAA,IAAQC,UAAR,YAAQA,UAAR;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,KAAT,CAAeC,MAAf,EAAuB;AACrB,MAAMC,SAAS,GAAG,IAAIC,GAAJ,EAAlB;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;AACA,MAAIC,GAAG,GAAG,CAAC,CAAX;AACA,MAAIC,CAAC,GAAG,CAAR;;AAEA,OAAKA,CAAL,EAAQA,CAAC,GAAGL,MAAM,CAACM,MAAnB,EAA2BD,CAAC,EAA5B,EAAgC;AAC9B,QAAME,IAAI,GAAGP,MAAM,CAACQ,UAAP,CAAkBH,CAAlB,CAAb;;AAEA,QAAID,GAAG,KAAK,CAAC,CAAT,IAAcN,UAAU,CAACS,IAAD,CAAV,KAAqB,CAAvC,EAA0C;AACxC,UAAIJ,KAAK,KAAK,CAAC,CAAf,EAAkBA,KAAK,GAAGE,CAAR;AACnB,KAFD,MAEO,IACLA,CAAC,KAAK,CAAN,KACCE,IAAI,KAAK;AAAK;AAAd,OAA2BA,IAAI,KAAK,IADrC;AAC2C;AAFtC,MAGL;AACA,UAAIH,GAAG,KAAK,CAAC,CAAT,IAAcD,KAAK,KAAK,CAAC,CAA7B,EAAgCC,GAAG,GAAGC,CAAN;AACjC,KALM,MAKA,IAAIE,IAAI,KAAK;AAAK;AAAlB,MAA6B;AAClC,UAAIJ,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,cAAM,IAAIM,WAAJ,yCAAiDJ,CAAjD,EAAN;AACD;;AAED,UAAID,GAAG,KAAK,CAAC,CAAb,EAAgBA,GAAG,GAAGC,CAAN;;AAEhB,UAAMK,SAAQ,GAAGV,MAAM,CAACW,KAAP,CAAaR,KAAb,EAAoBC,GAApB,CAAjB;;AAEA,UAAIH,SAAS,CAACW,GAAV,CAAcF,SAAd,CAAJ,EAA6B;AAC3B,cAAM,IAAID,WAAJ,iBAAwBC,SAAxB,kCAAN;AACD;;AAEDT,MAAAA,SAAS,CAACY,GAAV,CAAcH,SAAd;AACAP,MAAAA,KAAK,GAAGC,GAAG,GAAG,CAAC,CAAf;AACD,KAfM,MAeA;AACL,YAAM,IAAIK,WAAJ,yCAAiDJ,CAAjD,EAAN;AACD;AACF;;AAED,MAAIF,KAAK,KAAK,CAAC,CAAX,IAAgBC,GAAG,KAAK,CAAC,CAA7B,EAAgC;AAC9B,UAAM,IAAIK,WAAJ,CAAgB,yBAAhB,CAAN;AACD;;AAED,MAAMC,QAAQ,GAAGV,MAAM,CAACW,KAAP,CAAaR,KAAb,EAAoBE,CAApB,CAAjB;;AAEA,MAAIJ,SAAS,CAACW,GAAV,CAAcF,QAAd,CAAJ,EAA6B;AAC3B,UAAM,IAAID,WAAJ,iBAAwBC,QAAxB,kCAAN;AACD;;AAEDT,EAAAA,SAAS,CAACY,GAAV,CAAcH,QAAd;AACA,SAAOT,SAAP;AACD;;AAEDa,MAAM,CAACC,OAAP,GAAiB;AAAEhB,EAAAA,KAAK,EAALA;AAAF,CAAjB","sourcesContent":["'use strict';\n\nconst { tokenChars } = require('./validation');\n\n/**\n * Parses the `Sec-WebSocket-Protocol` header into a set of subprotocol names.\n *\n * @param {String} header The field value of the header\n * @return {Set} The subprotocol names\n * @public\n */\nfunction parse(header) {\n  const protocols = new Set();\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (i; i < header.length; i++) {\n    const code = header.charCodeAt(i);\n\n    if (end === -1 && tokenChars[code] === 1) {\n      if (start === -1) start = i;\n    } else if (\n      i !== 0 &&\n      (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n    ) {\n      if (end === -1 && start !== -1) end = i;\n    } else if (code === 0x2c /* ',' */) {\n      if (start === -1) {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n\n      if (end === -1) end = i;\n\n      const protocol = header.slice(start, end);\n\n      if (protocols.has(protocol)) {\n        throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n      }\n\n      protocols.add(protocol);\n      start = end = -1;\n    } else {\n      throw new SyntaxError(`Unexpected character at index ${i}`);\n    }\n  }\n\n  if (start === -1 || end !== -1) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  const protocol = header.slice(start, i);\n\n  if (protocols.has(protocol)) {\n    throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n  }\n\n  protocols.add(protocol);\n  return protocols;\n}\n\nmodule.exports = { parse };\n"]},"metadata":{},"sourceType":"script"}