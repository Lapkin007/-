{"ast":null,"code":"\"use strict\";\n\nvar _typeof = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/typeof.js\").default;\n\nvar _toConsumableArray = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _taggedTemplateLiteral = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.array.map.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar util_1 = require(\"../../compile/util\");\n\nvar equal_1 = require(\"../../runtime/equal\");\n\nvar error = {\n  message: \"must be equal to one of the allowed values\",\n  params: function params(_ref) {\n    var schemaCode = _ref.schemaCode;\n    return (0, codegen_1._)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"{allowedValues: \", \"}\"])), schemaCode);\n  }\n};\nvar def = {\n  keyword: \"enum\",\n  schemaType: \"array\",\n  $data: true,\n  error: error,\n  code: function code(cxt) {\n    var gen = cxt.gen,\n        data = cxt.data,\n        $data = cxt.$data,\n        schema = cxt.schema,\n        schemaCode = cxt.schemaCode,\n        it = cxt.it;\n    if (!$data && schema.length === 0) throw new Error(\"enum must have non-empty array\");\n    var useLoop = schema.length >= it.opts.loopEnum;\n    var eql = (0, util_1.useFunc)(gen, equal_1.default);\n    var valid;\n\n    if (useLoop || $data) {\n      valid = gen.let(\"valid\");\n      cxt.block$data(valid, loopEnum);\n    } else {\n      /* istanbul ignore if */\n      if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\");\n      var vSchema = gen.const(\"vSchema\", schemaCode);\n      valid = (0, codegen_1.or).apply(void 0, _toConsumableArray(schema.map(function (_x, i) {\n        return equalCode(vSchema, i);\n      })));\n    }\n\n    cxt.pass(valid);\n\n    function loopEnum() {\n      gen.assign(valid, false);\n      gen.forOf(\"v\", schemaCode, function (v) {\n        return gen.if((0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\", \"(\", \", \", \")\"])), eql, data, v), function () {\n          return gen.assign(valid, true).break();\n        });\n      });\n    }\n\n    function equalCode(vSchema, i) {\n      var sch = schema[i];\n      return _typeof(sch) === \"object\" && sch !== null ? (0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \"(\", \", \", \"[\", \"])\"])), eql, data, vSchema, i) : (0, codegen_1._)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \" === \", \"\"])), data, sch);\n    }\n  }\n};\nexports.default = def;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AAIA,IAAMA,KAAK,GAA2B;AACpCC,SAAO,EAAE,4CAD2B;AAEpCC,QAAM,EAAE;AAAA,QAAEC,UAAF,QAAEA,UAAF;AAAA,YAAkB,cAAlB,4FAAsCA,UAAtC;AAAA;AAF4B,CAAtC;AAKA,IAAMC,GAAG,GAA0B;AACjCC,SAAO,EAAE,MADwB;AAEjCC,YAAU,EAAE,OAFqB;AAGjCC,OAAK,EAAE,IAH0B;AAIjCP,OAAK,EAALA,KAJiC;AAKjCQ,MALiC,gBAK5BC,GAL4B,EAKb;AAClB,QAAOC,GAAP,GAAmDD,GAAnD,CAAOC,GAAP;AAAA,QAAYC,IAAZ,GAAmDF,GAAnD,CAAYE,IAAZ;AAAA,QAAkBJ,KAAlB,GAAmDE,GAAnD,CAAkBF,KAAlB;AAAA,QAAyBK,MAAzB,GAAmDH,GAAnD,CAAyBG,MAAzB;AAAA,QAAiCT,UAAjC,GAAmDM,GAAnD,CAAiCN,UAAjC;AAAA,QAA6CU,EAA7C,GAAmDJ,GAAnD,CAA6CI,EAA7C;AACA,QAAI,CAACN,KAAD,IAAUK,MAAM,CAACE,MAAP,KAAkB,CAAhC,EAAmC,MAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;AACnC,QAAMC,OAAO,GAAGJ,MAAM,CAACE,MAAP,IAAiBD,EAAE,CAACI,IAAH,CAAQC,QAAzC;AACA,QAAMC,GAAG,GAAG,oBAAQT,GAAR,EAAaU,eAAb,CAAZ;AACA,QAAIC,KAAJ;;AACA,QAAIL,OAAO,IAAIT,KAAf,EAAsB;AACpBc,WAAK,GAAGX,GAAG,CAACY,GAAJ,CAAQ,OAAR,CAAR;AACAb,SAAG,CAACc,UAAJ,CAAeF,KAAf,EAAsBH,QAAtB;AACD,KAHD,MAGO;AACL;AACA,UAAI,CAACM,KAAK,CAACC,OAAN,CAAcb,MAAd,CAAL,EAA4B,MAAM,IAAIG,KAAJ,CAAU,0BAAV,CAAN;AAC5B,UAAMW,OAAO,GAAGhB,GAAG,CAACiB,KAAJ,CAAU,SAAV,EAAqBxB,UAArB,CAAhB;AACAkB,WAAK,GAAG,mDAAMT,MAAM,CAACgB,GAAP,CAAW,UAACC,EAAD,EAAcC,CAAd;AAAA,eAA4BC,SAAS,CAACL,OAAD,EAAUI,CAAV,CAArC;AAAA,OAAX,CAAN,EAAR;AACD;;AACDrB,OAAG,CAACuB,IAAJ,CAASX,KAAT;;AAEA,aAASH,QAAT,GAAiB;AACfR,SAAG,CAACuB,MAAJ,CAAWZ,KAAX,EAAkB,KAAlB;AACAX,SAAG,CAACwB,KAAJ,CAAU,GAAV,EAAe/B,UAAf,EAAmC,UAACgC,CAAD;AAAA,eACjCzB,GAAG,CAAC0B,EAAJ,EAAO,cAAP,yFAAWjB,GAAX,EAAkBR,IAAlB,EAA2BwB,CAA3B,GAAiC;AAAA,iBAAMzB,GAAG,CAACuB,MAAJ,CAAWZ,KAAX,EAAkB,IAAlB,EAAwBgB,KAAxB,EAAN;AAAA,SAAjC,CADiC;AAAA,OAAnC;AAGD;;AAED,aAASN,SAAT,CAAmBL,OAAnB,EAAkCI,CAAlC,EAA2C;AACzC,UAAMQ,GAAG,GAAG1B,MAAM,CAACkB,CAAD,CAAlB;AACA,aAAO,QAAOQ,GAAP,MAAe,QAAf,IAA2BA,GAAG,KAAK,IAAnC,IACH,cADG,+FACCnB,GADD,EACQR,IADR,EACiBe,OADjB,EAC4BI,CAD5B,KAEH,cAFG,sFAECnB,IAFD,EAEa2B,GAFb,CAAP;AAGD;AACF;AAnCgC,CAAnC;AAsCAC,kBAAenC,GAAf","names":["error","message","params","schemaCode","def","keyword","schemaType","$data","code","cxt","gen","data","schema","it","length","Error","useLoop","opts","loopEnum","eql","equal_1","valid","let","block$data","Array","isArray","vSchema","const","map","_x","i","equalCode","pass","assign","forOf","v","if","break","sch","exports"],"sourceRoot":"","sources":["../../../lib/vocabularies/validation/enum.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}