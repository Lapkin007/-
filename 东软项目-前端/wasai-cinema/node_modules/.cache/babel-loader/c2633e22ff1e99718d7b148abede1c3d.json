{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _toArray = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/toArray.js\").default;\n\nvar _slicedToArray = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _classCallCheck = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _assertThisInitialized = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\n\nvar _inherits = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _wrapNativeSuper = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\n\nvar _typeof = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/typeof.js\").default;\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.regexp.test.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.array.filter.js\");\n\nrequire(\"core-js/modules/es.array.slice.js\");\n\nrequire(\"core-js/modules/es.array.concat.js\");\n\nrequire(\"core-js/modules/es.array.map.js\");\n\nrequire(\"core-js/modules/es.string.replace.js\");\n\nrequire(\"core-js/modules/es.array.join.js\");\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nrequire(\"core-js/modules/es.string.match.js\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.string.split.js\");\n\nrequire(\"core-js/modules/es.array.includes.js\");\n\nrequire(\"core-js/modules/es.string.includes.js\");\n\nrequire(\"core-js/modules/es.json.stringify.js\");\n\nrequire(\"core-js/modules/es.object.keys.js\");\n\nrequire(\"core-js/modules/es.set.js\");\n\nrequire(\"core-js/modules/es.string.iterator.js\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each.js\");\n\nrequire(\"core-js/modules/es.symbol.js\");\n\nrequire(\"core-js/modules/es.symbol.description.js\");\n\nrequire(\"core-js/modules/es.string.link.js\");\n\nrequire(\"core-js/modules/es.string.trim.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _require = require(\"./util/hints\"),\n    stringHints = _require.stringHints,\n    numberHints = _require.numberHints;\n/** @typedef {import(\"json-schema\").JSONSchema6} JSONSchema6 */\n\n/** @typedef {import(\"json-schema\").JSONSchema7} JSONSchema7 */\n\n/** @typedef {import(\"./validate\").Schema} Schema */\n\n/** @typedef {import(\"./validate\").ValidationErrorConfiguration} ValidationErrorConfiguration */\n\n/** @typedef {import(\"./validate\").PostFormatter} PostFormatter */\n\n/** @typedef {import(\"./validate\").SchemaUtilErrorObject} SchemaUtilErrorObject */\n\n/** @enum {number} */\n\n\nvar SPECIFICITY = {\n  type: 1,\n  not: 1,\n  oneOf: 1,\n  anyOf: 1,\n  if: 1,\n  enum: 1,\n  const: 1,\n  instanceof: 1,\n  required: 2,\n  pattern: 2,\n  patternRequired: 2,\n  format: 2,\n  formatMinimum: 2,\n  formatMaximum: 2,\n  minimum: 2,\n  exclusiveMinimum: 2,\n  maximum: 2,\n  exclusiveMaximum: 2,\n  multipleOf: 2,\n  uniqueItems: 2,\n  contains: 2,\n  minLength: 2,\n  maxLength: 2,\n  minItems: 2,\n  maxItems: 2,\n  minProperties: 2,\n  maxProperties: 2,\n  dependencies: 2,\n  propertyNames: 2,\n  additionalItems: 2,\n  additionalProperties: 2,\n  absolutePath: 2\n};\n/**\n * @param {string} value\n * @returns {value is number}\n */\n\nfunction isNumeric(value) {\n  return /^-?\\d+$/.test(value);\n}\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} array\n * @param {(item: SchemaUtilErrorObject) => number} fn\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction filterMax(array, fn) {\n  var evaluatedMax = array.reduce(function (max, item) {\n    return Math.max(max, fn(item));\n  }, 0);\n  return array.filter(function (item) {\n    return fn(item) === evaluatedMax;\n  });\n}\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} children\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction filterChildren(children) {\n  var newChildren = children;\n  newChildren = filterMax(newChildren,\n  /**\n   *\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  function (error) {\n    return error.instancePath ? error.instancePath.length : 0;\n  });\n  newChildren = filterMax(newChildren,\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  function (error) {\n    return SPECIFICITY[\n    /** @type {keyof typeof SPECIFICITY} */\n    error.keyword] || 2;\n  });\n  return newChildren;\n}\n/**\n * Find all children errors\n * @param {Array<SchemaUtilErrorObject>} children\n * @param {Array<string>} schemaPaths\n * @return {number} returns index of first child\n */\n\n\nfunction findAllChildren(children, schemaPaths) {\n  var i = children.length - 1;\n\n  var predicate =\n  /**\n   * @param {string} schemaPath\n   * @returns {boolean}\n   */\n  function predicate(schemaPath) {\n    return children[i].schemaPath.indexOf(schemaPath) !== 0;\n  };\n\n  while (i > -1 && !schemaPaths.every(predicate)) {\n    if (children[i].keyword === \"anyOf\" || children[i].keyword === \"oneOf\") {\n      var refs = extractRefs(children[i]);\n      var childrenStart = findAllChildren(children.slice(0, i), refs.concat(children[i].schemaPath));\n      i = childrenStart - 1;\n    } else {\n      i -= 1;\n    }\n  }\n\n  return i + 1;\n}\n/**\n * Extracts all refs from schema\n * @param {SchemaUtilErrorObject} error\n * @return {Array<string>}\n */\n\n\nfunction extractRefs(error) {\n  var schema = error.schema;\n\n  if (!Array.isArray(schema)) {\n    return [];\n  }\n\n  return schema.map(function (_ref) {\n    var $ref = _ref.$ref;\n    return $ref;\n  }).filter(function (s) {\n    return s;\n  });\n}\n/**\n * Groups children by their first level parent (assuming that error is root)\n * @param {Array<SchemaUtilErrorObject>} children\n * @return {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction groupChildrenByFirstChild(children) {\n  var result = [];\n  var i = children.length - 1;\n\n  while (i > 0) {\n    var child = children[i];\n\n    if (child.keyword === \"anyOf\" || child.keyword === \"oneOf\") {\n      var refs = extractRefs(child);\n      var childrenStart = findAllChildren(children.slice(0, i), refs.concat(child.schemaPath));\n\n      if (childrenStart !== i) {\n        result.push(Object.assign({}, child, {\n          children: children.slice(childrenStart, i)\n        }));\n        i = childrenStart;\n      } else {\n        result.push(child);\n      }\n    } else {\n      result.push(child);\n    }\n\n    i -= 1;\n  }\n\n  if (i === 0) {\n    result.push(children[i]);\n  }\n\n  return result.reverse();\n}\n/**\n * @param {string} str\n * @param {string} prefix\n * @returns {string}\n */\n\n\nfunction indent(str, prefix) {\n  return str.replace(/\\n(?!$)/g, \"\\n\".concat(prefix));\n}\n/**\n * @param {Schema} schema\n * @returns {schema is (Schema & {not: Schema})}\n */\n\n\nfunction hasNotInSchema(schema) {\n  return !!schema.not;\n}\n/**\n * @param {Schema} schema\n * @return {Schema}\n */\n\n\nfunction findFirstTypedSchema(schema) {\n  if (hasNotInSchema(schema)) {\n    return findFirstTypedSchema(schema.not);\n  }\n\n  return schema;\n}\n/**\n * @param {Schema} schema\n * @return {boolean}\n */\n\n\nfunction canApplyNot(schema) {\n  var typedSchema = findFirstTypedSchema(schema);\n  return likeNumber(typedSchema) || likeInteger(typedSchema) || likeString(typedSchema) || likeNull(typedSchema) || likeBoolean(typedSchema);\n}\n/**\n * @param {any} maybeObj\n * @returns {boolean}\n */\n\n\nfunction isObject(maybeObj) {\n  return _typeof(maybeObj) === \"object\" && maybeObj !== null;\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeNumber(schema) {\n  return schema.type === \"number\" || typeof schema.minimum !== \"undefined\" || typeof schema.exclusiveMinimum !== \"undefined\" || typeof schema.maximum !== \"undefined\" || typeof schema.exclusiveMaximum !== \"undefined\" || typeof schema.multipleOf !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeInteger(schema) {\n  return schema.type === \"integer\" || typeof schema.minimum !== \"undefined\" || typeof schema.exclusiveMinimum !== \"undefined\" || typeof schema.maximum !== \"undefined\" || typeof schema.exclusiveMaximum !== \"undefined\" || typeof schema.multipleOf !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeString(schema) {\n  return schema.type === \"string\" || typeof schema.minLength !== \"undefined\" || typeof schema.maxLength !== \"undefined\" || typeof schema.pattern !== \"undefined\" || typeof schema.format !== \"undefined\" || typeof schema.formatMinimum !== \"undefined\" || typeof schema.formatMaximum !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeBoolean(schema) {\n  return schema.type === \"boolean\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeArray(schema) {\n  return schema.type === \"array\" || typeof schema.minItems === \"number\" || typeof schema.maxItems === \"number\" || typeof schema.uniqueItems !== \"undefined\" || typeof schema.items !== \"undefined\" || typeof schema.additionalItems !== \"undefined\" || typeof schema.contains !== \"undefined\";\n}\n/**\n * @param {Schema & {patternRequired?: Array<string>}} schema\n * @returns {boolean}\n */\n\n\nfunction likeObject(schema) {\n  return schema.type === \"object\" || typeof schema.minProperties !== \"undefined\" || typeof schema.maxProperties !== \"undefined\" || typeof schema.required !== \"undefined\" || typeof schema.properties !== \"undefined\" || typeof schema.patternProperties !== \"undefined\" || typeof schema.additionalProperties !== \"undefined\" || typeof schema.dependencies !== \"undefined\" || typeof schema.propertyNames !== \"undefined\" || typeof schema.patternRequired !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeNull(schema) {\n  return schema.type === \"null\";\n}\n/**\n * @param {string} type\n * @returns {string}\n */\n\n\nfunction getArticle(type) {\n  if (/^[aeiou]/i.test(type)) {\n    return \"an\";\n  }\n\n  return \"a\";\n}\n/**\n * @param {Schema=} schema\n * @returns {string}\n */\n\n\nfunction getSchemaNonTypes(schema) {\n  if (!schema) {\n    return \"\";\n  }\n\n  if (!schema.type) {\n    if (likeNumber(schema) || likeInteger(schema)) {\n      return \" | should be any non-number\";\n    }\n\n    if (likeString(schema)) {\n      return \" | should be any non-string\";\n    }\n\n    if (likeArray(schema)) {\n      return \" | should be any non-array\";\n    }\n\n    if (likeObject(schema)) {\n      return \" | should be any non-object\";\n    }\n  }\n\n  return \"\";\n}\n/**\n * @param {Array<string>} hints\n * @returns {string}\n */\n\n\nfunction formatHints(hints) {\n  return hints.length > 0 ? \"(\".concat(hints.join(\", \"), \")\") : \"\";\n}\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @returns {string[]}\n */\n\n\nfunction getHints(schema, logic) {\n  if (likeNumber(schema) || likeInteger(schema)) {\n    return numberHints(schema, logic);\n  } else if (likeString(schema)) {\n    return stringHints(schema, logic);\n  }\n\n  return [];\n}\n\nvar ValidationError = /*#__PURE__*/function (_Error) {\n  _inherits(ValidationError, _Error);\n\n  var _super = _createSuper(ValidationError);\n\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @param {Schema} schema\n   * @param {ValidationErrorConfiguration} configuration\n   */\n  function ValidationError(errors, schema) {\n    var _this;\n\n    var configuration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, ValidationError);\n\n    _this = _super.call(this);\n    /** @type {string} */\n\n    _this.name = \"ValidationError\";\n    /** @type {Array<SchemaUtilErrorObject>} */\n\n    _this.errors = errors;\n    /** @type {Schema} */\n\n    _this.schema = schema;\n    var headerNameFromSchema;\n    var baseDataPathFromSchema;\n\n    if (schema.title && (!configuration.name || !configuration.baseDataPath)) {\n      var splittedTitleFromSchema = schema.title.match(/^(.+) (.+)$/);\n\n      if (splittedTitleFromSchema) {\n        if (!configuration.name) {\n          var _splittedTitleFromSch = _slicedToArray(splittedTitleFromSchema, 2);\n\n          headerNameFromSchema = _splittedTitleFromSch[1];\n        }\n\n        if (!configuration.baseDataPath) {\n          var _splittedTitleFromSch2 = _slicedToArray(splittedTitleFromSchema, 3);\n\n          baseDataPathFromSchema = _splittedTitleFromSch2[2];\n        }\n      }\n    }\n    /** @type {string} */\n\n\n    _this.headerName = configuration.name || headerNameFromSchema || \"Object\";\n    /** @type {string} */\n\n    _this.baseDataPath = configuration.baseDataPath || baseDataPathFromSchema || \"configuration\";\n    /** @type {PostFormatter | null} */\n\n    _this.postFormatter = configuration.postFormatter || null;\n    var header = \"Invalid \".concat(_this.baseDataPath, \" object. \").concat(_this.headerName, \" has been initialized using \").concat(getArticle(_this.baseDataPath), \" \").concat(_this.baseDataPath, \" object that does not match the API schema.\\n\");\n    /** @type {string} */\n\n    _this.message = \"\".concat(header).concat(_this.formatValidationErrors(errors));\n    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);\n    return _this;\n  }\n  /**\n   * @param {string} path\n   * @returns {Schema}\n   */\n\n\n  _createClass(ValidationError, [{\n    key: \"getSchemaPart\",\n    value: function getSchemaPart(path) {\n      var newPath = path.split(\"/\");\n      var schemaPart = this.schema;\n\n      for (var i = 1; i < newPath.length; i++) {\n        var inner = schemaPart[\n        /** @type {keyof Schema} */\n        newPath[i]];\n\n        if (!inner) {\n          break;\n        }\n\n        schemaPart = inner;\n      }\n\n      return schemaPart;\n    }\n    /**\n     * @param {Schema} schema\n     * @param {boolean} logic\n     * @param {Array<Object>} prevSchemas\n     * @returns {string}\n     */\n\n  }, {\n    key: \"formatSchema\",\n    value: function formatSchema(schema) {\n      var _this2 = this;\n\n      var logic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var prevSchemas = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      var newLogic = logic;\n\n      var formatInnerSchema =\n      /**\n       *\n       * @param {Object} innerSchema\n       * @param {boolean=} addSelf\n       * @returns {string}\n       */\n      function formatInnerSchema(innerSchema, addSelf) {\n        if (!addSelf) {\n          return _this2.formatSchema(innerSchema, newLogic, prevSchemas);\n        }\n\n        if (prevSchemas.includes(innerSchema)) {\n          return \"(recursive)\";\n        }\n\n        return _this2.formatSchema(innerSchema, newLogic, prevSchemas.concat(schema));\n      };\n\n      if (hasNotInSchema(schema) && !likeObject(schema)) {\n        if (canApplyNot(schema.not)) {\n          newLogic = !logic;\n          return formatInnerSchema(schema.not);\n        }\n\n        var needApplyLogicHere = !schema.not.not;\n        var prefix = logic ? \"\" : \"non \";\n        newLogic = !logic;\n        return needApplyLogicHere ? prefix + formatInnerSchema(schema.not) : formatInnerSchema(schema.not);\n      }\n\n      if (\n      /** @type {Schema & {instanceof: string | Array<string>}} */\n      schema.instanceof) {\n        var value =\n        /** @type {Schema & {instanceof: string | Array<string>}} */\n        schema.instanceof;\n        var values = !Array.isArray(value) ? [value] : value;\n        return values.map(\n        /**\n         * @param {string} item\n         * @returns {string}\n         */\n        function (item) {\n          return item === \"Function\" ? \"function\" : item;\n        }).join(\" | \");\n      }\n\n      if (schema.enum) {\n        return (\n          /** @type {Array<any>} */\n          schema.enum.map(function (item) {\n            return JSON.stringify(item);\n          }).join(\" | \")\n        );\n      }\n\n      if (typeof schema.const !== \"undefined\") {\n        return JSON.stringify(schema.const);\n      }\n\n      if (schema.oneOf) {\n        return (\n          /** @type {Array<Schema>} */\n          schema.oneOf.map(function (item) {\n            return formatInnerSchema(item, true);\n          }).join(\" | \")\n        );\n      }\n\n      if (schema.anyOf) {\n        return (\n          /** @type {Array<Schema>} */\n          schema.anyOf.map(function (item) {\n            return formatInnerSchema(item, true);\n          }).join(\" | \")\n        );\n      }\n\n      if (schema.allOf) {\n        return (\n          /** @type {Array<Schema>} */\n          schema.allOf.map(function (item) {\n            return formatInnerSchema(item, true);\n          }).join(\" & \")\n        );\n      }\n\n      if (\n      /** @type {JSONSchema7} */\n      schema.if) {\n        var ifValue =\n        /** @type {JSONSchema7} */\n        schema.if,\n            thenValue =\n        /** @type {JSONSchema7} */\n        schema.then,\n            elseValue =\n        /** @type {JSONSchema7} */\n        schema.else;\n        return \"\".concat(ifValue ? \"if \".concat(formatInnerSchema(ifValue)) : \"\").concat(thenValue ? \" then \".concat(formatInnerSchema(thenValue)) : \"\").concat(elseValue ? \" else \".concat(formatInnerSchema(elseValue)) : \"\");\n      }\n\n      if (schema.$ref) {\n        return formatInnerSchema(this.getSchemaPart(schema.$ref), true);\n      }\n\n      if (likeNumber(schema) || likeInteger(schema)) {\n        var _getHints = getHints(schema, logic),\n            _getHints2 = _toArray(_getHints),\n            type = _getHints2[0],\n            hints = _getHints2.slice(1);\n\n        var str = \"\".concat(type).concat(hints.length > 0 ? \" \".concat(formatHints(hints)) : \"\");\n        return logic ? str : hints.length > 0 ? \"non-\".concat(type, \" | \").concat(str) : \"non-\".concat(type);\n      }\n\n      if (likeString(schema)) {\n        var _getHints3 = getHints(schema, logic),\n            _getHints4 = _toArray(_getHints3),\n            _type = _getHints4[0],\n            _hints = _getHints4.slice(1);\n\n        var _str = \"\".concat(_type).concat(_hints.length > 0 ? \" \".concat(formatHints(_hints)) : \"\");\n\n        return logic ? _str : _str === \"string\" ? \"non-string\" : \"non-string | \".concat(_str);\n      }\n\n      if (likeBoolean(schema)) {\n        return \"\".concat(logic ? \"\" : \"non-\", \"boolean\");\n      }\n\n      if (likeArray(schema)) {\n        // not logic already applied in formatValidationError\n        newLogic = true;\n        var _hints2 = [];\n\n        if (typeof schema.minItems === \"number\") {\n          _hints2.push(\"should not have fewer than \".concat(schema.minItems, \" item\").concat(schema.minItems > 1 ? \"s\" : \"\"));\n        }\n\n        if (typeof schema.maxItems === \"number\") {\n          _hints2.push(\"should not have more than \".concat(schema.maxItems, \" item\").concat(schema.maxItems > 1 ? \"s\" : \"\"));\n        }\n\n        if (schema.uniqueItems) {\n          _hints2.push(\"should not have duplicate items\");\n        }\n\n        var hasAdditionalItems = typeof schema.additionalItems === \"undefined\" || Boolean(schema.additionalItems);\n        var items = \"\";\n\n        if (schema.items) {\n          if (Array.isArray(schema.items) && schema.items.length > 0) {\n            items = \"\".concat(\n            /** @type {Array<Schema>} */\n            schema.items.map(function (item) {\n              return formatInnerSchema(item);\n            }).join(\", \"));\n\n            if (hasAdditionalItems) {\n              if (schema.additionalItems && isObject(schema.additionalItems) && Object.keys(schema.additionalItems).length > 0) {\n                _hints2.push(\"additional items should be \".concat(formatInnerSchema(schema.additionalItems)));\n              }\n            }\n          } else if (schema.items && Object.keys(schema.items).length > 0) {\n            // \"additionalItems\" is ignored\n            items = \"\".concat(formatInnerSchema(schema.items));\n          } else {\n            // Fallback for empty `items` value\n            items = \"any\";\n          }\n        } else {\n          // \"additionalItems\" is ignored\n          items = \"any\";\n        }\n\n        if (schema.contains && Object.keys(schema.contains).length > 0) {\n          _hints2.push(\"should contains at least one \".concat(this.formatSchema(schema.contains), \" item\"));\n        }\n\n        return \"[\".concat(items).concat(hasAdditionalItems ? \", ...\" : \"\", \"]\").concat(_hints2.length > 0 ? \" (\".concat(_hints2.join(\", \"), \")\") : \"\");\n      }\n\n      if (likeObject(schema)) {\n        // not logic already applied in formatValidationError\n        newLogic = true;\n        var _hints3 = [];\n\n        if (typeof schema.minProperties === \"number\") {\n          _hints3.push(\"should not have fewer than \".concat(schema.minProperties, \" \").concat(schema.minProperties > 1 ? \"properties\" : \"property\"));\n        }\n\n        if (typeof schema.maxProperties === \"number\") {\n          _hints3.push(\"should not have more than \".concat(schema.maxProperties, \" \").concat(schema.minProperties && schema.minProperties > 1 ? \"properties\" : \"property\"));\n        }\n\n        if (schema.patternProperties && Object.keys(schema.patternProperties).length > 0) {\n          var patternProperties = Object.keys(schema.patternProperties);\n\n          _hints3.push(\"additional property names should match pattern\".concat(patternProperties.length > 1 ? \"s\" : \"\", \" \").concat(patternProperties.map(function (pattern) {\n            return JSON.stringify(pattern);\n          }).join(\" | \")));\n        }\n\n        var properties = schema.properties ? Object.keys(schema.properties) : [];\n        /** @type {Array<string>} */\n        // @ts-ignore\n\n        var required = schema.required ? schema.required : [];\n\n        var allProperties = _toConsumableArray(new Set(\n        /** @type {Array<string>} */\n        [].concat(required).concat(properties)));\n\n        var objectStructure = allProperties.map(function (property) {\n          var isRequired = required.includes(property); // Some properties need quotes, maybe we should add check\n          // Maybe we should output type of property (`foo: string`), but it is looks very unreadable\n\n          return \"\".concat(property).concat(isRequired ? \"\" : \"?\");\n        }).concat(typeof schema.additionalProperties === \"undefined\" || Boolean(schema.additionalProperties) ? schema.additionalProperties && isObject(schema.additionalProperties) ? [\"<key>: \".concat(formatInnerSchema(schema.additionalProperties))] : [\"…\"] : []).join(\", \");\n        var dependencies =\n        /** @type {Schema & {patternRequired?: Array<string>;}} */\n        schema.dependencies,\n            propertyNames =\n        /** @type {Schema & {patternRequired?: Array<string>;}} */\n        schema.propertyNames,\n            patternRequired =\n        /** @type {Schema & {patternRequired?: Array<string>;}} */\n        schema.patternRequired;\n\n        if (dependencies) {\n          Object.keys(dependencies).forEach(function (dependencyName) {\n            var dependency = dependencies[dependencyName];\n\n            if (Array.isArray(dependency)) {\n              _hints3.push(\"should have \".concat(dependency.length > 1 ? \"properties\" : \"property\", \" \").concat(dependency.map(function (dep) {\n                return \"'\".concat(dep, \"'\");\n              }).join(\", \"), \" when property '\").concat(dependencyName, \"' is present\"));\n            } else {\n              _hints3.push(\"should be valid according to the schema \".concat(formatInnerSchema(dependency), \" when property '\").concat(dependencyName, \"' is present\"));\n            }\n          });\n        }\n\n        if (propertyNames && Object.keys(propertyNames).length > 0) {\n          _hints3.push(\"each property name should match format \".concat(JSON.stringify(schema.propertyNames.format)));\n        }\n\n        if (patternRequired && patternRequired.length > 0) {\n          _hints3.push(\"should have property matching pattern \".concat(patternRequired.map(\n          /**\n           * @param {string} item\n           * @returns {string}\n           */\n          function (item) {\n            return JSON.stringify(item);\n          })));\n        }\n\n        return \"object {\".concat(objectStructure ? \" \".concat(objectStructure, \" \") : \"\", \"}\").concat(_hints3.length > 0 ? \" (\".concat(_hints3.join(\", \"), \")\") : \"\");\n      }\n\n      if (likeNull(schema)) {\n        return \"\".concat(logic ? \"\" : \"non-\", \"null\");\n      }\n\n      if (Array.isArray(schema.type)) {\n        // not logic already applied in formatValidationError\n        return \"\".concat(schema.type.join(\" | \"));\n      } // Fallback for unknown keywords\n      // not logic already applied in formatValidationError\n\n      /* istanbul ignore next */\n\n\n      return JSON.stringify(schema, null, 2);\n    }\n    /**\n     * @param {Schema=} schemaPart\n     * @param {(boolean | Array<string>)=} additionalPath\n     * @param {boolean=} needDot\n     * @param {boolean=} logic\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getSchemaPartText\",\n    value: function getSchemaPartText(schemaPart, additionalPath) {\n      var needDot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var logic = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n      if (!schemaPart) {\n        return \"\";\n      }\n\n      if (Array.isArray(additionalPath)) {\n        for (var i = 0; i < additionalPath.length; i++) {\n          /** @type {Schema | undefined} */\n          var inner = schemaPart[\n          /** @type {keyof Schema} */\n          additionalPath[i]];\n\n          if (inner) {\n            // eslint-disable-next-line no-param-reassign\n            schemaPart = inner;\n          } else {\n            break;\n          }\n        }\n      }\n\n      while (schemaPart.$ref) {\n        // eslint-disable-next-line no-param-reassign\n        schemaPart = this.getSchemaPart(schemaPart.$ref);\n      }\n\n      var schemaText = \"\".concat(this.formatSchema(schemaPart, logic)).concat(needDot ? \".\" : \"\");\n\n      if (schemaPart.description) {\n        schemaText += \"\\n-> \".concat(schemaPart.description);\n      }\n\n      if (schemaPart.link) {\n        schemaText += \"\\n-> Read more at \".concat(schemaPart.link);\n      }\n\n      return schemaText;\n    }\n    /**\n     * @param {Schema=} schemaPart\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getSchemaPartDescription\",\n    value: function getSchemaPartDescription(schemaPart) {\n      if (!schemaPart) {\n        return \"\";\n      }\n\n      while (schemaPart.$ref) {\n        // eslint-disable-next-line no-param-reassign\n        schemaPart = this.getSchemaPart(schemaPart.$ref);\n      }\n\n      var schemaText = \"\";\n\n      if (schemaPart.description) {\n        schemaText += \"\\n-> \".concat(schemaPart.description);\n      }\n\n      if (schemaPart.link) {\n        schemaText += \"\\n-> Read more at \".concat(schemaPart.link);\n      }\n\n      return schemaText;\n    }\n    /**\n     * @param {SchemaUtilErrorObject} error\n     * @returns {string}\n     */\n\n  }, {\n    key: \"formatValidationError\",\n    value: function formatValidationError(error) {\n      var _this3 = this;\n\n      var keyword = error.keyword,\n          errorInstancePath = error.instancePath;\n      var splittedInstancePath = errorInstancePath.split(\"/\");\n      /**\n       * @type {Array<string>}\n       */\n\n      var defaultValue = [];\n      var prettyInstancePath = splittedInstancePath.reduce(function (acc, val) {\n        if (val.length > 0) {\n          if (isNumeric(val)) {\n            acc.push(\"[\".concat(val, \"]\"));\n          } else if (/^\\[/.test(val)) {\n            acc.push(val);\n          } else {\n            acc.push(\".\".concat(val));\n          }\n        }\n\n        return acc;\n      }, defaultValue).join(\"\");\n      var instancePath = \"\".concat(this.baseDataPath).concat(prettyInstancePath); // const { keyword, instancePath: errorInstancePath } = error;\n      // const instancePath = `${this.baseDataPath}${errorInstancePath.replace(/\\//g, '.')}`;\n\n      switch (keyword) {\n        case \"type\":\n          {\n            var parentSchema = error.parentSchema,\n                params = error.params; // eslint-disable-next-line default-case\n\n            switch (params.type) {\n              case \"number\":\n                return \"\".concat(instancePath, \" should be a \").concat(this.getSchemaPartText(parentSchema, false, true));\n\n              case \"integer\":\n                return \"\".concat(instancePath, \" should be an \").concat(this.getSchemaPartText(parentSchema, false, true));\n\n              case \"string\":\n                return \"\".concat(instancePath, \" should be a \").concat(this.getSchemaPartText(parentSchema, false, true));\n\n              case \"boolean\":\n                return \"\".concat(instancePath, \" should be a \").concat(this.getSchemaPartText(parentSchema, false, true));\n\n              case \"array\":\n                return \"\".concat(instancePath, \" should be an array:\\n\").concat(this.getSchemaPartText(parentSchema));\n\n              case \"object\":\n                return \"\".concat(instancePath, \" should be an object:\\n\").concat(this.getSchemaPartText(parentSchema));\n\n              case \"null\":\n                return \"\".concat(instancePath, \" should be a \").concat(this.getSchemaPartText(parentSchema, false, true));\n\n              default:\n                return \"\".concat(instancePath, \" should be:\\n\").concat(this.getSchemaPartText(parentSchema));\n            }\n          }\n\n        case \"instanceof\":\n          {\n            var _parentSchema = error.parentSchema;\n            return \"\".concat(instancePath, \" should be an instance of \").concat(this.getSchemaPartText(_parentSchema, false, true));\n          }\n\n        case \"pattern\":\n          {\n            var _params = error.params,\n                _parentSchema2 = error.parentSchema;\n            var pattern = _params.pattern;\n            return \"\".concat(instancePath, \" should match pattern \").concat(JSON.stringify(pattern)).concat(getSchemaNonTypes(_parentSchema2), \".\").concat(this.getSchemaPartDescription(_parentSchema2));\n          }\n\n        case \"format\":\n          {\n            var _params2 = error.params,\n                _parentSchema3 = error.parentSchema;\n            var format = _params2.format;\n            return \"\".concat(instancePath, \" should match format \").concat(JSON.stringify(format)).concat(getSchemaNonTypes(_parentSchema3), \".\").concat(this.getSchemaPartDescription(_parentSchema3));\n          }\n\n        case \"formatMinimum\":\n        case \"formatExclusiveMinimum\":\n        case \"formatMaximum\":\n        case \"formatExclusiveMaximum\":\n          {\n            var _params3 = error.params,\n                _parentSchema4 = error.parentSchema;\n            var comparison = _params3.comparison,\n                limit = _params3.limit;\n            return \"\".concat(instancePath, \" should be \").concat(comparison, \" \").concat(JSON.stringify(limit)).concat(getSchemaNonTypes(_parentSchema4), \".\").concat(this.getSchemaPartDescription(_parentSchema4));\n          }\n\n        case \"minimum\":\n        case \"maximum\":\n        case \"exclusiveMinimum\":\n        case \"exclusiveMaximum\":\n          {\n            var _parentSchema5 = error.parentSchema,\n                _params4 = error.params;\n            var _comparison = _params4.comparison,\n                _limit = _params4.limit;\n\n            var _getHints5 = getHints(\n            /** @type {Schema} */\n            _parentSchema5, true),\n                _getHints6 = _toArray(_getHints5),\n                hints = _getHints6.slice(1);\n\n            if (hints.length === 0) {\n              hints.push(\"should be \".concat(_comparison, \" \").concat(_limit));\n            }\n\n            return \"\".concat(instancePath, \" \").concat(hints.join(\" \")).concat(getSchemaNonTypes(_parentSchema5), \".\").concat(this.getSchemaPartDescription(_parentSchema5));\n          }\n\n        case \"multipleOf\":\n          {\n            var _params5 = error.params,\n                _parentSchema6 = error.parentSchema;\n            var multipleOf = _params5.multipleOf;\n            return \"\".concat(instancePath, \" should be multiple of \").concat(multipleOf).concat(getSchemaNonTypes(_parentSchema6), \".\").concat(this.getSchemaPartDescription(_parentSchema6));\n          }\n\n        case \"patternRequired\":\n          {\n            var _params6 = error.params,\n                _parentSchema7 = error.parentSchema;\n            var missingPattern = _params6.missingPattern;\n            return \"\".concat(instancePath, \" should have property matching pattern \").concat(JSON.stringify(missingPattern)).concat(getSchemaNonTypes(_parentSchema7), \".\").concat(this.getSchemaPartDescription(_parentSchema7));\n          }\n\n        case \"minLength\":\n          {\n            var _params7 = error.params,\n                _parentSchema8 = error.parentSchema;\n            var _limit2 = _params7.limit;\n\n            if (_limit2 === 1) {\n              return \"\".concat(instancePath, \" should be a non-empty string\").concat(getSchemaNonTypes(_parentSchema8), \".\").concat(this.getSchemaPartDescription(_parentSchema8));\n            }\n\n            var length = _limit2 - 1;\n            return \"\".concat(instancePath, \" should be longer than \").concat(length, \" character\").concat(length > 1 ? \"s\" : \"\").concat(getSchemaNonTypes(_parentSchema8), \".\").concat(this.getSchemaPartDescription(_parentSchema8));\n          }\n\n        case \"minItems\":\n          {\n            var _params8 = error.params,\n                _parentSchema9 = error.parentSchema;\n            var _limit3 = _params8.limit;\n\n            if (_limit3 === 1) {\n              return \"\".concat(instancePath, \" should be a non-empty array\").concat(getSchemaNonTypes(_parentSchema9), \".\").concat(this.getSchemaPartDescription(_parentSchema9));\n            }\n\n            return \"\".concat(instancePath, \" should not have fewer than \").concat(_limit3, \" items\").concat(getSchemaNonTypes(_parentSchema9), \".\").concat(this.getSchemaPartDescription(_parentSchema9));\n          }\n\n        case \"minProperties\":\n          {\n            var _params9 = error.params,\n                _parentSchema10 = error.parentSchema;\n            var _limit4 = _params9.limit;\n\n            if (_limit4 === 1) {\n              return \"\".concat(instancePath, \" should be a non-empty object\").concat(getSchemaNonTypes(_parentSchema10), \".\").concat(this.getSchemaPartDescription(_parentSchema10));\n            }\n\n            return \"\".concat(instancePath, \" should not have fewer than \").concat(_limit4, \" properties\").concat(getSchemaNonTypes(_parentSchema10), \".\").concat(this.getSchemaPartDescription(_parentSchema10));\n          }\n\n        case \"maxLength\":\n          {\n            var _params10 = error.params,\n                _parentSchema11 = error.parentSchema;\n            var _limit5 = _params10.limit;\n            var max = _limit5 + 1;\n            return \"\".concat(instancePath, \" should be shorter than \").concat(max, \" character\").concat(max > 1 ? \"s\" : \"\").concat(getSchemaNonTypes(_parentSchema11), \".\").concat(this.getSchemaPartDescription(_parentSchema11));\n          }\n\n        case \"maxItems\":\n          {\n            var _params11 = error.params,\n                _parentSchema12 = error.parentSchema;\n            var _limit6 = _params11.limit;\n            return \"\".concat(instancePath, \" should not have more than \").concat(_limit6, \" items\").concat(getSchemaNonTypes(_parentSchema12), \".\").concat(this.getSchemaPartDescription(_parentSchema12));\n          }\n\n        case \"maxProperties\":\n          {\n            var _params12 = error.params,\n                _parentSchema13 = error.parentSchema;\n            var _limit7 = _params12.limit;\n            return \"\".concat(instancePath, \" should not have more than \").concat(_limit7, \" properties\").concat(getSchemaNonTypes(_parentSchema13), \".\").concat(this.getSchemaPartDescription(_parentSchema13));\n          }\n\n        case \"uniqueItems\":\n          {\n            var _params13 = error.params,\n                _parentSchema14 = error.parentSchema;\n            var i = _params13.i;\n            return \"\".concat(instancePath, \" should not contain the item '\").concat(\n            /** @type {{ data: Array<any> }} **/\n            error.data[i], \"' twice\").concat(getSchemaNonTypes(_parentSchema14), \".\").concat(this.getSchemaPartDescription(_parentSchema14));\n          }\n\n        case \"additionalItems\":\n          {\n            var _params14 = error.params,\n                _parentSchema15 = error.parentSchema;\n            var _limit8 = _params14.limit;\n            return \"\".concat(instancePath, \" should not have more than \").concat(_limit8, \" items\").concat(getSchemaNonTypes(_parentSchema15), \". These items are valid:\\n\").concat(this.getSchemaPartText(_parentSchema15));\n          }\n\n        case \"contains\":\n          {\n            var _parentSchema16 = error.parentSchema;\n            return \"\".concat(instancePath, \" should contains at least one \").concat(this.getSchemaPartText(_parentSchema16, [\"contains\"]), \" item\").concat(getSchemaNonTypes(_parentSchema16), \".\");\n          }\n\n        case \"required\":\n          {\n            var _parentSchema17 = error.parentSchema,\n                _params15 = error.params;\n\n            var missingProperty = _params15.missingProperty.replace(/^\\./, \"\");\n\n            var hasProperty = _parentSchema17 && Boolean(\n            /** @type {Schema} */\n            _parentSchema17.properties &&\n            /** @type {Schema} */\n            _parentSchema17.properties[missingProperty]);\n\n            return \"\".concat(instancePath, \" misses the property '\").concat(missingProperty, \"'\").concat(getSchemaNonTypes(_parentSchema17), \".\").concat(hasProperty ? \" Should be:\\n\".concat(this.getSchemaPartText(_parentSchema17, [\"properties\", missingProperty])) : this.getSchemaPartDescription(_parentSchema17));\n          }\n\n        case \"additionalProperties\":\n          {\n            var _params16 = error.params,\n                _parentSchema18 = error.parentSchema;\n            var additionalProperty = _params16.additionalProperty;\n            return \"\".concat(instancePath, \" has an unknown property '\").concat(additionalProperty, \"'\").concat(getSchemaNonTypes(_parentSchema18), \". These properties are valid:\\n\").concat(this.getSchemaPartText(_parentSchema18));\n          }\n\n        case \"dependencies\":\n          {\n            var _params17 = error.params,\n                _parentSchema19 = error.parentSchema;\n            var property = _params17.property,\n                deps = _params17.deps;\n            var dependencies = deps.split(\",\").map(\n            /**\n             * @param {string} dep\n             * @returns {string}\n             */\n            function (dep) {\n              return \"'\".concat(dep.trim(), \"'\");\n            }).join(\", \");\n            return \"\".concat(instancePath, \" should have properties \").concat(dependencies, \" when property '\").concat(property, \"' is present\").concat(getSchemaNonTypes(_parentSchema19), \".\").concat(this.getSchemaPartDescription(_parentSchema19));\n          }\n\n        case \"propertyNames\":\n          {\n            var _params18 = error.params,\n                _parentSchema20 = error.parentSchema,\n                schema = error.schema;\n            var propertyName = _params18.propertyName;\n            return \"\".concat(instancePath, \" property name '\").concat(propertyName, \"' is invalid\").concat(getSchemaNonTypes(_parentSchema20), \". Property names should be match format \").concat(JSON.stringify(schema.format), \".\").concat(this.getSchemaPartDescription(_parentSchema20));\n          }\n\n        case \"enum\":\n          {\n            var _parentSchema21 = error.parentSchema;\n\n            if (_parentSchema21 &&\n            /** @type {Schema} */\n            _parentSchema21.enum &&\n            /** @type {Schema} */\n            _parentSchema21.enum.length === 1) {\n              return \"\".concat(instancePath, \" should be \").concat(this.getSchemaPartText(_parentSchema21, false, true));\n            }\n\n            return \"\".concat(instancePath, \" should be one of these:\\n\").concat(this.getSchemaPartText(_parentSchema21));\n          }\n\n        case \"const\":\n          {\n            var _parentSchema22 = error.parentSchema;\n            return \"\".concat(instancePath, \" should be equal to constant \").concat(this.getSchemaPartText(_parentSchema22, false, true));\n          }\n\n        case \"not\":\n          {\n            var postfix = likeObject(\n            /** @type {Schema} */\n            error.parentSchema) ? \"\\n\".concat(this.getSchemaPartText(error.parentSchema)) : \"\";\n            var schemaOutput = this.getSchemaPartText(error.schema, false, false, false);\n\n            if (canApplyNot(error.schema)) {\n              return \"\".concat(instancePath, \" should be any \").concat(schemaOutput).concat(postfix, \".\");\n            }\n\n            var _schema = error.schema,\n                _parentSchema23 = error.parentSchema;\n            return \"\".concat(instancePath, \" should not be \").concat(this.getSchemaPartText(_schema, false, true)).concat(_parentSchema23 && likeObject(_parentSchema23) ? \"\\n\".concat(this.getSchemaPartText(_parentSchema23)) : \"\");\n          }\n\n        case \"oneOf\":\n        case \"anyOf\":\n          {\n            var _parentSchema24 = error.parentSchema,\n                children = error.children;\n\n            if (children && children.length > 0) {\n              if (error.schema.length === 1) {\n                var lastChild = children[children.length - 1];\n                var remainingChildren = children.slice(0, children.length - 1);\n                return this.formatValidationError(Object.assign({}, lastChild, {\n                  children: remainingChildren,\n                  parentSchema: Object.assign({}, _parentSchema24, lastChild.parentSchema)\n                }));\n              }\n\n              var filteredChildren = filterChildren(children);\n\n              if (filteredChildren.length === 1) {\n                return this.formatValidationError(filteredChildren[0]);\n              }\n\n              filteredChildren = groupChildrenByFirstChild(filteredChildren);\n              return \"\".concat(instancePath, \" should be one of these:\\n\").concat(this.getSchemaPartText(_parentSchema24), \"\\nDetails:\\n\").concat(filteredChildren.map(\n              /**\n               * @param {SchemaUtilErrorObject} nestedError\n               * @returns {string}\n               */\n              function (nestedError) {\n                return \" * \".concat(indent(_this3.formatValidationError(nestedError), \"   \"));\n              }).join(\"\\n\"));\n            }\n\n            return \"\".concat(instancePath, \" should be one of these:\\n\").concat(this.getSchemaPartText(_parentSchema24));\n          }\n\n        case \"if\":\n          {\n            var _params19 = error.params,\n                _parentSchema25 = error.parentSchema;\n            var failingKeyword = _params19.failingKeyword;\n            return \"\".concat(instancePath, \" should match \\\"\").concat(failingKeyword, \"\\\" schema:\\n\").concat(this.getSchemaPartText(_parentSchema25, [failingKeyword]));\n          }\n\n        case \"absolutePath\":\n          {\n            var message = error.message,\n                _parentSchema26 = error.parentSchema;\n            return \"\".concat(instancePath, \": \").concat(message).concat(this.getSchemaPartDescription(_parentSchema26));\n          }\n\n        /* istanbul ignore next */\n\n        default:\n          {\n            var _message = error.message,\n                _parentSchema27 = error.parentSchema;\n            var ErrorInJSON = JSON.stringify(error, null, 2); // For `custom`, `false schema`, `$ref` keywords\n            // Fallback for unknown keywords\n\n            return \"\".concat(instancePath, \" \").concat(_message, \" (\").concat(ErrorInJSON, \").\\n\").concat(this.getSchemaPartText(_parentSchema27, false));\n          }\n      }\n    }\n    /**\n     * @param {Array<SchemaUtilErrorObject>} errors\n     * @returns {string}\n     */\n\n  }, {\n    key: \"formatValidationErrors\",\n    value: function formatValidationErrors(errors) {\n      var _this4 = this;\n\n      return errors.map(function (error) {\n        var formattedError = _this4.formatValidationError(error);\n\n        if (_this4.postFormatter) {\n          formattedError = _this4.postFormatter(formattedError, error);\n        }\n\n        return \" - \".concat(indent(formattedError, \"   \"));\n      }).join(\"\\n\");\n    }\n  }]);\n\n  return ValidationError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar _default = ValidationError;\nexports.default = _default;","map":{"version":3,"sources":["E:/DW/wasai-cinema/node_modules/webpack-dev-server/node_modules/schema-utils/dist/ValidationError.js"],"names":["Object","defineProperty","exports","value","default","require","stringHints","numberHints","SPECIFICITY","type","not","oneOf","anyOf","if","enum","const","instanceof","required","pattern","patternRequired","format","formatMinimum","formatMaximum","minimum","exclusiveMinimum","maximum","exclusiveMaximum","multipleOf","uniqueItems","contains","minLength","maxLength","minItems","maxItems","minProperties","maxProperties","dependencies","propertyNames","additionalItems","additionalProperties","absolutePath","isNumeric","test","filterMax","array","fn","evaluatedMax","reduce","max","item","Math","filter","filterChildren","children","newChildren","error","instancePath","length","keyword","findAllChildren","schemaPaths","i","predicate","schemaPath","indexOf","every","refs","extractRefs","childrenStart","slice","concat","schema","Array","isArray","map","$ref","s","groupChildrenByFirstChild","result","child","push","assign","reverse","indent","str","prefix","replace","hasNotInSchema","findFirstTypedSchema","canApplyNot","typedSchema","likeNumber","likeInteger","likeString","likeNull","likeBoolean","isObject","maybeObj","likeArray","items","likeObject","properties","patternProperties","getArticle","getSchemaNonTypes","formatHints","hints","join","getHints","logic","ValidationError","errors","configuration","name","headerNameFromSchema","baseDataPathFromSchema","title","baseDataPath","splittedTitleFromSchema","match","headerName","postFormatter","header","message","formatValidationErrors","Error","captureStackTrace","constructor","path","newPath","split","schemaPart","inner","prevSchemas","newLogic","formatInnerSchema","innerSchema","addSelf","formatSchema","includes","needApplyLogicHere","values","JSON","stringify","allOf","ifValue","thenValue","then","elseValue","else","getSchemaPart","hasAdditionalItems","Boolean","keys","allProperties","Set","objectStructure","property","isRequired","forEach","dependencyName","dependency","dep","additionalPath","needDot","schemaText","description","link","errorInstancePath","splittedInstancePath","defaultValue","prettyInstancePath","acc","val","parentSchema","params","getSchemaPartText","getSchemaPartDescription","comparison","limit","missingPattern","data","missingProperty","hasProperty","additionalProperty","deps","trim","propertyName","postfix","schemaOutput","lastChild","remainingChildren","formatValidationError","filteredChildren","nestedError","failingKeyword","ErrorInJSON","formattedError","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nconst {\n  stringHints,\n  numberHints\n} = require(\"./util/hints\");\n/** @typedef {import(\"json-schema\").JSONSchema6} JSONSchema6 */\n\n/** @typedef {import(\"json-schema\").JSONSchema7} JSONSchema7 */\n\n/** @typedef {import(\"./validate\").Schema} Schema */\n\n/** @typedef {import(\"./validate\").ValidationErrorConfiguration} ValidationErrorConfiguration */\n\n/** @typedef {import(\"./validate\").PostFormatter} PostFormatter */\n\n/** @typedef {import(\"./validate\").SchemaUtilErrorObject} SchemaUtilErrorObject */\n\n/** @enum {number} */\n\n\nconst SPECIFICITY = {\n  type: 1,\n  not: 1,\n  oneOf: 1,\n  anyOf: 1,\n  if: 1,\n  enum: 1,\n  const: 1,\n  instanceof: 1,\n  required: 2,\n  pattern: 2,\n  patternRequired: 2,\n  format: 2,\n  formatMinimum: 2,\n  formatMaximum: 2,\n  minimum: 2,\n  exclusiveMinimum: 2,\n  maximum: 2,\n  exclusiveMaximum: 2,\n  multipleOf: 2,\n  uniqueItems: 2,\n  contains: 2,\n  minLength: 2,\n  maxLength: 2,\n  minItems: 2,\n  maxItems: 2,\n  minProperties: 2,\n  maxProperties: 2,\n  dependencies: 2,\n  propertyNames: 2,\n  additionalItems: 2,\n  additionalProperties: 2,\n  absolutePath: 2\n};\n/**\n * @param {string} value\n * @returns {value is number}\n */\n\nfunction isNumeric(value) {\n  return /^-?\\d+$/.test(value);\n}\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} array\n * @param {(item: SchemaUtilErrorObject) => number} fn\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction filterMax(array, fn) {\n  const evaluatedMax = array.reduce((max, item) => Math.max(max, fn(item)), 0);\n  return array.filter(item => fn(item) === evaluatedMax);\n}\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} children\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction filterChildren(children) {\n  let newChildren = children;\n  newChildren = filterMax(newChildren,\n  /**\n   *\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  error => error.instancePath ? error.instancePath.length : 0);\n  newChildren = filterMax(newChildren,\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  error => SPECIFICITY[\n  /** @type {keyof typeof SPECIFICITY} */\n  error.keyword] || 2);\n  return newChildren;\n}\n/**\n * Find all children errors\n * @param {Array<SchemaUtilErrorObject>} children\n * @param {Array<string>} schemaPaths\n * @return {number} returns index of first child\n */\n\n\nfunction findAllChildren(children, schemaPaths) {\n  let i = children.length - 1;\n\n  const predicate =\n  /**\n   * @param {string} schemaPath\n   * @returns {boolean}\n   */\n  schemaPath => children[i].schemaPath.indexOf(schemaPath) !== 0;\n\n  while (i > -1 && !schemaPaths.every(predicate)) {\n    if (children[i].keyword === \"anyOf\" || children[i].keyword === \"oneOf\") {\n      const refs = extractRefs(children[i]);\n      const childrenStart = findAllChildren(children.slice(0, i), refs.concat(children[i].schemaPath));\n      i = childrenStart - 1;\n    } else {\n      i -= 1;\n    }\n  }\n\n  return i + 1;\n}\n/**\n * Extracts all refs from schema\n * @param {SchemaUtilErrorObject} error\n * @return {Array<string>}\n */\n\n\nfunction extractRefs(error) {\n  const {\n    schema\n  } = error;\n\n  if (!Array.isArray(schema)) {\n    return [];\n  }\n\n  return schema.map(({\n    $ref\n  }) => $ref).filter(s => s);\n}\n/**\n * Groups children by their first level parent (assuming that error is root)\n * @param {Array<SchemaUtilErrorObject>} children\n * @return {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction groupChildrenByFirstChild(children) {\n  const result = [];\n  let i = children.length - 1;\n\n  while (i > 0) {\n    const child = children[i];\n\n    if (child.keyword === \"anyOf\" || child.keyword === \"oneOf\") {\n      const refs = extractRefs(child);\n      const childrenStart = findAllChildren(children.slice(0, i), refs.concat(child.schemaPath));\n\n      if (childrenStart !== i) {\n        result.push(Object.assign({}, child, {\n          children: children.slice(childrenStart, i)\n        }));\n        i = childrenStart;\n      } else {\n        result.push(child);\n      }\n    } else {\n      result.push(child);\n    }\n\n    i -= 1;\n  }\n\n  if (i === 0) {\n    result.push(children[i]);\n  }\n\n  return result.reverse();\n}\n/**\n * @param {string} str\n * @param {string} prefix\n * @returns {string}\n */\n\n\nfunction indent(str, prefix) {\n  return str.replace(/\\n(?!$)/g, `\\n${prefix}`);\n}\n/**\n * @param {Schema} schema\n * @returns {schema is (Schema & {not: Schema})}\n */\n\n\nfunction hasNotInSchema(schema) {\n  return !!schema.not;\n}\n/**\n * @param {Schema} schema\n * @return {Schema}\n */\n\n\nfunction findFirstTypedSchema(schema) {\n  if (hasNotInSchema(schema)) {\n    return findFirstTypedSchema(schema.not);\n  }\n\n  return schema;\n}\n/**\n * @param {Schema} schema\n * @return {boolean}\n */\n\n\nfunction canApplyNot(schema) {\n  const typedSchema = findFirstTypedSchema(schema);\n  return likeNumber(typedSchema) || likeInteger(typedSchema) || likeString(typedSchema) || likeNull(typedSchema) || likeBoolean(typedSchema);\n}\n/**\n * @param {any} maybeObj\n * @returns {boolean}\n */\n\n\nfunction isObject(maybeObj) {\n  return typeof maybeObj === \"object\" && maybeObj !== null;\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeNumber(schema) {\n  return schema.type === \"number\" || typeof schema.minimum !== \"undefined\" || typeof schema.exclusiveMinimum !== \"undefined\" || typeof schema.maximum !== \"undefined\" || typeof schema.exclusiveMaximum !== \"undefined\" || typeof schema.multipleOf !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeInteger(schema) {\n  return schema.type === \"integer\" || typeof schema.minimum !== \"undefined\" || typeof schema.exclusiveMinimum !== \"undefined\" || typeof schema.maximum !== \"undefined\" || typeof schema.exclusiveMaximum !== \"undefined\" || typeof schema.multipleOf !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeString(schema) {\n  return schema.type === \"string\" || typeof schema.minLength !== \"undefined\" || typeof schema.maxLength !== \"undefined\" || typeof schema.pattern !== \"undefined\" || typeof schema.format !== \"undefined\" || typeof schema.formatMinimum !== \"undefined\" || typeof schema.formatMaximum !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeBoolean(schema) {\n  return schema.type === \"boolean\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeArray(schema) {\n  return schema.type === \"array\" || typeof schema.minItems === \"number\" || typeof schema.maxItems === \"number\" || typeof schema.uniqueItems !== \"undefined\" || typeof schema.items !== \"undefined\" || typeof schema.additionalItems !== \"undefined\" || typeof schema.contains !== \"undefined\";\n}\n/**\n * @param {Schema & {patternRequired?: Array<string>}} schema\n * @returns {boolean}\n */\n\n\nfunction likeObject(schema) {\n  return schema.type === \"object\" || typeof schema.minProperties !== \"undefined\" || typeof schema.maxProperties !== \"undefined\" || typeof schema.required !== \"undefined\" || typeof schema.properties !== \"undefined\" || typeof schema.patternProperties !== \"undefined\" || typeof schema.additionalProperties !== \"undefined\" || typeof schema.dependencies !== \"undefined\" || typeof schema.propertyNames !== \"undefined\" || typeof schema.patternRequired !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeNull(schema) {\n  return schema.type === \"null\";\n}\n/**\n * @param {string} type\n * @returns {string}\n */\n\n\nfunction getArticle(type) {\n  if (/^[aeiou]/i.test(type)) {\n    return \"an\";\n  }\n\n  return \"a\";\n}\n/**\n * @param {Schema=} schema\n * @returns {string}\n */\n\n\nfunction getSchemaNonTypes(schema) {\n  if (!schema) {\n    return \"\";\n  }\n\n  if (!schema.type) {\n    if (likeNumber(schema) || likeInteger(schema)) {\n      return \" | should be any non-number\";\n    }\n\n    if (likeString(schema)) {\n      return \" | should be any non-string\";\n    }\n\n    if (likeArray(schema)) {\n      return \" | should be any non-array\";\n    }\n\n    if (likeObject(schema)) {\n      return \" | should be any non-object\";\n    }\n  }\n\n  return \"\";\n}\n/**\n * @param {Array<string>} hints\n * @returns {string}\n */\n\n\nfunction formatHints(hints) {\n  return hints.length > 0 ? `(${hints.join(\", \")})` : \"\";\n}\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @returns {string[]}\n */\n\n\nfunction getHints(schema, logic) {\n  if (likeNumber(schema) || likeInteger(schema)) {\n    return numberHints(schema, logic);\n  } else if (likeString(schema)) {\n    return stringHints(schema, logic);\n  }\n\n  return [];\n}\n\nclass ValidationError extends Error {\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @param {Schema} schema\n   * @param {ValidationErrorConfiguration} configuration\n   */\n  constructor(errors, schema, configuration = {}) {\n    super();\n    /** @type {string} */\n\n    this.name = \"ValidationError\";\n    /** @type {Array<SchemaUtilErrorObject>} */\n\n    this.errors = errors;\n    /** @type {Schema} */\n\n    this.schema = schema;\n    let headerNameFromSchema;\n    let baseDataPathFromSchema;\n\n    if (schema.title && (!configuration.name || !configuration.baseDataPath)) {\n      const splittedTitleFromSchema = schema.title.match(/^(.+) (.+)$/);\n\n      if (splittedTitleFromSchema) {\n        if (!configuration.name) {\n          [, headerNameFromSchema] = splittedTitleFromSchema;\n        }\n\n        if (!configuration.baseDataPath) {\n          [,, baseDataPathFromSchema] = splittedTitleFromSchema;\n        }\n      }\n    }\n    /** @type {string} */\n\n\n    this.headerName = configuration.name || headerNameFromSchema || \"Object\";\n    /** @type {string} */\n\n    this.baseDataPath = configuration.baseDataPath || baseDataPathFromSchema || \"configuration\";\n    /** @type {PostFormatter | null} */\n\n    this.postFormatter = configuration.postFormatter || null;\n    const header = `Invalid ${this.baseDataPath} object. ${this.headerName} has been initialized using ${getArticle(this.baseDataPath)} ${this.baseDataPath} object that does not match the API schema.\\n`;\n    /** @type {string} */\n\n    this.message = `${header}${this.formatValidationErrors(errors)}`;\n    Error.captureStackTrace(this, this.constructor);\n  }\n  /**\n   * @param {string} path\n   * @returns {Schema}\n   */\n\n\n  getSchemaPart(path) {\n    const newPath = path.split(\"/\");\n    let schemaPart = this.schema;\n\n    for (let i = 1; i < newPath.length; i++) {\n      const inner = schemaPart[\n      /** @type {keyof Schema} */\n      newPath[i]];\n\n      if (!inner) {\n        break;\n      }\n\n      schemaPart = inner;\n    }\n\n    return schemaPart;\n  }\n  /**\n   * @param {Schema} schema\n   * @param {boolean} logic\n   * @param {Array<Object>} prevSchemas\n   * @returns {string}\n   */\n\n\n  formatSchema(schema, logic = true, prevSchemas = []) {\n    let newLogic = logic;\n\n    const formatInnerSchema =\n    /**\n     *\n     * @param {Object} innerSchema\n     * @param {boolean=} addSelf\n     * @returns {string}\n     */\n    (innerSchema, addSelf) => {\n      if (!addSelf) {\n        return this.formatSchema(innerSchema, newLogic, prevSchemas);\n      }\n\n      if (prevSchemas.includes(innerSchema)) {\n        return \"(recursive)\";\n      }\n\n      return this.formatSchema(innerSchema, newLogic, prevSchemas.concat(schema));\n    };\n\n    if (hasNotInSchema(schema) && !likeObject(schema)) {\n      if (canApplyNot(schema.not)) {\n        newLogic = !logic;\n        return formatInnerSchema(schema.not);\n      }\n\n      const needApplyLogicHere = !schema.not.not;\n      const prefix = logic ? \"\" : \"non \";\n      newLogic = !logic;\n      return needApplyLogicHere ? prefix + formatInnerSchema(schema.not) : formatInnerSchema(schema.not);\n    }\n\n    if (\n    /** @type {Schema & {instanceof: string | Array<string>}} */\n    schema.instanceof) {\n      const {\n        instanceof: value\n      } =\n      /** @type {Schema & {instanceof: string | Array<string>}} */\n      schema;\n      const values = !Array.isArray(value) ? [value] : value;\n      return values.map(\n      /**\n       * @param {string} item\n       * @returns {string}\n       */\n      item => item === \"Function\" ? \"function\" : item).join(\" | \");\n    }\n\n    if (schema.enum) {\n      return (\n        /** @type {Array<any>} */\n        schema.enum.map(item => JSON.stringify(item)).join(\" | \")\n      );\n    }\n\n    if (typeof schema.const !== \"undefined\") {\n      return JSON.stringify(schema.const);\n    }\n\n    if (schema.oneOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.oneOf.map(item => formatInnerSchema(item, true)).join(\" | \")\n      );\n    }\n\n    if (schema.anyOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.anyOf.map(item => formatInnerSchema(item, true)).join(\" | \")\n      );\n    }\n\n    if (schema.allOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.allOf.map(item => formatInnerSchema(item, true)).join(\" & \")\n      );\n    }\n\n    if (\n    /** @type {JSONSchema7} */\n    schema.if) {\n      const {\n        if: ifValue,\n        then: thenValue,\n        else: elseValue\n      } =\n      /** @type {JSONSchema7} */\n      schema;\n      return `${ifValue ? `if ${formatInnerSchema(ifValue)}` : \"\"}${thenValue ? ` then ${formatInnerSchema(thenValue)}` : \"\"}${elseValue ? ` else ${formatInnerSchema(elseValue)}` : \"\"}`;\n    }\n\n    if (schema.$ref) {\n      return formatInnerSchema(this.getSchemaPart(schema.$ref), true);\n    }\n\n    if (likeNumber(schema) || likeInteger(schema)) {\n      const [type, ...hints] = getHints(schema, logic);\n      const str = `${type}${hints.length > 0 ? ` ${formatHints(hints)}` : \"\"}`;\n      return logic ? str : hints.length > 0 ? `non-${type} | ${str}` : `non-${type}`;\n    }\n\n    if (likeString(schema)) {\n      const [type, ...hints] = getHints(schema, logic);\n      const str = `${type}${hints.length > 0 ? ` ${formatHints(hints)}` : \"\"}`;\n      return logic ? str : str === \"string\" ? \"non-string\" : `non-string | ${str}`;\n    }\n\n    if (likeBoolean(schema)) {\n      return `${logic ? \"\" : \"non-\"}boolean`;\n    }\n\n    if (likeArray(schema)) {\n      // not logic already applied in formatValidationError\n      newLogic = true;\n      const hints = [];\n\n      if (typeof schema.minItems === \"number\") {\n        hints.push(`should not have fewer than ${schema.minItems} item${schema.minItems > 1 ? \"s\" : \"\"}`);\n      }\n\n      if (typeof schema.maxItems === \"number\") {\n        hints.push(`should not have more than ${schema.maxItems} item${schema.maxItems > 1 ? \"s\" : \"\"}`);\n      }\n\n      if (schema.uniqueItems) {\n        hints.push(\"should not have duplicate items\");\n      }\n\n      const hasAdditionalItems = typeof schema.additionalItems === \"undefined\" || Boolean(schema.additionalItems);\n      let items = \"\";\n\n      if (schema.items) {\n        if (Array.isArray(schema.items) && schema.items.length > 0) {\n          items = `${\n          /** @type {Array<Schema>} */\n          schema.items.map(item => formatInnerSchema(item)).join(\", \")}`;\n\n          if (hasAdditionalItems) {\n            if (schema.additionalItems && isObject(schema.additionalItems) && Object.keys(schema.additionalItems).length > 0) {\n              hints.push(`additional items should be ${formatInnerSchema(schema.additionalItems)}`);\n            }\n          }\n        } else if (schema.items && Object.keys(schema.items).length > 0) {\n          // \"additionalItems\" is ignored\n          items = `${formatInnerSchema(schema.items)}`;\n        } else {\n          // Fallback for empty `items` value\n          items = \"any\";\n        }\n      } else {\n        // \"additionalItems\" is ignored\n        items = \"any\";\n      }\n\n      if (schema.contains && Object.keys(schema.contains).length > 0) {\n        hints.push(`should contains at least one ${this.formatSchema(schema.contains)} item`);\n      }\n\n      return `[${items}${hasAdditionalItems ? \", ...\" : \"\"}]${hints.length > 0 ? ` (${hints.join(\", \")})` : \"\"}`;\n    }\n\n    if (likeObject(schema)) {\n      // not logic already applied in formatValidationError\n      newLogic = true;\n      const hints = [];\n\n      if (typeof schema.minProperties === \"number\") {\n        hints.push(`should not have fewer than ${schema.minProperties} ${schema.minProperties > 1 ? \"properties\" : \"property\"}`);\n      }\n\n      if (typeof schema.maxProperties === \"number\") {\n        hints.push(`should not have more than ${schema.maxProperties} ${schema.minProperties && schema.minProperties > 1 ? \"properties\" : \"property\"}`);\n      }\n\n      if (schema.patternProperties && Object.keys(schema.patternProperties).length > 0) {\n        const patternProperties = Object.keys(schema.patternProperties);\n        hints.push(`additional property names should match pattern${patternProperties.length > 1 ? \"s\" : \"\"} ${patternProperties.map(pattern => JSON.stringify(pattern)).join(\" | \")}`);\n      }\n\n      const properties = schema.properties ? Object.keys(schema.properties) : [];\n      /** @type {Array<string>} */\n      // @ts-ignore\n\n      const required = schema.required ? schema.required : [];\n      const allProperties = [...new Set(\n      /** @type {Array<string>} */\n      [].concat(required).concat(properties))];\n      const objectStructure = allProperties.map(property => {\n        const isRequired = required.includes(property); // Some properties need quotes, maybe we should add check\n        // Maybe we should output type of property (`foo: string`), but it is looks very unreadable\n\n        return `${property}${isRequired ? \"\" : \"?\"}`;\n      }).concat(typeof schema.additionalProperties === \"undefined\" || Boolean(schema.additionalProperties) ? schema.additionalProperties && isObject(schema.additionalProperties) ? [`<key>: ${formatInnerSchema(schema.additionalProperties)}`] : [\"…\"] : []).join(\", \");\n      const {\n        dependencies,\n        propertyNames,\n        patternRequired\n      } =\n      /** @type {Schema & {patternRequired?: Array<string>;}} */\n      schema;\n\n      if (dependencies) {\n        Object.keys(dependencies).forEach(dependencyName => {\n          const dependency = dependencies[dependencyName];\n\n          if (Array.isArray(dependency)) {\n            hints.push(`should have ${dependency.length > 1 ? \"properties\" : \"property\"} ${dependency.map(dep => `'${dep}'`).join(\", \")} when property '${dependencyName}' is present`);\n          } else {\n            hints.push(`should be valid according to the schema ${formatInnerSchema(dependency)} when property '${dependencyName}' is present`);\n          }\n        });\n      }\n\n      if (propertyNames && Object.keys(propertyNames).length > 0) {\n        hints.push(`each property name should match format ${JSON.stringify(schema.propertyNames.format)}`);\n      }\n\n      if (patternRequired && patternRequired.length > 0) {\n        hints.push(`should have property matching pattern ${patternRequired.map(\n        /**\n         * @param {string} item\n         * @returns {string}\n         */\n        item => JSON.stringify(item))}`);\n      }\n\n      return `object {${objectStructure ? ` ${objectStructure} ` : \"\"}}${hints.length > 0 ? ` (${hints.join(\", \")})` : \"\"}`;\n    }\n\n    if (likeNull(schema)) {\n      return `${logic ? \"\" : \"non-\"}null`;\n    }\n\n    if (Array.isArray(schema.type)) {\n      // not logic already applied in formatValidationError\n      return `${schema.type.join(\" | \")}`;\n    } // Fallback for unknown keywords\n    // not logic already applied in formatValidationError\n\n    /* istanbul ignore next */\n\n\n    return JSON.stringify(schema, null, 2);\n  }\n  /**\n   * @param {Schema=} schemaPart\n   * @param {(boolean | Array<string>)=} additionalPath\n   * @param {boolean=} needDot\n   * @param {boolean=} logic\n   * @returns {string}\n   */\n\n\n  getSchemaPartText(schemaPart, additionalPath, needDot = false, logic = true) {\n    if (!schemaPart) {\n      return \"\";\n    }\n\n    if (Array.isArray(additionalPath)) {\n      for (let i = 0; i < additionalPath.length; i++) {\n        /** @type {Schema | undefined} */\n        const inner = schemaPart[\n        /** @type {keyof Schema} */\n        additionalPath[i]];\n\n        if (inner) {\n          // eslint-disable-next-line no-param-reassign\n          schemaPart = inner;\n        } else {\n          break;\n        }\n      }\n    }\n\n    while (schemaPart.$ref) {\n      // eslint-disable-next-line no-param-reassign\n      schemaPart = this.getSchemaPart(schemaPart.$ref);\n    }\n\n    let schemaText = `${this.formatSchema(schemaPart, logic)}${needDot ? \".\" : \"\"}`;\n\n    if (schemaPart.description) {\n      schemaText += `\\n-> ${schemaPart.description}`;\n    }\n\n    if (schemaPart.link) {\n      schemaText += `\\n-> Read more at ${schemaPart.link}`;\n    }\n\n    return schemaText;\n  }\n  /**\n   * @param {Schema=} schemaPart\n   * @returns {string}\n   */\n\n\n  getSchemaPartDescription(schemaPart) {\n    if (!schemaPart) {\n      return \"\";\n    }\n\n    while (schemaPart.$ref) {\n      // eslint-disable-next-line no-param-reassign\n      schemaPart = this.getSchemaPart(schemaPart.$ref);\n    }\n\n    let schemaText = \"\";\n\n    if (schemaPart.description) {\n      schemaText += `\\n-> ${schemaPart.description}`;\n    }\n\n    if (schemaPart.link) {\n      schemaText += `\\n-> Read more at ${schemaPart.link}`;\n    }\n\n    return schemaText;\n  }\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {string}\n   */\n\n\n  formatValidationError(error) {\n    const {\n      keyword,\n      instancePath: errorInstancePath\n    } = error;\n    const splittedInstancePath = errorInstancePath.split(\"/\");\n    /**\n     * @type {Array<string>}\n     */\n\n    const defaultValue = [];\n    const prettyInstancePath = splittedInstancePath.reduce((acc, val) => {\n      if (val.length > 0) {\n        if (isNumeric(val)) {\n          acc.push(`[${val}]`);\n        } else if (/^\\[/.test(val)) {\n          acc.push(val);\n        } else {\n          acc.push(`.${val}`);\n        }\n      }\n\n      return acc;\n    }, defaultValue).join(\"\");\n    const instancePath = `${this.baseDataPath}${prettyInstancePath}`; // const { keyword, instancePath: errorInstancePath } = error;\n    // const instancePath = `${this.baseDataPath}${errorInstancePath.replace(/\\//g, '.')}`;\n\n    switch (keyword) {\n      case \"type\":\n        {\n          const {\n            parentSchema,\n            params\n          } = error; // eslint-disable-next-line default-case\n\n          switch (params.type) {\n            case \"number\":\n              return `${instancePath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"integer\":\n              return `${instancePath} should be an ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"string\":\n              return `${instancePath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"boolean\":\n              return `${instancePath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"array\":\n              return `${instancePath} should be an array:\\n${this.getSchemaPartText(parentSchema)}`;\n\n            case \"object\":\n              return `${instancePath} should be an object:\\n${this.getSchemaPartText(parentSchema)}`;\n\n            case \"null\":\n              return `${instancePath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            default:\n              return `${instancePath} should be:\\n${this.getSchemaPartText(parentSchema)}`;\n          }\n        }\n\n      case \"instanceof\":\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${instancePath} should be an instance of ${this.getSchemaPartText(parentSchema, false, true)}`;\n        }\n\n      case \"pattern\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            pattern\n          } = params;\n          return `${instancePath} should match pattern ${JSON.stringify(pattern)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"format\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            format\n          } = params;\n          return `${instancePath} should match format ${JSON.stringify(format)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"formatMinimum\":\n      case \"formatExclusiveMinimum\":\n      case \"formatMaximum\":\n      case \"formatExclusiveMaximum\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            comparison,\n            limit\n          } = params;\n          return `${instancePath} should be ${comparison} ${JSON.stringify(limit)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minimum\":\n      case \"maximum\":\n      case \"exclusiveMinimum\":\n      case \"exclusiveMaximum\":\n        {\n          const {\n            parentSchema,\n            params\n          } = error;\n          const {\n            comparison,\n            limit\n          } = params;\n          const [, ...hints] = getHints(\n          /** @type {Schema} */\n          parentSchema, true);\n\n          if (hints.length === 0) {\n            hints.push(`should be ${comparison} ${limit}`);\n          }\n\n          return `${instancePath} ${hints.join(\" \")}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"multipleOf\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            multipleOf\n          } = params;\n          return `${instancePath} should be multiple of ${multipleOf}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"patternRequired\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            missingPattern\n          } = params;\n          return `${instancePath} should have property matching pattern ${JSON.stringify(missingPattern)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minLength\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = params;\n\n          if (limit === 1) {\n            return `${instancePath} should be a non-empty string${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          const length = limit - 1;\n          return `${instancePath} should be longer than ${length} character${length > 1 ? \"s\" : \"\"}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = params;\n\n          if (limit === 1) {\n            return `${instancePath} should be a non-empty array${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          return `${instancePath} should not have fewer than ${limit} items${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minProperties\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = params;\n\n          if (limit === 1) {\n            return `${instancePath} should be a non-empty object${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          return `${instancePath} should not have fewer than ${limit} properties${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"maxLength\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = params;\n          const max = limit + 1;\n          return `${instancePath} should be shorter than ${max} character${max > 1 ? \"s\" : \"\"}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"maxItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = params;\n          return `${instancePath} should not have more than ${limit} items${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"maxProperties\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = params;\n          return `${instancePath} should not have more than ${limit} properties${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"uniqueItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            i\n          } = params;\n          return `${instancePath} should not contain the item '${\n          /** @type {{ data: Array<any> }} **/\n          error.data[i]}' twice${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"additionalItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = params;\n          return `${instancePath} should not have more than ${limit} items${getSchemaNonTypes(parentSchema)}. These items are valid:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"contains\":\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${instancePath} should contains at least one ${this.getSchemaPartText(parentSchema, [\"contains\"])} item${getSchemaNonTypes(parentSchema)}.`;\n        }\n\n      case \"required\":\n        {\n          const {\n            parentSchema,\n            params\n          } = error;\n          const missingProperty = params.missingProperty.replace(/^\\./, \"\");\n          const hasProperty = parentSchema && Boolean(\n          /** @type {Schema} */\n          parentSchema.properties &&\n          /** @type {Schema} */\n          parentSchema.properties[missingProperty]);\n          return `${instancePath} misses the property '${missingProperty}'${getSchemaNonTypes(parentSchema)}.${hasProperty ? ` Should be:\\n${this.getSchemaPartText(parentSchema, [\"properties\", missingProperty])}` : this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"additionalProperties\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            additionalProperty\n          } = params;\n          return `${instancePath} has an unknown property '${additionalProperty}'${getSchemaNonTypes(parentSchema)}. These properties are valid:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"dependencies\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            property,\n            deps\n          } = params;\n          const dependencies = deps.split(\",\").map(\n          /**\n           * @param {string} dep\n           * @returns {string}\n           */\n          dep => `'${dep.trim()}'`).join(\", \");\n          return `${instancePath} should have properties ${dependencies} when property '${property}' is present${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"propertyNames\":\n        {\n          const {\n            params,\n            parentSchema,\n            schema\n          } = error;\n          const {\n            propertyName\n          } = params;\n          return `${instancePath} property name '${propertyName}' is invalid${getSchemaNonTypes(parentSchema)}. Property names should be match format ${JSON.stringify(schema.format)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"enum\":\n        {\n          const {\n            parentSchema\n          } = error;\n\n          if (parentSchema &&\n          /** @type {Schema} */\n          parentSchema.enum &&\n          /** @type {Schema} */\n          parentSchema.enum.length === 1) {\n            return `${instancePath} should be ${this.getSchemaPartText(parentSchema, false, true)}`;\n          }\n\n          return `${instancePath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"const\":\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${instancePath} should be equal to constant ${this.getSchemaPartText(parentSchema, false, true)}`;\n        }\n\n      case \"not\":\n        {\n          const postfix = likeObject(\n          /** @type {Schema} */\n          error.parentSchema) ? `\\n${this.getSchemaPartText(error.parentSchema)}` : \"\";\n          const schemaOutput = this.getSchemaPartText(error.schema, false, false, false);\n\n          if (canApplyNot(error.schema)) {\n            return `${instancePath} should be any ${schemaOutput}${postfix}.`;\n          }\n\n          const {\n            schema,\n            parentSchema\n          } = error;\n          return `${instancePath} should not be ${this.getSchemaPartText(schema, false, true)}${parentSchema && likeObject(parentSchema) ? `\\n${this.getSchemaPartText(parentSchema)}` : \"\"}`;\n        }\n\n      case \"oneOf\":\n      case \"anyOf\":\n        {\n          const {\n            parentSchema,\n            children\n          } = error;\n\n          if (children && children.length > 0) {\n            if (error.schema.length === 1) {\n              const lastChild = children[children.length - 1];\n              const remainingChildren = children.slice(0, children.length - 1);\n              return this.formatValidationError(Object.assign({}, lastChild, {\n                children: remainingChildren,\n                parentSchema: Object.assign({}, parentSchema, lastChild.parentSchema)\n              }));\n            }\n\n            let filteredChildren = filterChildren(children);\n\n            if (filteredChildren.length === 1) {\n              return this.formatValidationError(filteredChildren[0]);\n            }\n\n            filteredChildren = groupChildrenByFirstChild(filteredChildren);\n            return `${instancePath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}\\nDetails:\\n${filteredChildren.map(\n            /**\n             * @param {SchemaUtilErrorObject} nestedError\n             * @returns {string}\n             */\n            nestedError => ` * ${indent(this.formatValidationError(nestedError), \"   \")}`).join(\"\\n\")}`;\n          }\n\n          return `${instancePath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"if\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            failingKeyword\n          } = params;\n          return `${instancePath} should match \"${failingKeyword}\" schema:\\n${this.getSchemaPartText(parentSchema, [failingKeyword])}`;\n        }\n\n      case \"absolutePath\":\n        {\n          const {\n            message,\n            parentSchema\n          } = error;\n          return `${instancePath}: ${message}${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      /* istanbul ignore next */\n\n      default:\n        {\n          const {\n            message,\n            parentSchema\n          } = error;\n          const ErrorInJSON = JSON.stringify(error, null, 2); // For `custom`, `false schema`, `$ref` keywords\n          // Fallback for unknown keywords\n\n          return `${instancePath} ${message} (${ErrorInJSON}).\\n${this.getSchemaPartText(parentSchema, false)}`;\n        }\n    }\n  }\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @returns {string}\n   */\n\n\n  formatValidationErrors(errors) {\n    return errors.map(error => {\n      let formattedError = this.formatValidationError(error);\n\n      if (this.postFormatter) {\n        formattedError = this.postFormatter(formattedError, error);\n      }\n\n      return ` - ${indent(formattedError, \"   \")}`;\n    }).join(\"\\n\");\n  }\n\n}\n\nvar _default = ValidationError;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}