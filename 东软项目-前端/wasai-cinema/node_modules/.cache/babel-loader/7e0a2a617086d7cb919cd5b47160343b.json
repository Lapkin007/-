{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.regexp.test.js\");\n\nrequire(\"core-js/modules/es.array.map.js\");\n\nrequire(\"core-js/modules/es.array.join.js\");\n\nrequire(\"core-js/modules/es.array.concat.js\");\n\nrequire(\"core-js/modules/es.array.slice.js\");\n\nvar path = require('path');\n\nvar resolveCommand = require('./util/resolveCommand');\n\nvar escape = require('./util/escape');\n\nvar readShebang = require('./util/readShebang');\n\nvar isWin = process.platform === 'win32';\nvar isExecutableRegExp = /\\.(?:com|exe)$/i;\nvar isCmdShimRegExp = /node_modules[\\\\/].bin[\\\\/][^\\\\/]+\\.cmd$/i;\n\nfunction detectShebang(parsed) {\n  parsed.file = resolveCommand(parsed);\n  var shebang = parsed.file && readShebang(parsed.file);\n\n  if (shebang) {\n    parsed.args.unshift(parsed.file);\n    parsed.command = shebang;\n    return resolveCommand(parsed);\n  }\n\n  return parsed.file;\n}\n\nfunction parseNonShell(parsed) {\n  if (!isWin) {\n    return parsed;\n  } // Detect & add support for shebangs\n\n\n  var commandFile = detectShebang(parsed); // We don't need a shell if the command filename is an executable\n\n  var needsShell = !isExecutableRegExp.test(commandFile); // If a shell is required, use cmd.exe and take care of escaping everything correctly\n  // Note that `forceShell` is an hidden option used only in tests\n\n  if (parsed.options.forceShell || needsShell) {\n    // Need to double escape meta chars if the command is a cmd-shim located in `node_modules/.bin/`\n    // The cmd-shim simply calls execute the package bin file with NodeJS, proxying any argument\n    // Because the escape of metachars with ^ gets interpreted when the cmd.exe is first called,\n    // we need to double escape them\n    var needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile); // Normalize posix paths into OS compatible paths (e.g.: foo/bar -> foo\\bar)\n    // This is necessary otherwise it will always fail with ENOENT in those cases\n\n    parsed.command = path.normalize(parsed.command); // Escape command & arguments\n\n    parsed.command = escape.command(parsed.command);\n    parsed.args = parsed.args.map(function (arg) {\n      return escape.argument(arg, needsDoubleEscapeMetaChars);\n    });\n    var shellCommand = [parsed.command].concat(parsed.args).join(' ');\n    parsed.args = ['/d', '/s', '/c', \"\\\"\".concat(shellCommand, \"\\\"\")];\n    parsed.command = process.env.comspec || 'cmd.exe';\n    parsed.options.windowsVerbatimArguments = true; // Tell node's spawn that the arguments are already escaped\n  }\n\n  return parsed;\n}\n\nfunction parse(command, args, options) {\n  // Normalize arguments, similar to nodejs\n  if (args && !Array.isArray(args)) {\n    options = args;\n    args = null;\n  }\n\n  args = args ? args.slice(0) : []; // Clone array to avoid changing the original\n\n  options = Object.assign({}, options); // Clone object to avoid changing the original\n  // Build our parsed object\n\n  var parsed = {\n    command: command,\n    args: args,\n    options: options,\n    file: undefined,\n    original: {\n      command: command,\n      args: args\n    }\n  }; // Delegate further parsing to shell or non-shell\n\n  return options.shell ? parsed : parseNonShell(parsed);\n}\n\nmodule.exports = parse;","map":{"version":3,"sources":["E:/DW/wasai-cinema/node_modules/default-gateway/node_modules/cross-spawn/lib/parse.js"],"names":["path","require","resolveCommand","escape","readShebang","isWin","process","platform","isExecutableRegExp","isCmdShimRegExp","detectShebang","parsed","file","shebang","args","unshift","command","parseNonShell","commandFile","needsShell","test","options","forceShell","needsDoubleEscapeMetaChars","normalize","map","arg","argument","shellCommand","concat","join","env","comspec","windowsVerbatimArguments","parse","Array","isArray","slice","Object","assign","undefined","original","shell","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst path = require('path');\nconst resolveCommand = require('./util/resolveCommand');\nconst escape = require('./util/escape');\nconst readShebang = require('./util/readShebang');\n\nconst isWin = process.platform === 'win32';\nconst isExecutableRegExp = /\\.(?:com|exe)$/i;\nconst isCmdShimRegExp = /node_modules[\\\\/].bin[\\\\/][^\\\\/]+\\.cmd$/i;\n\nfunction detectShebang(parsed) {\n    parsed.file = resolveCommand(parsed);\n\n    const shebang = parsed.file && readShebang(parsed.file);\n\n    if (shebang) {\n        parsed.args.unshift(parsed.file);\n        parsed.command = shebang;\n\n        return resolveCommand(parsed);\n    }\n\n    return parsed.file;\n}\n\nfunction parseNonShell(parsed) {\n    if (!isWin) {\n        return parsed;\n    }\n\n    // Detect & add support for shebangs\n    const commandFile = detectShebang(parsed);\n\n    // We don't need a shell if the command filename is an executable\n    const needsShell = !isExecutableRegExp.test(commandFile);\n\n    // If a shell is required, use cmd.exe and take care of escaping everything correctly\n    // Note that `forceShell` is an hidden option used only in tests\n    if (parsed.options.forceShell || needsShell) {\n        // Need to double escape meta chars if the command is a cmd-shim located in `node_modules/.bin/`\n        // The cmd-shim simply calls execute the package bin file with NodeJS, proxying any argument\n        // Because the escape of metachars with ^ gets interpreted when the cmd.exe is first called,\n        // we need to double escape them\n        const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);\n\n        // Normalize posix paths into OS compatible paths (e.g.: foo/bar -> foo\\bar)\n        // This is necessary otherwise it will always fail with ENOENT in those cases\n        parsed.command = path.normalize(parsed.command);\n\n        // Escape command & arguments\n        parsed.command = escape.command(parsed.command);\n        parsed.args = parsed.args.map((arg) => escape.argument(arg, needsDoubleEscapeMetaChars));\n\n        const shellCommand = [parsed.command].concat(parsed.args).join(' ');\n\n        parsed.args = ['/d', '/s', '/c', `\"${shellCommand}\"`];\n        parsed.command = process.env.comspec || 'cmd.exe';\n        parsed.options.windowsVerbatimArguments = true; // Tell node's spawn that the arguments are already escaped\n    }\n\n    return parsed;\n}\n\nfunction parse(command, args, options) {\n    // Normalize arguments, similar to nodejs\n    if (args && !Array.isArray(args)) {\n        options = args;\n        args = null;\n    }\n\n    args = args ? args.slice(0) : []; // Clone array to avoid changing the original\n    options = Object.assign({}, options); // Clone object to avoid changing the original\n\n    // Build our parsed object\n    const parsed = {\n        command,\n        args,\n        options,\n        file: undefined,\n        original: {\n            command,\n            args,\n        },\n    };\n\n    // Delegate further parsing to shell or non-shell\n    return options.shell ? parsed : parseNonShell(parsed);\n}\n\nmodule.exports = parse;\n"]},"metadata":{},"sourceType":"script"}