{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _createClass = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _classCallCheck = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _inherits = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nrequire(\"core-js/modules/es.array.splice.js\");\n\nvar sockjs = require(\"sockjs\");\n\nvar BaseServer = require(\"./BaseServer\");\n/** @typedef {import(\"../Server\").WebSocketServerConfiguration} WebSocketServerConfiguration */\n\n/** @typedef {import(\"../Server\").ClientConnection} ClientConnection */\n// Workaround for sockjs@~0.3.19\n// sockjs will remove Origin header, however Origin header is required for checking host.\n// See https://github.com/webpack/webpack-dev-server/issues/1604 for more information\n\n\n{\n  // @ts-ignore\n  var SockjsSession = require(\"sockjs/lib/transport\").Session;\n\n  var decorateConnection = SockjsSession.prototype.decorateConnection;\n  /**\n   * @param {import(\"http\").IncomingMessage} req\n   */\n  // eslint-disable-next-line func-names\n\n  SockjsSession.prototype.decorateConnection = function (req) {\n    decorateConnection.call(this, req);\n    var connection = this.connection;\n\n    if (connection.headers && !(\"origin\" in connection.headers) && \"origin\" in req.headers) {\n      connection.headers.origin = req.headers.origin;\n    }\n  };\n}\n\nmodule.exports = /*#__PURE__*/function (_BaseServer) {\n  _inherits(SockJSServer, _BaseServer);\n\n  var _super = _createSuper(SockJSServer);\n\n  // options has: error (function), debug (function), server (http/s server), path (string)\n\n  /**\n   * @param {import(\"../Server\")} server\n   */\n  function SockJSServer(server) {\n    var _this;\n\n    _classCallCheck(this, SockJSServer);\n\n    _this = _super.call(this, server);\n    _this.implementation = sockjs.createServer({\n      // Use provided up-to-date sockjs-client\n      sockjs_url: \"/__webpack_dev_server__/sockjs.bundle.js\",\n      // Default logger is very annoy. Limit useless logs.\n\n      /**\n       * @param {string} severity\n       * @param {string} line\n       */\n      log: function log(severity, line) {\n        if (severity === \"error\") {\n          _this.server.logger.error(line);\n        } else if (severity === \"info\") {\n          _this.server.logger.log(line);\n        } else {\n          _this.server.logger.debug(line);\n        }\n      }\n    });\n    /**\n     * @param {import(\"sockjs\").ServerOptions & { path?: string }} options\n     * @returns {string | undefined}\n     */\n\n    var getPrefix = function getPrefix(options) {\n      if (typeof options.prefix !== \"undefined\") {\n        return options.prefix;\n      }\n\n      return options.path;\n    };\n\n    var options = _objectSpread(_objectSpread({},\n    /** @type {WebSocketServerConfiguration} */\n    _this.server.options.webSocketServer.options), {}, {\n      prefix: getPrefix(\n      /** @type {NonNullable<WebSocketServerConfiguration[\"options\"]>} */\n\n      /** @type {WebSocketServerConfiguration} */\n      _this.server.options.webSocketServer.options)\n    });\n\n    _this.implementation.installHandlers(\n    /** @type {import(\"http\").Server} */\n    _this.server.server, options);\n\n    _this.implementation.on(\"connection\", function (client) {\n      // @ts-ignore\n      // Implement the the same API as for `ws`\n      client.send = client.write; // @ts-ignore\n\n      client.terminate = client.close;\n\n      _this.clients.push(\n      /** @type {ClientConnection} */\n      client);\n\n      client.on(\"close\", function () {\n        _this.clients.splice(_this.clients.indexOf(\n        /** @type {ClientConnection} */\n        client), 1);\n      });\n    }); // @ts-ignore\n\n\n    _this.implementation.close = function (callback) {\n      callback();\n    };\n\n    return _this;\n  }\n\n  return _createClass(SockJSServer);\n}(BaseServer);","map":{"version":3,"sources":["E:/DW/wasai-cinema/node_modules/webpack-dev-server/lib/servers/SockJSServer.js"],"names":["sockjs","require","BaseServer","SockjsSession","Session","decorateConnection","prototype","req","call","connection","headers","origin","module","exports","server","implementation","createServer","sockjs_url","log","severity","line","logger","error","debug","getPrefix","options","prefix","path","webSocketServer","installHandlers","on","client","send","write","terminate","close","clients","push","splice","indexOf","callback"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst sockjs = require(\"sockjs\");\nconst BaseServer = require(\"./BaseServer\");\n\n/** @typedef {import(\"../Server\").WebSocketServerConfiguration} WebSocketServerConfiguration */\n/** @typedef {import(\"../Server\").ClientConnection} ClientConnection */\n\n// Workaround for sockjs@~0.3.19\n// sockjs will remove Origin header, however Origin header is required for checking host.\n// See https://github.com/webpack/webpack-dev-server/issues/1604 for more information\n{\n  // @ts-ignore\n  const SockjsSession = require(\"sockjs/lib/transport\").Session;\n  const decorateConnection = SockjsSession.prototype.decorateConnection;\n\n  /**\n   * @param {import(\"http\").IncomingMessage} req\n   */\n  // eslint-disable-next-line func-names\n  SockjsSession.prototype.decorateConnection = function (req) {\n    decorateConnection.call(this, req);\n\n    const connection = this.connection;\n\n    if (\n      connection.headers &&\n      !(\"origin\" in connection.headers) &&\n      \"origin\" in req.headers\n    ) {\n      connection.headers.origin = req.headers.origin;\n    }\n  };\n}\n\nmodule.exports = class SockJSServer extends BaseServer {\n  // options has: error (function), debug (function), server (http/s server), path (string)\n  /**\n   * @param {import(\"../Server\")} server\n   */\n  constructor(server) {\n    super(server);\n\n    this.implementation = sockjs.createServer({\n      // Use provided up-to-date sockjs-client\n      sockjs_url: \"/__webpack_dev_server__/sockjs.bundle.js\",\n      // Default logger is very annoy. Limit useless logs.\n      /**\n       * @param {string} severity\n       * @param {string} line\n       */\n      log: (severity, line) => {\n        if (severity === \"error\") {\n          this.server.logger.error(line);\n        } else if (severity === \"info\") {\n          this.server.logger.log(line);\n        } else {\n          this.server.logger.debug(line);\n        }\n      },\n    });\n\n    /**\n     * @param {import(\"sockjs\").ServerOptions & { path?: string }} options\n     * @returns {string | undefined}\n     */\n    const getPrefix = (options) => {\n      if (typeof options.prefix !== \"undefined\") {\n        return options.prefix;\n      }\n\n      return options.path;\n    };\n\n    const options = {\n      .../** @type {WebSocketServerConfiguration} */\n      (this.server.options.webSocketServer).options,\n      prefix: getPrefix(\n        /** @type {NonNullable<WebSocketServerConfiguration[\"options\"]>} */\n        (\n          /** @type {WebSocketServerConfiguration} */\n          (this.server.options.webSocketServer).options\n        )\n      ),\n    };\n\n    this.implementation.installHandlers(\n      /** @type {import(\"http\").Server} */ (this.server.server),\n      options\n    );\n\n    this.implementation.on(\"connection\", (client) => {\n      // @ts-ignore\n      // Implement the the same API as for `ws`\n      client.send = client.write;\n      // @ts-ignore\n      client.terminate = client.close;\n\n      this.clients.push(/** @type {ClientConnection} */ (client));\n\n      client.on(\"close\", () => {\n        this.clients.splice(\n          this.clients.indexOf(/** @type {ClientConnection} */ (client)),\n          1\n        );\n      });\n    });\n\n    // @ts-ignore\n    this.implementation.close = (callback) => {\n      callback();\n    };\n  }\n};\n"]},"metadata":{},"sourceType":"script"}