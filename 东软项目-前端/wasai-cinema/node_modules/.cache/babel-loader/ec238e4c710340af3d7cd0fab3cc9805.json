{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.match.js\");\n\nrequire(\"core-js/modules/es.string.split.js\");\n\nrequire(\"core-js/modules/es.string.replace.js\");\n\nrequire(\"core-js/modules/es.array.concat.js\");\n\nvar shebangRegex = require('shebang-regex');\n\nmodule.exports = function () {\n  var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var match = string.match(shebangRegex);\n\n  if (!match) {\n    return null;\n  }\n\n  var _match$0$replace$spli = match[0].replace(/#! ?/, '').split(' '),\n      _match$0$replace$spli2 = _slicedToArray(_match$0$replace$spli, 2),\n      path = _match$0$replace$spli2[0],\n      argument = _match$0$replace$spli2[1];\n\n  var binary = path.split('/').pop();\n\n  if (binary === 'env') {\n    return argument;\n  }\n\n  return argument ? \"\".concat(binary, \" \").concat(argument) : binary;\n};","map":{"version":3,"sources":["E:/DW/wasai-cinema/node_modules/default-gateway/node_modules/shebang-command/index.js"],"names":["shebangRegex","require","module","exports","string","match","replace","split","path","argument","binary","pop"],"mappings":"AAAA;;;;;;;;;;;;;;AACA,IAAMA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA5B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,YAAiB;AAAA,MAAhBC,MAAgB,uEAAP,EAAO;AACjC,MAAMC,KAAK,GAAGD,MAAM,CAACC,KAAP,CAAaL,YAAb,CAAd;;AAEA,MAAI,CAACK,KAAL,EAAY;AACX,WAAO,IAAP;AACA;;AAED,8BAAyBA,KAAK,CAAC,CAAD,CAAL,CAASC,OAAT,CAAiB,MAAjB,EAAyB,EAAzB,EAA6BC,KAA7B,CAAmC,GAAnC,CAAzB;AAAA;AAAA,MAAOC,IAAP;AAAA,MAAaC,QAAb;;AACA,MAAMC,MAAM,GAAGF,IAAI,CAACD,KAAL,CAAW,GAAX,EAAgBI,GAAhB,EAAf;;AAEA,MAAID,MAAM,KAAK,KAAf,EAAsB;AACrB,WAAOD,QAAP;AACA;;AAED,SAAOA,QAAQ,aAAMC,MAAN,cAAgBD,QAAhB,IAA6BC,MAA5C;AACA,CAfD","sourcesContent":["'use strict';\nconst shebangRegex = require('shebang-regex');\n\nmodule.exports = (string = '') => {\n\tconst match = string.match(shebangRegex);\n\n\tif (!match) {\n\t\treturn null;\n\t}\n\n\tconst [path, argument] = match[0].replace(/#! ?/, '').split(' ');\n\tconst binary = path.split('/').pop();\n\n\tif (binary === 'env') {\n\t\treturn argument;\n\t}\n\n\treturn argument ? `${binary} ${argument}` : binary;\n};\n"]},"metadata":{},"sourceType":"script"}