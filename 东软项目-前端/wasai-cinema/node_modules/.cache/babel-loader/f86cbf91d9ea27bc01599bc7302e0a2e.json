{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nrequire(\"regenerator-runtime/runtime.js\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nvar execa = require(\"execa\");\n\nvar db2util = \"/QOpenSys/pkgs/bin/db2util\";\nvar sql = \"select NEXT_HOP, LOCAL_BINDING_INTERFACE from QSYS2.NETSTAT_ROUTE_INFO where ROUTE_TYPE='DFTROUTE' and NEXT_HOP!='*DIRECT' and CONNECTION_TYPE=?\";\n\nvar parse = function parse(stdout) {\n  var result;\n\n  try {\n    var resultObj = JSON.parse(stdout);\n    var gateway = resultObj.records[0].NEXT_HOP;\n    var iface = resultObj.records[0].LOCAL_BINDING_INTERFACE;\n    result = {\n      gateway: gateway,\n      iface: iface\n    };\n  } catch (_unused) {}\n\n  if (!result) {\n    throw new Error(\"Unable to determine default gateway\");\n  }\n\n  return result;\n};\n\nvar promise = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(family) {\n    var _yield$execa, stdout;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return execa(db2util, [sql, \"-p\", family, \"-o\", \"json\"]);\n\n          case 2:\n            _yield$execa = _context.sent;\n            stdout = _yield$execa.stdout;\n            return _context.abrupt(\"return\", parse(stdout));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function promise(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar sync = function sync(family) {\n  var _execa$sync = execa.sync(db2util, [sql, \"-p\", family, \"-o\", \"json\"]),\n      stdout = _execa$sync.stdout;\n\n  return parse(stdout);\n};\n\nmodule.exports.v4 = function () {\n  return promise(\"IPV4\");\n};\n\nmodule.exports.v6 = function () {\n  return promise(\"IPV6\");\n};\n\nmodule.exports.v4.sync = function () {\n  return sync(\"IPV4\");\n};\n\nmodule.exports.v6.sync = function () {\n  return sync(\"IPV6\");\n};","map":{"version":3,"sources":["E:/DW/wasai-cinema/node_modules/default-gateway/ibmi.js"],"names":["execa","require","db2util","sql","parse","stdout","result","resultObj","JSON","gateway","records","NEXT_HOP","iface","LOCAL_BINDING_INTERFACE","Error","promise","family","sync","module","exports","v4","v6"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMC,OAAO,GAAG,4BAAhB;AACA,IAAMC,GAAG,GAAG,kJAAZ;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,MAAM,EAAI;AACtB,MAAIC,MAAJ;;AACA,MAAI;AACF,QAAMC,SAAS,GAAGC,IAAI,CAACJ,KAAL,CAAWC,MAAX,CAAlB;AACA,QAAMI,OAAO,GAAGF,SAAS,CAACG,OAAV,CAAkB,CAAlB,EAAqBC,QAArC;AACA,QAAMC,KAAK,GAAGL,SAAS,CAACG,OAAV,CAAkB,CAAlB,EAAqBG,uBAAnC;AACAP,IAAAA,MAAM,GAAG;AAACG,MAAAA,OAAO,EAAPA,OAAD;AAAUG,MAAAA,KAAK,EAALA;AAAV,KAAT;AACD,GALD,CAKE,gBAAM,CAAE;;AACV,MAAI,CAACN,MAAL,EAAa;AACX,UAAM,IAAIQ,KAAJ,CAAU,qCAAV,CAAN;AACD;;AACD,SAAOR,MAAP;AACD,CAZD;;AAcA,IAAMS,OAAO;AAAA,qEAAG,iBAAMC,MAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACShB,KAAK,CAACE,OAAD,EAAU,CAACC,GAAD,EAAM,IAAN,EAAYa,MAAZ,EAAoB,IAApB,EAA0B,MAA1B,CAAV,CADd;;AAAA;AAAA;AACPX,YAAAA,MADO,gBACPA,MADO;AAAA,6CAEPD,KAAK,CAACC,MAAD,CAFE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPU,OAAO;AAAA;AAAA;AAAA,GAAb;;AAKA,IAAME,IAAI,GAAG,SAAPA,IAAO,CAAAD,MAAM,EAAI;AACrB,oBAAiBhB,KAAK,CAACiB,IAAN,CAAWf,OAAX,EAAoB,CAACC,GAAD,EAAM,IAAN,EAAYa,MAAZ,EAAoB,IAApB,EAA0B,MAA1B,CAApB,CAAjB;AAAA,MAAOX,MAAP,eAAOA,MAAP;;AACA,SAAOD,KAAK,CAACC,MAAD,CAAZ;AACD,CAHD;;AAKAa,MAAM,CAACC,OAAP,CAAeC,EAAf,GAAoB;AAAA,SAAML,OAAO,CAAC,MAAD,CAAb;AAAA,CAApB;;AACAG,MAAM,CAACC,OAAP,CAAeE,EAAf,GAAoB;AAAA,SAAMN,OAAO,CAAC,MAAD,CAAb;AAAA,CAApB;;AAEAG,MAAM,CAACC,OAAP,CAAeC,EAAf,CAAkBH,IAAlB,GAAyB;AAAA,SAAMA,IAAI,CAAC,MAAD,CAAV;AAAA,CAAzB;;AACAC,MAAM,CAACC,OAAP,CAAeE,EAAf,CAAkBJ,IAAlB,GAAyB;AAAA,SAAMA,IAAI,CAAC,MAAD,CAAV;AAAA,CAAzB","sourcesContent":["\"use strict\";\n\nconst execa = require(\"execa\");\n\nconst db2util = \"/QOpenSys/pkgs/bin/db2util\";\nconst sql = \"select NEXT_HOP, LOCAL_BINDING_INTERFACE from QSYS2.NETSTAT_ROUTE_INFO where ROUTE_TYPE='DFTROUTE' and NEXT_HOP!='*DIRECT' and CONNECTION_TYPE=?\";\n\nconst parse = stdout => {\n  let result;\n  try {\n    const resultObj = JSON.parse(stdout);\n    const gateway = resultObj.records[0].NEXT_HOP;\n    const iface = resultObj.records[0].LOCAL_BINDING_INTERFACE;\n    result = {gateway, iface};\n  } catch {}\n  if (!result) {\n    throw new Error(\"Unable to determine default gateway\");\n  }\n  return result;\n};\n\nconst promise = async family => {\n  const {stdout} = await execa(db2util, [sql, \"-p\", family, \"-o\", \"json\"]);\n  return parse(stdout);\n};\n\nconst sync = family => {\n  const {stdout} = execa.sync(db2util, [sql, \"-p\", family, \"-o\", \"json\"]);\n  return parse(stdout);\n};\n\nmodule.exports.v4 = () => promise(\"IPV4\");\nmodule.exports.v6 = () => promise(\"IPV6\");\n\nmodule.exports.v4.sync = () => sync(\"IPV4\");\nmodule.exports.v6.sync = () => sync(\"IPV6\");\n"]},"metadata":{},"sourceType":"script"}