{"ast":null,"code":"\"use strict\";\n\nvar _typeof = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/typeof.js\").default;\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.set.js\");\n\nrequire(\"core-js/modules/es.string.iterator.js\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.split.js\");\n\nrequire(\"core-js/modules/es.string.replace.js\");\n\nrequire(\"core-js/modules/es.regexp.test.js\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSchemaRefs = exports.resolveUrl = exports.normalizeId = exports._getFullPath = exports.getFullPath = exports.inlineRef = void 0;\n\nvar util_1 = require(\"./util\");\n\nvar equal = require(\"fast-deep-equal\");\n\nvar traverse = require(\"json-schema-traverse\"); // TODO refactor to use keyword definitions\n\n\nvar SIMPLE_INLINED = new Set([\"type\", \"format\", \"pattern\", \"maxLength\", \"minLength\", \"maxProperties\", \"minProperties\", \"maxItems\", \"minItems\", \"maximum\", \"minimum\", \"uniqueItems\", \"multipleOf\", \"required\", \"enum\", \"const\"]);\n\nfunction inlineRef(schema) {\n  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (typeof schema == \"boolean\") return true;\n  if (limit === true) return !hasRef(schema);\n  if (!limit) return false;\n  return countKeys(schema) <= limit;\n}\n\nexports.inlineRef = inlineRef;\nvar REF_KEYWORDS = new Set([\"$ref\", \"$recursiveRef\", \"$recursiveAnchor\", \"$dynamicRef\", \"$dynamicAnchor\"]);\n\nfunction hasRef(schema) {\n  for (var key in schema) {\n    if (REF_KEYWORDS.has(key)) return true;\n    var sch = schema[key];\n    if (Array.isArray(sch) && sch.some(hasRef)) return true;\n    if (_typeof(sch) == \"object\" && hasRef(sch)) return true;\n  }\n\n  return false;\n}\n\nfunction countKeys(schema) {\n  var count = 0;\n\n  for (var key in schema) {\n    if (key === \"$ref\") return Infinity;\n    count++;\n    if (SIMPLE_INLINED.has(key)) continue;\n\n    if (_typeof(schema[key]) == \"object\") {\n      (0, util_1.eachItem)(schema[key], function (sch) {\n        return count += countKeys(sch);\n      });\n    }\n\n    if (count === Infinity) return Infinity;\n  }\n\n  return count;\n}\n\nfunction getFullPath(resolver) {\n  var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  var normalize = arguments.length > 2 ? arguments[2] : undefined;\n  if (normalize !== false) id = normalizeId(id);\n  var p = resolver.parse(id);\n  return _getFullPath(resolver, p);\n}\n\nexports.getFullPath = getFullPath;\n\nfunction _getFullPath(resolver, p) {\n  var serialized = resolver.serialize(p);\n  return serialized.split(\"#\")[0] + \"#\";\n}\n\nexports._getFullPath = _getFullPath;\nvar TRAILING_SLASH_HASH = /#\\/?$/;\n\nfunction normalizeId(id) {\n  return id ? id.replace(TRAILING_SLASH_HASH, \"\") : \"\";\n}\n\nexports.normalizeId = normalizeId;\n\nfunction resolveUrl(resolver, baseId, id) {\n  id = normalizeId(id);\n  return resolver.resolve(baseId, id);\n}\n\nexports.resolveUrl = resolveUrl;\nvar ANCHOR = /^[a-z_][-a-z0-9._]*$/i;\n\nfunction getSchemaRefs(schema, baseId) {\n  var _this = this;\n\n  if (typeof schema == \"boolean\") return {};\n  var _this$opts = this.opts,\n      schemaId = _this$opts.schemaId,\n      uriResolver = _this$opts.uriResolver;\n  var schId = normalizeId(schema[schemaId] || baseId);\n  var baseIds = {\n    \"\": schId\n  };\n  var pathPrefix = getFullPath(uriResolver, schId, false);\n  var localRefs = {};\n  var schemaRefs = new Set();\n  traverse(schema, {\n    allKeys: true\n  }, function (sch, jsonPtr, _, parentJsonPtr) {\n    if (parentJsonPtr === undefined) return;\n    var fullPath = pathPrefix + jsonPtr;\n    var baseId = baseIds[parentJsonPtr];\n    if (typeof sch[schemaId] == \"string\") baseId = addRef.call(_this, sch[schemaId]);\n    addAnchor.call(_this, sch.$anchor);\n    addAnchor.call(_this, sch.$dynamicAnchor);\n    baseIds[jsonPtr] = baseId;\n\n    function addRef(ref) {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      var _resolve = this.opts.uriResolver.resolve;\n      ref = normalizeId(baseId ? _resolve(baseId, ref) : ref);\n      if (schemaRefs.has(ref)) throw ambiguos(ref);\n      schemaRefs.add(ref);\n      var schOrRef = this.refs[ref];\n      if (typeof schOrRef == \"string\") schOrRef = this.refs[schOrRef];\n\n      if (_typeof(schOrRef) == \"object\") {\n        checkAmbiguosRef(sch, schOrRef.schema, ref);\n      } else if (ref !== normalizeId(fullPath)) {\n        if (ref[0] === \"#\") {\n          checkAmbiguosRef(sch, localRefs[ref], ref);\n          localRefs[ref] = sch;\n        } else {\n          this.refs[ref] = fullPath;\n        }\n      }\n\n      return ref;\n    }\n\n    function addAnchor(anchor) {\n      if (typeof anchor == \"string\") {\n        if (!ANCHOR.test(anchor)) throw new Error(\"invalid anchor \\\"\".concat(anchor, \"\\\"\"));\n        addRef.call(this, \"#\".concat(anchor));\n      }\n    }\n  });\n  return localRefs;\n\n  function checkAmbiguosRef(sch1, sch2, ref) {\n    if (sch2 !== undefined && !equal(sch1, sch2)) throw ambiguos(ref);\n  }\n\n  function ambiguos(ref) {\n    return new Error(\"reference \\\"\".concat(ref, \"\\\" resolves to more than one schema\"));\n  }\n}\n\nexports.getSchemaRefs = getSchemaRefs;","map":{"version":3,"mappings":"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","names":["SIMPLE_INLINED","Set","inlineRef","schema","limit","hasRef","countKeys","exports","REF_KEYWORDS","key","has","sch","Array","isArray","some","count","Infinity","getFullPath","resolver","id","normalize","normalizeId","p","parse","_getFullPath","serialized","serialize","split","TRAILING_SLASH_HASH","replace","resolveUrl","baseId","resolve","ANCHOR","getSchemaRefs","opts","schemaId","uriResolver","schId","baseIds","pathPrefix","localRefs","schemaRefs","traverse","allKeys","jsonPtr","_","parentJsonPtr","undefined","fullPath","addRef","call","addAnchor","$anchor","$dynamicAnchor","ref","_resolve","ambiguos","add","schOrRef","refs","checkAmbiguosRef","anchor","test","Error","sch1","sch2","equal"],"sourceRoot":"","sources":["../../lib/compile/resolve.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}