{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.map.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.regexp.to-string.js\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each.js\");\n\nvar webpack = require(\"webpack\");\n\nvar _require = require(\"colorette\"),\n    isColorSupported = _require.isColorSupported;\n/** @typedef {import(\"webpack\").Configuration} Configuration */\n\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n\n/** @typedef {import(\"webpack\").MultiCompiler} MultiCompiler */\n\n/** @typedef {import(\"webpack\").Stats} Stats */\n\n/** @typedef {import(\"webpack\").MultiStats} MultiStats */\n\n/** @typedef {import(\"../index.js\").IncomingMessage} IncomingMessage */\n\n/** @typedef {import(\"../index.js\").ServerResponse} ServerResponse */\n\n/** @typedef {Configuration[\"stats\"]} StatsOptions */\n\n/** @typedef {{ children: Configuration[\"stats\"][] }} MultiStatsOptions */\n\n/** @typedef {Exclude<Configuration[\"stats\"], boolean | string | undefined>} NormalizedStatsOptions */\n// TODO remove `color` after dropping webpack v4\n\n/** @typedef {{ children: StatsOptions[], colors?: any }} MultiNormalizedStatsOptions */\n\n/**\n * @template {IncomingMessage} Request\n * @template {ServerResponse} Response\n * @param {import(\"../index.js\").Context<Request, Response>} context\n */\n\n\nfunction setupHooks(context) {\n  function invalid() {\n    if (context.state) {\n      context.logger.log(\"Compilation starting...\");\n    } // We are now in invalid state\n    // eslint-disable-next-line no-param-reassign\n\n\n    context.state = false; // eslint-disable-next-line no-param-reassign, no-undefined\n\n    context.stats = undefined;\n  } // @ts-ignore\n\n\n  var statsForWebpack4 = webpack.Stats && webpack.Stats.presetToOptions;\n  /**\n   * @param {Configuration[\"stats\"]} statsOptions\n   * @returns {NormalizedStatsOptions}\n   */\n\n  function normalizeStatsOptions(statsOptions) {\n    if (statsForWebpack4) {\n      if (typeof statsOptions === \"undefined\") {\n        // eslint-disable-next-line no-param-reassign\n        statsOptions = {};\n      } else if (typeof statsOptions === \"boolean\" || typeof statsOptions === \"string\") {\n        // @ts-ignore\n        // eslint-disable-next-line no-param-reassign\n        statsOptions = webpack.Stats.presetToOptions(statsOptions);\n      } // @ts-ignore\n\n\n      return statsOptions;\n    }\n\n    if (typeof statsOptions === \"undefined\") {\n      // eslint-disable-next-line no-param-reassign\n      statsOptions = {\n        preset: \"normal\"\n      };\n    } else if (typeof statsOptions === \"boolean\") {\n      // eslint-disable-next-line no-param-reassign\n      statsOptions = statsOptions ? {\n        preset: \"normal\"\n      } : {\n        preset: \"none\"\n      };\n    } else if (typeof statsOptions === \"string\") {\n      // eslint-disable-next-line no-param-reassign\n      statsOptions = {\n        preset: statsOptions\n      };\n    }\n\n    return statsOptions;\n  }\n  /**\n   * @param {Stats | MultiStats} stats\n   */\n\n\n  function done(stats) {\n    // We are now on valid state\n    // eslint-disable-next-line no-param-reassign\n    context.state = true; // eslint-disable-next-line no-param-reassign\n\n    context.stats = stats; // Do the stuff in nextTick, because bundle may be invalidated if a change happened while compiling\n\n    process.nextTick(function () {\n      var compiler = context.compiler,\n          logger = context.logger,\n          options = context.options,\n          state = context.state,\n          callbacks = context.callbacks; // Check if still in valid state\n\n      if (!state) {\n        return;\n      }\n\n      logger.log(\"Compilation finished\");\n      var isMultiCompilerMode = Boolean(\n      /** @type {MultiCompiler} */\n      compiler.compilers);\n      /**\n       * @type {StatsOptions | MultiStatsOptions | NormalizedStatsOptions | MultiNormalizedStatsOptions}\n       */\n\n      var statsOptions;\n\n      if (typeof options.stats !== \"undefined\") {\n        statsOptions = isMultiCompilerMode ? {\n          children:\n          /** @type {MultiCompiler} */\n          compiler.compilers.map(function () {\n            return options.stats;\n          })\n        } : options.stats;\n      } else {\n        statsOptions = isMultiCompilerMode ? {\n          children:\n          /** @type {MultiCompiler} */\n          compiler.compilers.map(function (child) {\n            return child.options.stats;\n          })\n        } :\n        /** @type {Compiler} */\n        compiler.options.stats;\n      }\n\n      if (isMultiCompilerMode) {\n        /** @type {MultiNormalizedStatsOptions} */\n        statsOptions.children =\n        /** @type {MultiStatsOptions} */\n        statsOptions.children.map(\n        /**\n         * @param {StatsOptions} childStatsOptions\n         * @return {NormalizedStatsOptions}\n         */\n        function (childStatsOptions) {\n          // eslint-disable-next-line no-param-reassign\n          childStatsOptions = normalizeStatsOptions(childStatsOptions);\n\n          if (typeof childStatsOptions.colors === \"undefined\") {\n            // eslint-disable-next-line no-param-reassign\n            childStatsOptions.colors = isColorSupported;\n          }\n\n          return childStatsOptions;\n        });\n      } else {\n        /** @type {NormalizedStatsOptions} */\n        statsOptions = normalizeStatsOptions(\n        /** @type {StatsOptions} */\n        statsOptions);\n\n        if (typeof statsOptions.colors === \"undefined\") {\n          statsOptions.colors = isColorSupported;\n        }\n      } // TODO webpack@4 doesn't support `{ children: [{ colors: true }, { colors: true }] }` for stats\n\n\n      if (\n      /** @type {MultiCompiler} */\n      compiler.compilers && statsForWebpack4) {\n        /** @type {MultiNormalizedStatsOptions} */\n        statsOptions.colors =\n        /** @type {MultiNormalizedStatsOptions} */\n        statsOptions.children.some(\n        /**\n         * @param {StatsOptions} child\n         */\n        // @ts-ignore\n        function (child) {\n          return child.colors;\n        });\n      }\n\n      var printedStats = stats.toString(statsOptions); // Avoid extra empty line when `stats: 'none'`\n\n      if (printedStats) {\n        // eslint-disable-next-line no-console\n        console.log(printedStats);\n      } // eslint-disable-next-line no-param-reassign\n\n\n      context.callbacks = []; // Execute callback that are delayed\n\n      callbacks.forEach(\n      /**\n       * @param {(...args: any[]) => Stats | MultiStats} callback\n       */\n      function (callback) {\n        callback(stats);\n      });\n    });\n  }\n\n  context.compiler.hooks.watchRun.tap(\"webpack-dev-middleware\", invalid);\n  context.compiler.hooks.invalid.tap(\"webpack-dev-middleware\", invalid);\n  context.compiler.hooks.done.tap(\"webpack-dev-middleware\", done);\n}\n\nmodule.exports = setupHooks;","map":{"version":3,"sources":["E:/DW/wasai-cinema/node_modules/webpack-dev-middleware/dist/utils/setupHooks.js"],"names":["webpack","require","isColorSupported","setupHooks","context","invalid","state","logger","log","stats","undefined","statsForWebpack4","Stats","presetToOptions","normalizeStatsOptions","statsOptions","preset","done","process","nextTick","compiler","options","callbacks","isMultiCompilerMode","Boolean","compilers","children","map","child","childStatsOptions","colors","some","printedStats","toString","console","forEach","callback","hooks","watchRun","tap","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AAEA,eAEIA,OAAO,CAAC,WAAD,CAFX;AAAA,IACEC,gBADF,YACEA,gBADF;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAC3B,WAASC,OAAT,GAAmB;AACjB,QAAID,OAAO,CAACE,KAAZ,EAAmB;AACjBF,MAAAA,OAAO,CAACG,MAAR,CAAeC,GAAf,CAAmB,yBAAnB;AACD,KAHgB,CAGf;AACF;;;AAGAJ,IAAAA,OAAO,CAACE,KAAR,GAAgB,KAAhB,CAPiB,CAOM;;AAEvBF,IAAAA,OAAO,CAACK,KAAR,GAAgBC,SAAhB;AACD,GAX0B,CAWzB;;;AAGF,MAAMC,gBAAgB,GAAGX,OAAO,CAACY,KAAR,IAAiBZ,OAAO,CAACY,KAAR,CAAcC,eAAxD;AACA;AACF;AACA;AACA;;AAEE,WAASC,qBAAT,CAA+BC,YAA/B,EAA6C;AAC3C,QAAIJ,gBAAJ,EAAsB;AACpB,UAAI,OAAOI,YAAP,KAAwB,WAA5B,EAAyC;AACvC;AACAA,QAAAA,YAAY,GAAG,EAAf;AACD,OAHD,MAGO,IAAI,OAAOA,YAAP,KAAwB,SAAxB,IAAqC,OAAOA,YAAP,KAAwB,QAAjE,EAA2E;AAChF;AACA;AACAA,QAAAA,YAAY,GAAGf,OAAO,CAACY,KAAR,CAAcC,eAAd,CAA8BE,YAA9B,CAAf;AACD,OARmB,CAQlB;;;AAGF,aAAOA,YAAP;AACD;;AAED,QAAI,OAAOA,YAAP,KAAwB,WAA5B,EAAyC;AACvC;AACAA,MAAAA,YAAY,GAAG;AACbC,QAAAA,MAAM,EAAE;AADK,OAAf;AAGD,KALD,MAKO,IAAI,OAAOD,YAAP,KAAwB,SAA5B,EAAuC;AAC5C;AACAA,MAAAA,YAAY,GAAGA,YAAY,GAAG;AAC5BC,QAAAA,MAAM,EAAE;AADoB,OAAH,GAEvB;AACFA,QAAAA,MAAM,EAAE;AADN,OAFJ;AAKD,KAPM,MAOA,IAAI,OAAOD,YAAP,KAAwB,QAA5B,EAAsC;AAC3C;AACAA,MAAAA,YAAY,GAAG;AACbC,QAAAA,MAAM,EAAED;AADK,OAAf;AAGD;;AAED,WAAOA,YAAP;AACD;AACD;AACF;AACA;;;AAGE,WAASE,IAAT,CAAcR,KAAd,EAAqB;AACnB;AACA;AACAL,IAAAA,OAAO,CAACE,KAAR,GAAgB,IAAhB,CAHmB,CAGG;;AAEtBF,IAAAA,OAAO,CAACK,KAAR,GAAgBA,KAAhB,CALmB,CAKI;;AAEvBS,IAAAA,OAAO,CAACC,QAAR,CAAiB,YAAM;AACrB,UACEC,QADF,GAMIhB,OANJ,CACEgB,QADF;AAAA,UAEEb,MAFF,GAMIH,OANJ,CAEEG,MAFF;AAAA,UAGEc,OAHF,GAMIjB,OANJ,CAGEiB,OAHF;AAAA,UAIEf,KAJF,GAMIF,OANJ,CAIEE,KAJF;AAAA,UAKEgB,SALF,GAMIlB,OANJ,CAKEkB,SALF,CADqB,CAOR;;AAEb,UAAI,CAAChB,KAAL,EAAY;AACV;AACD;;AAEDC,MAAAA,MAAM,CAACC,GAAP,CAAW,sBAAX;AACA,UAAMe,mBAAmB,GAAGC,OAAO;AACnC;AACAJ,MAAAA,QAAQ,CAACK,SAF0B,CAAnC;AAGA;AACN;AACA;;AAEM,UAAIV,YAAJ;;AAEA,UAAI,OAAOM,OAAO,CAACZ,KAAf,KAAyB,WAA7B,EAA0C;AACxCM,QAAAA,YAAY,GAAGQ,mBAAmB,GAAG;AACnCG,UAAAA,QAAQ;AACR;AACAN,UAAAA,QAAQ,CAACK,SAAT,CAAmBE,GAAnB,CAAuB;AAAA,mBAAMN,OAAO,CAACZ,KAAd;AAAA,WAAvB;AAHmC,SAAH,GAI9BY,OAAO,CAACZ,KAJZ;AAKD,OAND,MAMO;AACLM,QAAAA,YAAY,GAAGQ,mBAAmB,GAAG;AACnCG,UAAAA,QAAQ;AACR;AACAN,UAAAA,QAAQ,CAACK,SAAT,CAAmBE,GAAnB,CAAuB,UAAAC,KAAK;AAAA,mBAAIA,KAAK,CAACP,OAAN,CAAcZ,KAAlB;AAAA,WAA5B;AAHmC,SAAH;AAKlC;AACAW,QAAAA,QAAQ,CAACC,OAAT,CAAiBZ,KANjB;AAOD;;AAED,UAAIc,mBAAJ,EAAyB;AACvB;AACAR,QAAAA,YAAY,CAACW,QAAb;AACA;AACAX,QAAAA,YAAY,CAACW,QAAb,CAAsBC,GAAtB;AACA;AACR;AACA;AACA;AACQ,kBAAAE,iBAAiB,EAAI;AACnB;AACAA,UAAAA,iBAAiB,GAAGf,qBAAqB,CAACe,iBAAD,CAAzC;;AAEA,cAAI,OAAOA,iBAAiB,CAACC,MAAzB,KAAoC,WAAxC,EAAqD;AACnD;AACAD,YAAAA,iBAAiB,CAACC,MAAlB,GAA2B5B,gBAA3B;AACD;;AAED,iBAAO2B,iBAAP;AACD,SAfD,CAFA;AAkBD,OApBD,MAoBO;AACL;AACAd,QAAAA,YAAY,GAAGD,qBAAqB;AACpC;AACAC,QAAAA,YAFoC,CAApC;;AAIA,YAAI,OAAOA,YAAY,CAACe,MAApB,KAA+B,WAAnC,EAAgD;AAC9Cf,UAAAA,YAAY,CAACe,MAAb,GAAsB5B,gBAAtB;AACD;AACF,OApEoB,CAoEnB;;;AAGF;AACA;AACAkB,MAAAA,QAAQ,CAACK,SAAT,IAAsBd,gBAFtB,EAEwC;AACtC;AACAI,QAAAA,YAAY,CAACe,MAAb;AACA;AACAf,QAAAA,YAAY,CAACW,QAAb,CAAsBK,IAAtB;AACA;AACR;AACA;AACQ;AACA,kBAAAH,KAAK;AAAA,iBAAIA,KAAK,CAACE,MAAV;AAAA,SALL,CAFA;AAQD;;AAED,UAAME,YAAY,GAAGvB,KAAK,CAACwB,QAAN,CAAelB,YAAf,CAArB,CArFqB,CAqF8B;;AAEnD,UAAIiB,YAAJ,EAAkB;AAChB;AACAE,QAAAA,OAAO,CAAC1B,GAAR,CAAYwB,YAAZ;AACD,OA1FoB,CA0FnB;;;AAGF5B,MAAAA,OAAO,CAACkB,SAAR,GAAoB,EAApB,CA7FqB,CA6FG;;AAExBA,MAAAA,SAAS,CAACa,OAAV;AACA;AACN;AACA;AACM,gBAAAC,QAAQ,EAAI;AACVA,QAAAA,QAAQ,CAAC3B,KAAD,CAAR;AACD,OAND;AAOD,KAtGD;AAuGD;;AAEDL,EAAAA,OAAO,CAACgB,QAAR,CAAiBiB,KAAjB,CAAuBC,QAAvB,CAAgCC,GAAhC,CAAoC,wBAApC,EAA8DlC,OAA9D;AACAD,EAAAA,OAAO,CAACgB,QAAR,CAAiBiB,KAAjB,CAAuBhC,OAAvB,CAA+BkC,GAA/B,CAAmC,wBAAnC,EAA6DlC,OAA7D;AACAD,EAAAA,OAAO,CAACgB,QAAR,CAAiBiB,KAAjB,CAAuBpB,IAAvB,CAA4BsB,GAA5B,CAAgC,wBAAhC,EAA0DtB,IAA1D;AACD;;AAEDuB,MAAM,CAACC,OAAP,GAAiBtC,UAAjB","sourcesContent":["\"use strict\";\n\nconst webpack = require(\"webpack\");\n\nconst {\n  isColorSupported\n} = require(\"colorette\");\n/** @typedef {import(\"webpack\").Configuration} Configuration */\n\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n\n/** @typedef {import(\"webpack\").MultiCompiler} MultiCompiler */\n\n/** @typedef {import(\"webpack\").Stats} Stats */\n\n/** @typedef {import(\"webpack\").MultiStats} MultiStats */\n\n/** @typedef {import(\"../index.js\").IncomingMessage} IncomingMessage */\n\n/** @typedef {import(\"../index.js\").ServerResponse} ServerResponse */\n\n/** @typedef {Configuration[\"stats\"]} StatsOptions */\n\n/** @typedef {{ children: Configuration[\"stats\"][] }} MultiStatsOptions */\n\n/** @typedef {Exclude<Configuration[\"stats\"], boolean | string | undefined>} NormalizedStatsOptions */\n// TODO remove `color` after dropping webpack v4\n\n/** @typedef {{ children: StatsOptions[], colors?: any }} MultiNormalizedStatsOptions */\n\n/**\n * @template {IncomingMessage} Request\n * @template {ServerResponse} Response\n * @param {import(\"../index.js\").Context<Request, Response>} context\n */\n\n\nfunction setupHooks(context) {\n  function invalid() {\n    if (context.state) {\n      context.logger.log(\"Compilation starting...\");\n    } // We are now in invalid state\n    // eslint-disable-next-line no-param-reassign\n\n\n    context.state = false; // eslint-disable-next-line no-param-reassign, no-undefined\n\n    context.stats = undefined;\n  } // @ts-ignore\n\n\n  const statsForWebpack4 = webpack.Stats && webpack.Stats.presetToOptions;\n  /**\n   * @param {Configuration[\"stats\"]} statsOptions\n   * @returns {NormalizedStatsOptions}\n   */\n\n  function normalizeStatsOptions(statsOptions) {\n    if (statsForWebpack4) {\n      if (typeof statsOptions === \"undefined\") {\n        // eslint-disable-next-line no-param-reassign\n        statsOptions = {};\n      } else if (typeof statsOptions === \"boolean\" || typeof statsOptions === \"string\") {\n        // @ts-ignore\n        // eslint-disable-next-line no-param-reassign\n        statsOptions = webpack.Stats.presetToOptions(statsOptions);\n      } // @ts-ignore\n\n\n      return statsOptions;\n    }\n\n    if (typeof statsOptions === \"undefined\") {\n      // eslint-disable-next-line no-param-reassign\n      statsOptions = {\n        preset: \"normal\"\n      };\n    } else if (typeof statsOptions === \"boolean\") {\n      // eslint-disable-next-line no-param-reassign\n      statsOptions = statsOptions ? {\n        preset: \"normal\"\n      } : {\n        preset: \"none\"\n      };\n    } else if (typeof statsOptions === \"string\") {\n      // eslint-disable-next-line no-param-reassign\n      statsOptions = {\n        preset: statsOptions\n      };\n    }\n\n    return statsOptions;\n  }\n  /**\n   * @param {Stats | MultiStats} stats\n   */\n\n\n  function done(stats) {\n    // We are now on valid state\n    // eslint-disable-next-line no-param-reassign\n    context.state = true; // eslint-disable-next-line no-param-reassign\n\n    context.stats = stats; // Do the stuff in nextTick, because bundle may be invalidated if a change happened while compiling\n\n    process.nextTick(() => {\n      const {\n        compiler,\n        logger,\n        options,\n        state,\n        callbacks\n      } = context; // Check if still in valid state\n\n      if (!state) {\n        return;\n      }\n\n      logger.log(\"Compilation finished\");\n      const isMultiCompilerMode = Boolean(\n      /** @type {MultiCompiler} */\n      compiler.compilers);\n      /**\n       * @type {StatsOptions | MultiStatsOptions | NormalizedStatsOptions | MultiNormalizedStatsOptions}\n       */\n\n      let statsOptions;\n\n      if (typeof options.stats !== \"undefined\") {\n        statsOptions = isMultiCompilerMode ? {\n          children:\n          /** @type {MultiCompiler} */\n          compiler.compilers.map(() => options.stats)\n        } : options.stats;\n      } else {\n        statsOptions = isMultiCompilerMode ? {\n          children:\n          /** @type {MultiCompiler} */\n          compiler.compilers.map(child => child.options.stats)\n        } :\n        /** @type {Compiler} */\n        compiler.options.stats;\n      }\n\n      if (isMultiCompilerMode) {\n        /** @type {MultiNormalizedStatsOptions} */\n        statsOptions.children =\n        /** @type {MultiStatsOptions} */\n        statsOptions.children.map(\n        /**\n         * @param {StatsOptions} childStatsOptions\n         * @return {NormalizedStatsOptions}\n         */\n        childStatsOptions => {\n          // eslint-disable-next-line no-param-reassign\n          childStatsOptions = normalizeStatsOptions(childStatsOptions);\n\n          if (typeof childStatsOptions.colors === \"undefined\") {\n            // eslint-disable-next-line no-param-reassign\n            childStatsOptions.colors = isColorSupported;\n          }\n\n          return childStatsOptions;\n        });\n      } else {\n        /** @type {NormalizedStatsOptions} */\n        statsOptions = normalizeStatsOptions(\n        /** @type {StatsOptions} */\n        statsOptions);\n\n        if (typeof statsOptions.colors === \"undefined\") {\n          statsOptions.colors = isColorSupported;\n        }\n      } // TODO webpack@4 doesn't support `{ children: [{ colors: true }, { colors: true }] }` for stats\n\n\n      if (\n      /** @type {MultiCompiler} */\n      compiler.compilers && statsForWebpack4) {\n        /** @type {MultiNormalizedStatsOptions} */\n        statsOptions.colors =\n        /** @type {MultiNormalizedStatsOptions} */\n        statsOptions.children.some(\n        /**\n         * @param {StatsOptions} child\n         */\n        // @ts-ignore\n        child => child.colors);\n      }\n\n      const printedStats = stats.toString(statsOptions); // Avoid extra empty line when `stats: 'none'`\n\n      if (printedStats) {\n        // eslint-disable-next-line no-console\n        console.log(printedStats);\n      } // eslint-disable-next-line no-param-reassign\n\n\n      context.callbacks = []; // Execute callback that are delayed\n\n      callbacks.forEach(\n      /**\n       * @param {(...args: any[]) => Stats | MultiStats} callback\n       */\n      callback => {\n        callback(stats);\n      });\n    });\n  }\n\n  context.compiler.hooks.watchRun.tap(\"webpack-dev-middleware\", invalid);\n  context.compiler.hooks.invalid.tap(\"webpack-dev-middleware\", invalid);\n  context.compiler.hooks.done.tap(\"webpack-dev-middleware\", done);\n}\n\nmodule.exports = setupHooks;"]},"metadata":{},"sourceType":"script"}