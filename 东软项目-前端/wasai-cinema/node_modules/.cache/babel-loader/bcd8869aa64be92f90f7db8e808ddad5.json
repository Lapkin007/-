{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nrequire(\"core-js/modules/es.array.join.js\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nvar path = require(\"path\");\n\nvar memfs = require(\"memfs\");\n/** @typedef {import(\"webpack\").MultiCompiler} MultiCompiler */\n\n/** @typedef {import(\"../index.js\").IncomingMessage} IncomingMessage */\n\n/** @typedef {import(\"../index.js\").ServerResponse} ServerResponse */\n\n/**\n * @template {IncomingMessage} Request\n * @template {ServerResponse} Response\n * @param {import(\"../index.js\").Context<Request, Response>} context\n */\n\n\nfunction setupOutputFileSystem(context) {\n  var outputFileSystem;\n\n  if (context.options.outputFileSystem) {\n    var outputFileSystemFromOptions = context.options.outputFileSystem; // Todo remove when we drop webpack@4 support\n\n    if (typeof outputFileSystemFromOptions.join !== \"function\") {\n      throw new Error(\"Invalid options: options.outputFileSystem.join() method is expected\");\n    } // Todo remove when we drop webpack@4 support\n    // @ts-ignore\n\n\n    if (typeof outputFileSystemFromOptions.mkdirp !== \"function\") {\n      throw new Error(\"Invalid options: options.outputFileSystem.mkdirp() method is expected\");\n    }\n\n    outputFileSystem = outputFileSystemFromOptions;\n  } else {\n    outputFileSystem = memfs.createFsFromVolume(new memfs.Volume()); // TODO: remove when we drop webpack@4 support\n    // @ts-ignore\n\n    outputFileSystem.join = path.join.bind(path);\n  }\n\n  var compilers =\n  /** @type {MultiCompiler} */\n  context.compiler.compilers || [context.compiler];\n\n  var _iterator = _createForOfIteratorHelper(compilers),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var compiler = _step.value;\n      compiler.outputFileSystem = outputFileSystem;\n    } // @ts-ignore\n    // eslint-disable-next-line no-param-reassign\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  context.outputFileSystem = outputFileSystem;\n}\n\nmodule.exports = setupOutputFileSystem;","map":{"version":3,"sources":["E:/DW/wasai-cinema/node_modules/webpack-dev-middleware/dist/utils/setupOutputFileSystem.js"],"names":["path","require","memfs","setupOutputFileSystem","context","outputFileSystem","options","outputFileSystemFromOptions","join","Error","mkdirp","createFsFromVolume","Volume","bind","compilers","compiler","module","exports"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AAEA,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA,SAASE,qBAAT,CAA+BC,OAA/B,EAAwC;AACtC,MAAIC,gBAAJ;;AAEA,MAAID,OAAO,CAACE,OAAR,CAAgBD,gBAApB,EAAsC;AACpC,QACoBE,2BADpB,GAEIH,OAAO,CAACE,OAFZ,CACED,gBADF,CADoC,CAGf;;AAErB,QAAI,OAAOE,2BAA2B,CAACC,IAAnC,KAA4C,UAAhD,EAA4D;AAC1D,YAAM,IAAIC,KAAJ,CAAU,qEAAV,CAAN;AACD,KAPmC,CAOlC;AACF;;;AAGA,QAAI,OAAOF,2BAA2B,CAACG,MAAnC,KAA8C,UAAlD,EAA8D;AAC5D,YAAM,IAAID,KAAJ,CAAU,uEAAV,CAAN;AACD;;AAEDJ,IAAAA,gBAAgB,GAAGE,2BAAnB;AACD,GAhBD,MAgBO;AACLF,IAAAA,gBAAgB,GAAGH,KAAK,CAACS,kBAAN,CAAyB,IAAIT,KAAK,CAACU,MAAV,EAAzB,CAAnB,CADK,CAC4D;AACjE;;AAEAP,IAAAA,gBAAgB,CAACG,IAAjB,GAAwBR,IAAI,CAACQ,IAAL,CAAUK,IAAV,CAAeb,IAAf,CAAxB;AACD;;AAED,MAAMc,SAAS;AACf;AACAV,EAAAA,OAAO,CAACW,QAAR,CAAiBD,SAAjB,IAA8B,CAACV,OAAO,CAACW,QAAT,CAF9B;;AA1BsC,6CA8BfD,SA9Be;AAAA;;AAAA;AA8BtC,wDAAkC;AAAA,UAAvBC,QAAuB;AAChCA,MAAAA,QAAQ,CAACV,gBAAT,GAA4BA,gBAA5B;AACD,KAhCqC,CAgCpC;AACF;;AAjCsC;AAAA;AAAA;AAAA;AAAA;;AAoCtCD,EAAAA,OAAO,CAACC,gBAAR,GAA2BA,gBAA3B;AACD;;AAEDW,MAAM,CAACC,OAAP,GAAiBd,qBAAjB","sourcesContent":["\"use strict\";\n\nconst path = require(\"path\");\n\nconst memfs = require(\"memfs\");\n/** @typedef {import(\"webpack\").MultiCompiler} MultiCompiler */\n\n/** @typedef {import(\"../index.js\").IncomingMessage} IncomingMessage */\n\n/** @typedef {import(\"../index.js\").ServerResponse} ServerResponse */\n\n/**\n * @template {IncomingMessage} Request\n * @template {ServerResponse} Response\n * @param {import(\"../index.js\").Context<Request, Response>} context\n */\n\n\nfunction setupOutputFileSystem(context) {\n  let outputFileSystem;\n\n  if (context.options.outputFileSystem) {\n    const {\n      outputFileSystem: outputFileSystemFromOptions\n    } = context.options; // Todo remove when we drop webpack@4 support\n\n    if (typeof outputFileSystemFromOptions.join !== \"function\") {\n      throw new Error(\"Invalid options: options.outputFileSystem.join() method is expected\");\n    } // Todo remove when we drop webpack@4 support\n    // @ts-ignore\n\n\n    if (typeof outputFileSystemFromOptions.mkdirp !== \"function\") {\n      throw new Error(\"Invalid options: options.outputFileSystem.mkdirp() method is expected\");\n    }\n\n    outputFileSystem = outputFileSystemFromOptions;\n  } else {\n    outputFileSystem = memfs.createFsFromVolume(new memfs.Volume()); // TODO: remove when we drop webpack@4 support\n    // @ts-ignore\n\n    outputFileSystem.join = path.join.bind(path);\n  }\n\n  const compilers =\n  /** @type {MultiCompiler} */\n  context.compiler.compilers || [context.compiler];\n\n  for (const compiler of compilers) {\n    compiler.outputFileSystem = outputFileSystem;\n  } // @ts-ignore\n  // eslint-disable-next-line no-param-reassign\n\n\n  context.outputFileSystem = outputFileSystem;\n}\n\nmodule.exports = setupOutputFileSystem;"]},"metadata":{},"sourceType":"script"}