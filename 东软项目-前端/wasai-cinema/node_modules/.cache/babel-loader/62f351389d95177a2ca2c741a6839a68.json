{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.split.js\");\n\nrequire(\"core-js/modules/es.regexp.test.js\");\n\nrequire(\"core-js/modules/es.string.replace.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _util_1 = require(\"./_util\");\n\nfunction getDef(opts) {\n  return {\n    keyword: \"deepProperties\",\n    type: \"object\",\n    schemaType: \"object\",\n    macro: function macro(schema) {\n      var allOf = [];\n\n      for (var pointer in schema) {\n        allOf.push(getSchema(pointer, schema[pointer]));\n      }\n\n      return {\n        allOf: allOf\n      };\n    },\n    metaSchema: {\n      type: \"object\",\n      propertyNames: {\n        type: \"string\",\n        format: \"json-pointer\"\n      },\n      additionalProperties: (0, _util_1.metaSchemaRef)(opts)\n    }\n  };\n}\n\nexports.default = getDef;\n\nfunction getSchema(jsonPointer, schema) {\n  var segments = jsonPointer.split(\"/\");\n  var rootSchema = {};\n  var pointerSchema = rootSchema;\n\n  for (var i = 1; i < segments.length; i++) {\n    var segment = segments[i];\n    var isLast = i === segments.length - 1;\n    segment = unescapeJsonPointer(segment);\n    var properties = pointerSchema.properties = {};\n    var items = void 0;\n\n    if (/[0-9]+/.test(segment)) {\n      var count = +segment;\n      items = pointerSchema.items = [];\n      pointerSchema.type = [\"object\", \"array\"];\n\n      while (count--) {\n        items.push({});\n      }\n    } else {\n      pointerSchema.type = \"object\";\n    }\n\n    pointerSchema = isLast ? schema : {};\n    properties[segment] = pointerSchema;\n    if (items) items.push(pointerSchema);\n  }\n\n  return rootSchema;\n}\n\nfunction unescapeJsonPointer(str) {\n  return str.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n}\n\nmodule.exports = getDef;","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAEA;;AAEA,SAAwBA,MAAxB,CAA+BC,IAA/B,EAAuD;AACrD,SAAO;AACLC,WAAO,EAAE,gBADJ;AAELC,QAAI,EAAE,QAFD;AAGLC,cAAU,EAAE,QAHP;AAILC,SAAK,EAAE,eAAUC,MAAV,EAA8C;AACnD,UAAMC,KAAK,GAAG,EAAd;;AACA,WAAK,IAAMC,OAAX,IAAsBF,MAAtB;AAA8BC,aAAK,CAACE,IAAN,CAAWC,SAAS,CAACF,OAAD,EAAUF,MAAM,CAACE,OAAD,CAAhB,CAApB;AAA9B;;AACA,aAAO;AAACD,aAAK,EAALA;AAAD,OAAP;AACD,KARI;AASLI,cAAU,EAAE;AACVR,UAAI,EAAE,QADI;AAEVS,mBAAa,EAAE;AAACT,YAAI,EAAE,QAAP;AAAiBU,cAAM,EAAE;AAAzB,OAFL;AAGVC,0BAAoB,EAAE,2BAAcb,IAAd;AAHZ;AATP,GAAP;AAeD;;AAhBDc;;AAkBA,SAASL,SAAT,CAAmBM,WAAnB,EAAwCV,MAAxC,EAA4D;AAC1D,MAAMW,QAAQ,GAAGD,WAAW,CAACE,KAAZ,CAAkB,GAAlB,CAAjB;AACA,MAAMC,UAAU,GAAiB,EAAjC;AACA,MAAIC,aAAa,GAAiBD,UAAlC;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,QAAQ,CAACK,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,QAAIE,OAAO,GAAWN,QAAQ,CAACI,CAAD,CAA9B;AACA,QAAMG,MAAM,GAAGH,CAAC,KAAKJ,QAAQ,CAACK,MAAT,GAAkB,CAAvC;AACAC,WAAO,GAAGE,mBAAmB,CAACF,OAAD,CAA7B;AACA,QAAMG,UAAU,GAA4BN,aAAa,CAACM,UAAd,GAA2B,EAAvE;AACA,QAAIC,KAAiC,SAArC;;AACA,QAAI,SAASC,IAAT,CAAcL,OAAd,CAAJ,EAA4B;AAC1B,UAAIM,KAAK,GAAG,CAACN,OAAb;AACAI,WAAK,GAAGP,aAAa,CAACO,KAAd,GAAsB,EAA9B;AACAP,mBAAa,CAACjB,IAAd,GAAqB,CAAC,QAAD,EAAW,OAAX,CAArB;;AACA,aAAO0B,KAAK,EAAZ;AAAgBF,aAAK,CAAClB,IAAN,CAAW,EAAX;AAAhB;AACD,KALD,MAKO;AACLW,mBAAa,CAACjB,IAAd,GAAqB,QAArB;AACD;;AACDiB,iBAAa,GAAGI,MAAM,GAAGlB,MAAH,GAAY,EAAlC;AACAoB,cAAU,CAACH,OAAD,CAAV,GAAsBH,aAAtB;AACA,QAAIO,KAAJ,EAAWA,KAAK,CAAClB,IAAN,CAAWW,aAAX;AACZ;;AACD,SAAOD,UAAP;AACD;;AAED,SAASM,mBAAT,CAA6BK,GAA7B,EAAwC;AACtC,SAAOA,GAAG,CAACC,OAAJ,CAAY,KAAZ,EAAmB,GAAnB,EAAwBA,OAAxB,CAAgC,KAAhC,EAAuC,GAAvC,CAAP;AACD;;AAEDC,MAAM,CAACjB,OAAP,GAAiBf,MAAjB","names":["getDef","opts","keyword","type","schemaType","macro","schema","allOf","pointer","push","getSchema","metaSchema","propertyNames","format","additionalProperties","exports","jsonPointer","segments","split","rootSchema","pointerSchema","i","length","segment","isLast","unescapeJsonPointer","properties","items","test","count","str","replace","module"],"sourceRoot":"","sources":["../../src/definitions/deepProperties.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}