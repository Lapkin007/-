{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _inherits = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _classCallCheck = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nrequire(\"core-js/modules/es.symbol.js\");\n\nrequire(\"core-js/modules/es.symbol.description.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.regexp.to-string.js\");\n\nvar _require = require('./constants'),\n    kForOnEventAttribute = _require.kForOnEventAttribute,\n    kListener = _require.kListener;\n\nvar kCode = Symbol('kCode');\nvar kData = Symbol('kData');\nvar kError = Symbol('kError');\nvar kMessage = Symbol('kMessage');\nvar kReason = Symbol('kReason');\nvar kTarget = Symbol('kTarget');\nvar kType = Symbol('kType');\nvar kWasClean = Symbol('kWasClean');\n/**\n * Class representing an event.\n */\n\nvar Event = /*#__PURE__*/function () {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @throws {TypeError} If the `type` argument is not specified\n   */\n  function Event(type) {\n    _classCallCheck(this, Event);\n\n    this[kTarget] = null;\n    this[kType] = type;\n  }\n  /**\n   * @type {*}\n   */\n\n\n  _createClass(Event, [{\n    key: \"target\",\n    get: function get() {\n      return this[kTarget];\n    }\n    /**\n     * @type {String}\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this[kType];\n    }\n  }]);\n\n  return Event;\n}();\n\nObject.defineProperty(Event.prototype, 'target', {\n  enumerable: true\n});\nObject.defineProperty(Event.prototype, 'type', {\n  enumerable: true\n});\n/**\n * Class representing a close event.\n *\n * @extends Event\n */\n\nvar CloseEvent = /*#__PURE__*/function (_Event) {\n  _inherits(CloseEvent, _Event);\n\n  var _super = _createSuper(CloseEvent);\n\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {Number} [options.code=0] The status code explaining why the\n   *     connection was closed\n   * @param {String} [options.reason=''] A human-readable string explaining why\n   *     the connection was closed\n   * @param {Boolean} [options.wasClean=false] Indicates whether or not the\n   *     connection was cleanly closed\n   */\n  function CloseEvent(type) {\n    var _this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, CloseEvent);\n\n    _this = _super.call(this, type);\n    _this[kCode] = options.code === undefined ? 0 : options.code;\n    _this[kReason] = options.reason === undefined ? '' : options.reason;\n    _this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;\n    return _this;\n  }\n  /**\n   * @type {Number}\n   */\n\n\n  _createClass(CloseEvent, [{\n    key: \"code\",\n    get: function get() {\n      return this[kCode];\n    }\n    /**\n     * @type {String}\n     */\n\n  }, {\n    key: \"reason\",\n    get: function get() {\n      return this[kReason];\n    }\n    /**\n     * @type {Boolean}\n     */\n\n  }, {\n    key: \"wasClean\",\n    get: function get() {\n      return this[kWasClean];\n    }\n  }]);\n\n  return CloseEvent;\n}(Event);\n\nObject.defineProperty(CloseEvent.prototype, 'code', {\n  enumerable: true\n});\nObject.defineProperty(CloseEvent.prototype, 'reason', {\n  enumerable: true\n});\nObject.defineProperty(CloseEvent.prototype, 'wasClean', {\n  enumerable: true\n});\n/**\n * Class representing an error event.\n *\n * @extends Event\n */\n\nvar ErrorEvent = /*#__PURE__*/function (_Event2) {\n  _inherits(ErrorEvent, _Event2);\n\n  var _super2 = _createSuper(ErrorEvent);\n\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.error=null] The error that generated this event\n   * @param {String} [options.message=''] The error message\n   */\n  function ErrorEvent(type) {\n    var _this2;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, ErrorEvent);\n\n    _this2 = _super2.call(this, type);\n    _this2[kError] = options.error === undefined ? null : options.error;\n    _this2[kMessage] = options.message === undefined ? '' : options.message;\n    return _this2;\n  }\n  /**\n   * @type {*}\n   */\n\n\n  _createClass(ErrorEvent, [{\n    key: \"error\",\n    get: function get() {\n      return this[kError];\n    }\n    /**\n     * @type {String}\n     */\n\n  }, {\n    key: \"message\",\n    get: function get() {\n      return this[kMessage];\n    }\n  }]);\n\n  return ErrorEvent;\n}(Event);\n\nObject.defineProperty(ErrorEvent.prototype, 'error', {\n  enumerable: true\n});\nObject.defineProperty(ErrorEvent.prototype, 'message', {\n  enumerable: true\n});\n/**\n * Class representing a message event.\n *\n * @extends Event\n */\n\nvar MessageEvent = /*#__PURE__*/function (_Event3) {\n  _inherits(MessageEvent, _Event3);\n\n  var _super3 = _createSuper(MessageEvent);\n\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.data=null] The message content\n   */\n  function MessageEvent(type) {\n    var _this3;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, MessageEvent);\n\n    _this3 = _super3.call(this, type);\n    _this3[kData] = options.data === undefined ? null : options.data;\n    return _this3;\n  }\n  /**\n   * @type {*}\n   */\n\n\n  _createClass(MessageEvent, [{\n    key: \"data\",\n    get: function get() {\n      return this[kData];\n    }\n  }]);\n\n  return MessageEvent;\n}(Event);\n\nObject.defineProperty(MessageEvent.prototype, 'data', {\n  enumerable: true\n});\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\n\nvar EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} type A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @param {Object} [options] An options object specifies characteristics about\n   *     the event listener\n   * @param {Boolean} [options.once=false] A `Boolean` indicating that the\n   *     listener should be invoked at most once after being added. If `true`,\n   *     the listener would be automatically removed when invoked.\n   * @public\n   */\n  addEventListener: function addEventListener(type, listener) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var wrapper;\n\n    if (type === 'message') {\n      wrapper = function onMessage(data, isBinary) {\n        var event = new MessageEvent('message', {\n          data: isBinary ? data : data.toString()\n        });\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else if (type === 'close') {\n      wrapper = function onClose(code, message) {\n        var event = new CloseEvent('close', {\n          code: code,\n          reason: message.toString(),\n          wasClean: this._closeFrameReceived && this._closeFrameSent\n        });\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else if (type === 'error') {\n      wrapper = function onError(error) {\n        var event = new ErrorEvent('error', {\n          error: error,\n          message: error.message\n        });\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else if (type === 'open') {\n      wrapper = function onOpen() {\n        var event = new Event('open');\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else {\n      return;\n    }\n\n    wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];\n    wrapper[kListener] = listener;\n\n    if (options.once) {\n      this.once(type, wrapper);\n    } else {\n      this.on(type, wrapper);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} type A string representing the event type to remove\n   * @param {Function} handler The listener to remove\n   * @public\n   */\n  removeEventListener: function removeEventListener(type, handler) {\n    var _iterator = _createForOfIteratorHelper(this.listeners(type)),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var listener = _step.value;\n\n        if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {\n          this.removeListener(type, listener);\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n};\nmodule.exports = {\n  CloseEvent: CloseEvent,\n  ErrorEvent: ErrorEvent,\n  Event: Event,\n  EventTarget: EventTarget,\n  MessageEvent: MessageEvent\n};","map":{"version":3,"sources":["E:/DW/wasai-cinema/node_modules/webpack-dev-server/node_modules/ws/lib/event-target.js"],"names":["require","kForOnEventAttribute","kListener","kCode","Symbol","kData","kError","kMessage","kReason","kTarget","kType","kWasClean","Event","type","Object","defineProperty","prototype","enumerable","CloseEvent","options","code","undefined","reason","wasClean","ErrorEvent","error","message","MessageEvent","data","EventTarget","addEventListener","listener","wrapper","onMessage","isBinary","event","toString","call","onClose","_closeFrameReceived","_closeFrameSent","onError","onOpen","once","on","removeEventListener","handler","listeners","removeListener","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst { kForOnEventAttribute, kListener } = require('./constants');\n\nconst kCode = Symbol('kCode');\nconst kData = Symbol('kData');\nconst kError = Symbol('kError');\nconst kMessage = Symbol('kMessage');\nconst kReason = Symbol('kReason');\nconst kTarget = Symbol('kTarget');\nconst kType = Symbol('kType');\nconst kWasClean = Symbol('kWasClean');\n\n/**\n * Class representing an event.\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @throws {TypeError} If the `type` argument is not specified\n   */\n  constructor(type) {\n    this[kTarget] = null;\n    this[kType] = type;\n  }\n\n  /**\n   * @type {*}\n   */\n  get target() {\n    return this[kTarget];\n  }\n\n  /**\n   * @type {String}\n   */\n  get type() {\n    return this[kType];\n  }\n}\n\nObject.defineProperty(Event.prototype, 'target', { enumerable: true });\nObject.defineProperty(Event.prototype, 'type', { enumerable: true });\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {Number} [options.code=0] The status code explaining why the\n   *     connection was closed\n   * @param {String} [options.reason=''] A human-readable string explaining why\n   *     the connection was closed\n   * @param {Boolean} [options.wasClean=false] Indicates whether or not the\n   *     connection was cleanly closed\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kCode] = options.code === undefined ? 0 : options.code;\n    this[kReason] = options.reason === undefined ? '' : options.reason;\n    this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get code() {\n    return this[kCode];\n  }\n\n  /**\n   * @type {String}\n   */\n  get reason() {\n    return this[kReason];\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get wasClean() {\n    return this[kWasClean];\n  }\n}\n\nObject.defineProperty(CloseEvent.prototype, 'code', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'reason', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'wasClean', { enumerable: true });\n\n/**\n * Class representing an error event.\n *\n * @extends Event\n */\nclass ErrorEvent extends Event {\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.error=null] The error that generated this event\n   * @param {String} [options.message=''] The error message\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kError] = options.error === undefined ? null : options.error;\n    this[kMessage] = options.message === undefined ? '' : options.message;\n  }\n\n  /**\n   * @type {*}\n   */\n  get error() {\n    return this[kError];\n  }\n\n  /**\n   * @type {String}\n   */\n  get message() {\n    return this[kMessage];\n  }\n}\n\nObject.defineProperty(ErrorEvent.prototype, 'error', { enumerable: true });\nObject.defineProperty(ErrorEvent.prototype, 'message', { enumerable: true });\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.data=null] The message content\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kData] = options.data === undefined ? null : options.data;\n  }\n\n  /**\n   * @type {*}\n   */\n  get data() {\n    return this[kData];\n  }\n}\n\nObject.defineProperty(MessageEvent.prototype, 'data', { enumerable: true });\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} type A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @param {Object} [options] An options object specifies characteristics about\n   *     the event listener\n   * @param {Boolean} [options.once=false] A `Boolean` indicating that the\n   *     listener should be invoked at most once after being added. If `true`,\n   *     the listener would be automatically removed when invoked.\n   * @public\n   */\n  addEventListener(type, listener, options = {}) {\n    let wrapper;\n\n    if (type === 'message') {\n      wrapper = function onMessage(data, isBinary) {\n        const event = new MessageEvent('message', {\n          data: isBinary ? data : data.toString()\n        });\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else if (type === 'close') {\n      wrapper = function onClose(code, message) {\n        const event = new CloseEvent('close', {\n          code,\n          reason: message.toString(),\n          wasClean: this._closeFrameReceived && this._closeFrameSent\n        });\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else if (type === 'error') {\n      wrapper = function onError(error) {\n        const event = new ErrorEvent('error', {\n          error,\n          message: error.message\n        });\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else if (type === 'open') {\n      wrapper = function onOpen() {\n        const event = new Event('open');\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else {\n      return;\n    }\n\n    wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];\n    wrapper[kListener] = listener;\n\n    if (options.once) {\n      this.once(type, wrapper);\n    } else {\n      this.on(type, wrapper);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} type A string representing the event type to remove\n   * @param {Function} handler The listener to remove\n   * @public\n   */\n  removeEventListener(type, handler) {\n    for (const listener of this.listeners(type)) {\n      if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {\n        this.removeListener(type, listener);\n        break;\n      }\n    }\n  }\n};\n\nmodule.exports = {\n  CloseEvent,\n  ErrorEvent,\n  Event,\n  EventTarget,\n  MessageEvent\n};\n"]},"metadata":{},"sourceType":"script"}