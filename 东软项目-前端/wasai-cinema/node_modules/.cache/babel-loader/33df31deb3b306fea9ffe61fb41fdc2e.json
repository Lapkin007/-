{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.concat.js\");\n\nrequire(\"core-js/modules/es.symbol.js\");\n\nrequire(\"core-js/modules/es.symbol.description.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.array.join.js\");\n\nrequire(\"core-js/modules/es.array.filter.js\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nvar _require = require('human-signals'),\n    signalsByName = _require.signalsByName;\n\nvar getErrorPrefix = function getErrorPrefix(_ref) {\n  var timedOut = _ref.timedOut,\n      timeout = _ref.timeout,\n      errorCode = _ref.errorCode,\n      signal = _ref.signal,\n      signalDescription = _ref.signalDescription,\n      exitCode = _ref.exitCode,\n      isCanceled = _ref.isCanceled;\n\n  if (timedOut) {\n    return \"timed out after \".concat(timeout, \" milliseconds\");\n  }\n\n  if (isCanceled) {\n    return 'was canceled';\n  }\n\n  if (errorCode !== undefined) {\n    return \"failed with \".concat(errorCode);\n  }\n\n  if (signal !== undefined) {\n    return \"was killed with \".concat(signal, \" (\").concat(signalDescription, \")\");\n  }\n\n  if (exitCode !== undefined) {\n    return \"failed with exit code \".concat(exitCode);\n  }\n\n  return 'failed';\n};\n\nvar makeError = function makeError(_ref2) {\n  var stdout = _ref2.stdout,\n      stderr = _ref2.stderr,\n      all = _ref2.all,\n      error = _ref2.error,\n      signal = _ref2.signal,\n      exitCode = _ref2.exitCode,\n      command = _ref2.command,\n      escapedCommand = _ref2.escapedCommand,\n      timedOut = _ref2.timedOut,\n      isCanceled = _ref2.isCanceled,\n      killed = _ref2.killed,\n      timeout = _ref2.parsed.options.timeout;\n  // `signal` and `exitCode` emitted on `spawned.on('exit')` event can be `null`.\n  // We normalize them to `undefined`\n  exitCode = exitCode === null ? undefined : exitCode;\n  signal = signal === null ? undefined : signal;\n  var signalDescription = signal === undefined ? undefined : signalsByName[signal].description;\n  var errorCode = error && error.code;\n  var prefix = getErrorPrefix({\n    timedOut: timedOut,\n    timeout: timeout,\n    errorCode: errorCode,\n    signal: signal,\n    signalDescription: signalDescription,\n    exitCode: exitCode,\n    isCanceled: isCanceled\n  });\n  var execaMessage = \"Command \".concat(prefix, \": \").concat(command);\n  var isError = Object.prototype.toString.call(error) === '[object Error]';\n  var shortMessage = isError ? \"\".concat(execaMessage, \"\\n\").concat(error.message) : execaMessage;\n  var message = [shortMessage, stderr, stdout].filter(Boolean).join('\\n');\n\n  if (isError) {\n    error.originalMessage = error.message;\n    error.message = message;\n  } else {\n    error = new Error(message);\n  }\n\n  error.shortMessage = shortMessage;\n  error.command = command;\n  error.escapedCommand = escapedCommand;\n  error.exitCode = exitCode;\n  error.signal = signal;\n  error.signalDescription = signalDescription;\n  error.stdout = stdout;\n  error.stderr = stderr;\n\n  if (all !== undefined) {\n    error.all = all;\n  }\n\n  if ('bufferedData' in error) {\n    delete error.bufferedData;\n  }\n\n  error.failed = true;\n  error.timedOut = Boolean(timedOut);\n  error.isCanceled = isCanceled;\n  error.killed = killed && !timedOut;\n  return error;\n};\n\nmodule.exports = makeError;","map":{"version":3,"sources":["E:/DW/wasai-cinema/node_modules/default-gateway/node_modules/execa/lib/error.js"],"names":["require","signalsByName","getErrorPrefix","timedOut","timeout","errorCode","signal","signalDescription","exitCode","isCanceled","undefined","makeError","stdout","stderr","all","error","command","escapedCommand","killed","parsed","options","description","code","prefix","execaMessage","isError","Object","prototype","toString","call","shortMessage","message","filter","Boolean","join","originalMessage","Error","bufferedData","failed","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst {signalsByName} = require('human-signals');\n\nconst getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {\n\tif (timedOut) {\n\t\treturn `timed out after ${timeout} milliseconds`;\n\t}\n\n\tif (isCanceled) {\n\t\treturn 'was canceled';\n\t}\n\n\tif (errorCode !== undefined) {\n\t\treturn `failed with ${errorCode}`;\n\t}\n\n\tif (signal !== undefined) {\n\t\treturn `was killed with ${signal} (${signalDescription})`;\n\t}\n\n\tif (exitCode !== undefined) {\n\t\treturn `failed with exit code ${exitCode}`;\n\t}\n\n\treturn 'failed';\n};\n\nconst makeError = ({\n\tstdout,\n\tstderr,\n\tall,\n\terror,\n\tsignal,\n\texitCode,\n\tcommand,\n\tescapedCommand,\n\ttimedOut,\n\tisCanceled,\n\tkilled,\n\tparsed: {options: {timeout}}\n}) => {\n\t// `signal` and `exitCode` emitted on `spawned.on('exit')` event can be `null`.\n\t// We normalize them to `undefined`\n\texitCode = exitCode === null ? undefined : exitCode;\n\tsignal = signal === null ? undefined : signal;\n\tconst signalDescription = signal === undefined ? undefined : signalsByName[signal].description;\n\n\tconst errorCode = error && error.code;\n\n\tconst prefix = getErrorPrefix({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled});\n\tconst execaMessage = `Command ${prefix}: ${command}`;\n\tconst isError = Object.prototype.toString.call(error) === '[object Error]';\n\tconst shortMessage = isError ? `${execaMessage}\\n${error.message}` : execaMessage;\n\tconst message = [shortMessage, stderr, stdout].filter(Boolean).join('\\n');\n\n\tif (isError) {\n\t\terror.originalMessage = error.message;\n\t\terror.message = message;\n\t} else {\n\t\terror = new Error(message);\n\t}\n\n\terror.shortMessage = shortMessage;\n\terror.command = command;\n\terror.escapedCommand = escapedCommand;\n\terror.exitCode = exitCode;\n\terror.signal = signal;\n\terror.signalDescription = signalDescription;\n\terror.stdout = stdout;\n\terror.stderr = stderr;\n\n\tif (all !== undefined) {\n\t\terror.all = all;\n\t}\n\n\tif ('bufferedData' in error) {\n\t\tdelete error.bufferedData;\n\t}\n\n\terror.failed = true;\n\terror.timedOut = Boolean(timedOut);\n\terror.isCanceled = isCanceled;\n\terror.killed = killed && !timedOut;\n\n\treturn error;\n};\n\nmodule.exports = makeError;\n"]},"metadata":{},"sourceType":"script"}