{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"E:/DW/wasai-cinema/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\n\nvar _templateObject;\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar util_1 = require(\"../../compile/util\");\n\nvar error = {\n  message: \"property name must be valid\",\n  params: function params(_ref) {\n    var _params = _ref.params;\n    return (0, codegen_1._)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"{propertyName: \", \"}\"])), _params.propertyName);\n  }\n};\nvar def = {\n  keyword: \"propertyNames\",\n  type: \"object\",\n  schemaType: [\"object\", \"boolean\"],\n  error: error,\n  code: function code(cxt) {\n    var gen = cxt.gen,\n        schema = cxt.schema,\n        data = cxt.data,\n        it = cxt.it;\n    if ((0, util_1.alwaysValidSchema)(it, schema)) return;\n    var valid = gen.name(\"valid\");\n    gen.forIn(\"key\", data, function (key) {\n      cxt.setParams({\n        propertyName: key\n      });\n      cxt.subschema({\n        keyword: \"propertyNames\",\n        data: key,\n        dataTypes: [\"string\"],\n        propertyName: key,\n        compositeRule: true\n      }, valid);\n      gen.if((0, codegen_1.not)(valid), function () {\n        cxt.error(true);\n        if (!it.allErrors) gen.break();\n      });\n    });\n    cxt.ok(valid);\n  }\n};\nexports.default = def;","map":{"version":3,"mappings":";;;;;;;;;;;;AAOA;;AACA;;AAIA,IAAMA,KAAK,GAA2B;AACpCC,SAAO,EAAE,6BAD2B;AAEpCC,QAAM,EAAE;AAAA,QAAEA,OAAF,QAAEA,MAAF;AAAA,YAAc,cAAd,2FAAiCA,OAAM,CAACC,YAAxC;AAAA;AAF4B,CAAtC;AAKA,IAAMC,GAAG,GAA0B;AACjCC,SAAO,EAAE,eADwB;AAEjCC,MAAI,EAAE,QAF2B;AAGjCC,YAAU,EAAE,CAAC,QAAD,EAAW,SAAX,CAHqB;AAIjCP,OAAK,EAALA,KAJiC;AAKjCQ,MALiC,gBAK5BC,GAL4B,EAKb;AAClB,QAAOC,GAAP,GAAgCD,GAAhC,CAAOC,GAAP;AAAA,QAAYC,MAAZ,GAAgCF,GAAhC,CAAYE,MAAZ;AAAA,QAAoBC,IAApB,GAAgCH,GAAhC,CAAoBG,IAApB;AAAA,QAA0BC,EAA1B,GAAgCJ,GAAhC,CAA0BI,EAA1B;AACA,QAAI,8BAAkBA,EAAlB,EAAsBF,MAAtB,CAAJ,EAAmC;AACnC,QAAMG,KAAK,GAAGJ,GAAG,CAACK,IAAJ,CAAS,OAAT,CAAd;AAEAL,OAAG,CAACM,KAAJ,CAAU,KAAV,EAAiBJ,IAAjB,EAAuB,UAACK,GAAD,EAAQ;AAC7BR,SAAG,CAACS,SAAJ,CAAc;AAACf,oBAAY,EAAEc;AAAf,OAAd;AACAR,SAAG,CAACU,SAAJ,CACE;AACEd,eAAO,EAAE,eADX;AAEEO,YAAI,EAAEK,GAFR;AAGEG,iBAAS,EAAE,CAAC,QAAD,CAHb;AAIEjB,oBAAY,EAAEc,GAJhB;AAKEI,qBAAa,EAAE;AALjB,OADF,EAQEP,KARF;AAUAJ,SAAG,CAACY,EAAJ,CAAO,mBAAIR,KAAJ,CAAP,EAAmB,YAAK;AACtBL,WAAG,CAACT,KAAJ,CAAU,IAAV;AACA,YAAI,CAACa,EAAE,CAACU,SAAR,EAAmBb,GAAG,CAACc,KAAJ;AACpB,OAHD;AAID,KAhBD;AAkBAf,OAAG,CAACgB,EAAJ,CAAOX,KAAP;AACD;AA7BgC,CAAnC;AAgCAY,kBAAetB,GAAf","names":["error","message","params","propertyName","def","keyword","type","schemaType","code","cxt","gen","schema","data","it","valid","name","forIn","key","setParams","subschema","dataTypes","compositeRule","if","allErrors","break","ok","exports"],"sourceRoot":"","sources":["../../../lib/vocabularies/applicator/propertyNames.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}